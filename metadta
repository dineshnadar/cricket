import { Injectable } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { FormExtensionService } from './form-extension.service';

@Injectable({
  providedIn: 'root'
})
export class SampleFormComponentService {
  private form: FormGroup;

  constructor(
    private fb: FormBuilder,
    private formExtensionService: FormExtensionService
  ) {
    this.initializeForm();
  }

  private initializeForm() {
    this.form = this.fb.group({
      personalInfo: this.fb.group({
        name: ['', Validators.required],
        email: ['', [Validators.required, Validators.email]],
        age: [null, [Validators.required, Validators.min(18)]]
      }),
      address: this.fb.group({
        street: [''],
        city: [''],
        country: ['']
      }),
      preferences: this.fb.group({
        newsletter: [false],
        theme: ['light']
      })
    });

    this.formExtensionService.setForm(this.form);
    this.extendFormControls();
    this.applyDefaultValues();
    this.registerCustomComputations();
  }

  private extendFormControls() {
    // Extend personal info group
    this.formExtensionService.extendControl(this.form.get('personalInfo')!, {
      label: 'Personal Information',
      fldName: 'personalInfo',
      expand: true,
      sectionName: 'User Details'
    });

    // Extend name control
    this.formExtensionService.extendControl(this.form.get('personalInfo.name')!, {
      label: 'Full Name',
      fldName: 'fullName',
      required: true,
      fldMax: 100,
      dfltVal: 'John Doe',
      oldValue: true,
      subSectionName: 'Basic Info'
    });

    // Extend email control
    this.formExtensionService.extendControl(this.form.get('personalInfo.email')!, {
      label: 'Email Address',
      fldName: 'emailAddress',
      required: true,
      regex: ['^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'],
      fieldType: 'email',
      subSectionName: 'Basic Info'
    });

    // Extend age control
    this.formExtensionService.extendControl(this.form.get('personalInfo.age')!, {
      label: 'Age',
      fldName: 'age',
      required: true,
      fieldType: 'number',
      subSectionName: 'Additional Info'
    });

    // Extend address group
    this.formExtensionService.extendControl(this.form.get('address')!, {
      label: 'Address',
      fldName: 'address',
      expand: false,
      sectionName: 'Location'
    });

    // Extend preferences group
    this.formExtensionService.extendControl(this.form.get('preferences')!, {
      label: 'User Preferences',
      fldName: 'preferences',
      expand: true,
      sectionName: 'Settings'
    });

    // Extend newsletter control
    this.formExtensionService.extendControl(this.form.get('preferences.newsletter')!, {
      label: 'Subscribe to Newsletter',
      fldName: 'newsletter',
      fieldType: 'boolean'
    });

    // Extend theme control
    this.formExtensionService.extendControl(this.form.get('preferences.theme')!, {
      label: 'UI Theme',
      fldName: 'theme',
      lookupData: [
        { value: 'light', label: 'Light Theme' },
        { value: 'dark', label: 'Dark Theme' }
      ]
    });
  }

  private applyDefaultValues() {
    this.formExtensionService.applyDefaultValues(this.form, true);
  }

  private registerCustomComputations() {
    this.formExtensionService.registerCustomComputation('personalInfo.age', {
      compute: (control) => {
        const age = control.value;
        return age >= 18 ? 'Adult' : 'Minor';
      }
    });

    this.formExtensionService.registerCustomComputation('preferences.theme', {
      compute: (control) => {
        return `Current theme: ${control.value.charAt(0).toUpperCase() + control.value.slice(1)}`;
      }
    });
  }

  getForm(): FormGroup {
    return this.form;
  }

  getReadView() {
    return this.formExtensionService.getReadView();
  }

  toggleExpand(controlPath: string) {
    const currentExpand = this.formExtensionService.getExtendedProperties(controlPath)?.expand;
    this.formExtensionService.updateControlProperty(controlPath, 'expand', !currentExpand);
  }

  submitForm() {
    if (this.form.valid) {
      console.log('Form submitted:', this.form.value);
      return this.form.value;
    } else {
      console.log('Form is invalid');
      return null;
    }
  }
}

---------
import { Component } from '@angular/core';
import { SampleFormComponentService } from './sample-form-component.service';

@Component({
  selector: 'app-sample-form',
  templateUrl: './sample-form.component.html',
  styleUrls: ['./sample-form.component.css']
})
export class SampleFormComponent {
  form = this.sampleFormService.getForm();
  readView = this.sampleFormService.getReadView();

  constructor(public sampleFormService: SampleFormComponentService) {}

  onSubmit() {
    const formData = this.sampleFormService.submitForm();
    if (formData) {
      // Handle successful form submission
      console.log('Form submitted successfully:', formData);
    } else {
      // Handle form validation errors
      console.log('Form submission failed due to validation errors');
    }
  }

  toggleExpand(controlPath: string) {
    this.sampleFormService.toggleExpand(controlPath);
  }
}
