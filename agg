// libs/shared/message-banner/src/lib/interfaces/banner.interface.ts
import { SafeHtml } from '@angular/platform-browser';

export type BannerType = 'info' | 'success' | 'warning' | 'error';

export interface BannerButton {
  label: string;
  action?: string;
  disabled?: boolean;
  testId?: string;
}

export interface MessageBannerConfig {
  id: string;
  message: string | SafeHtml;
  type?: BannerType;
  verticalOffset?: string;
  showCloseIcon?: boolean;
  duration?: number;
  visible?: boolean;
  primaryButton?: BannerButton;
  secondaryButton?: BannerButton;
  disableAnimation?: boolean;
  ariaLabel?: string;
  testId?: string;
}

export interface BannerAction {
  bannerId: string;
  actionType: 'close' | 'primary' | 'secondary';
  action?: string;
}

// libs/shared/message-banner/src/lib/constants/banner.constants.ts
export const BANNER_DEFAULTS = {
  type: 'info' as const,
  verticalOffset: '0px',
  showCloseIcon: true,
  visible: true,
  disableAnimation: false
};

// libs/shared/message-banner/src/lib/services/message-banner.service.ts
import { Injectable, computed, inject, signal } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { MessageBannerConfig, BannerType } from '../interfaces/banner.interface';
import { BANNER_DEFAULTS } from '../constants/banner.constants';

@Injectable({
  providedIn: 'root'
})
export class MessageBannerService {
  private readonly sanitizer = inject(DomSanitizer);
  private readonly bannersSignal = signal<MessageBannerConfig[]>([]);
  private idCounter = 0;

  readonly activeBanners = computed(() => this.bannersSignal());

  show(config: Omit<MessageBannerConfig, 'id' | 'visible'> & { id?: string }): string {
    const id = config.id || this.generateId();
    const message = typeof config.message === 'string' 
      ? this.sanitizer.bypassSecurityTrustHtml(config.message)
      : config.message;

    const bannerConfig: MessageBannerConfig = {
      ...BANNER_DEFAULTS,
      ...config,
      id,
      message,
      visible: true
    };

    this.bannersSignal.update(banners => {
      const index = banners.findIndex(b => b.id === id);
      if (index >= 0) {
        const updatedBanners = [...banners];
        updatedBanners[index] = bannerConfig;
        return updatedBanners;
      }
      return [...banners, bannerConfig];
    });

    if (bannerConfig.duration) {
      setTimeout(() => this.close(id), bannerConfig.duration);
    }

    return id;
  }

  hide(id: string): void {
    this.updateBannerVisibility(id, false);
  }

  show(id: string): void {
    this.updateBannerVisibility(id, true);
  }

  close(id: string): void {
    this.bannersSignal.update(banners => 
      banners.filter(banner => banner.id !== id)
    );
  }

  getBannerById(id: string) {
    return computed(() => this.bannersSignal().find(banner => banner.id === id));
  }

  private generateId(): string {
    return `banner-${Date.now()}-${this.idCounter++}`;
  }

  private updateBannerVisibility(id: string, visible: boolean): void {
    this.bannersSignal.update(banners =>
      banners.map(banner =>
        banner.id === id ? { ...banner, visible } : banner
      )
    );
  }
}

// libs/shared/message-banner/src/lib/components/message-banner.component.ts
import { 
  ChangeDetectionStrategy, 
  Component, 
  EventEmitter, 
  Input, 
  Output, 
  computed, 
  inject 
} from '@angular/core';
import { CommonModule } from '@angular/common';
import { MessageBannerService } from '../services/message-banner.service';
import { BannerAction } from '../interfaces/banner.interface';

@Component({
  selector: 'lib-message-banner',
  standalone: true,
  imports: [CommonModule],
  template: `
    @if (banner(); as banner) {
      @if (banner.visible) {
        <div 
          class="message-banner"
          [class.animate]="!banner.disableAnimation"
          [ngClass]="banner.type"
          [style.top]="banner.verticalOffset"
          [attr.aria-label]="banner.ariaLabel"
          [attr.data-testid]="banner.testId">
          <div class="message-content" [innerHTML]="banner.message"></div>
          <div class="button-group">
            @if (banner.secondaryButton) {
              <button 
                class="btn-secondary"
                [disabled]="banner.secondaryButton.disabled"
                [attr.data-testid]="banner.secondaryButton.testId"
                (click)="onSecondaryClick(banner.id, banner.secondaryButton.action)">
                {{ banner.secondaryButton.label }}
              </button>
            }
            @if (banner.primaryButton) {
              <button 
                class="btn-primary"
                [disabled]="banner.primaryButton.disabled"
                [attr.data-testid]="banner.primaryButton.testId"
                (click)="onPrimaryClick(banner.id, banner.primaryButton.action)">
                {{ banner.primaryButton.label }}
              </button>
            }
            @if (banner.showCloseIcon) {
              <button 
                class="btn-close"
                aria-label="Close"
                (click)="onClose(banner.id)">
                Ã—
              </button>
            }
          </div>
        </div>
      }
    }
  `,
  styles: [`
    .message-banner {
      position: fixed;
      left: 50%;
      transform: translateX(-50%);
      padding: 12px 24px;
      border-radius: 4px;
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 1000;
      min-width: 300px;
      max-width: 600px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .animate {
      animation: slideIn 0.3s ease-out;
    }

    @keyframes slideIn {
      from {
        transform: translateX(-50%) translateY(-100%);
        opacity: 0;
      }
      to {
        transform: translateX(-50%) translateY(0);
        opacity: 1;
      }
    }

    .message-content {
      flex: 1;
      line-height: 1.5;
    }

    .button-group {
      display: flex;
      gap: 8px;
      align-items: center;
    }

    .btn-primary, .btn-secondary {
      padding: 6px 16px;
      border-radius: 4px;
      border: none;
      cursor: pointer;
      font-size: 14px;
      font-weight: 500;
      transition: background-color 0.2s;
    }

    .btn-primary {
      background-color: #1976d2;
      color: white;
    }

    .btn-primary:hover:not(:disabled) {
      background-color: #1565c0;
    }

    .btn-secondary {
      background-color: transparent;
      border: 1px solid currentColor;
    }

    .btn-secondary:hover:not(:disabled) {
      background-color: rgba(0,0,0,0.04);
    }

    .btn-close {
      background: none;
      border: none;
      font-size: 20px;
      padding: 4px;
      cursor: pointer;
      opacity: 0.7;
      transition: opacity 0.2s;
    }

    .btn-close:hover {
      opacity: 1;
    }

    button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .info {
      background-color: #e3f2fd;
      color: #0d47a1;
    }

    .success {
      background-color: #e8f5e9;
      color: #1b5e20;
    }

    .warning {
      background-color: #fff3e0;
      color: #e65100;
    }

    .error {
      background-color: #ffebee;
      color: #b71c1c;
    }
  `,
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class MessageBannerComponent {
  @Input({ required: true }) id!: string;
  @Output() readonly bannerAction = new EventEmitter<BannerAction>();

  private readonly bannerService = inject(MessageBannerService);
  readonly banner = computed(() => this.bannerService.getBannerById(this.id)());

  onClose(bannerId: string): void {
    this.bannerService.close(bannerId);
    this.emitAction('close', bannerId);
  }

  onPrimaryClick(bannerId: string, action?: string): void {
    this.emitAction('primary', bannerId, action);
  }

  onSecondaryClick(bannerId: string, action?: string): void {
    this.emitAction('secondary', bannerId, action);
  }

  private emitAction(
    actionType: BannerAction['actionType'], 
    bannerId: string, 
    action?: string
  ): void {
    this.bannerAction.emit({ bannerId, actionType, action });
  }
}

// libs/shared/message-banner/src/index.ts
export * from './lib/interfaces/banner.interface';
export * from './lib/services/message-banner.service';
export * from './lib/components/message-banner.component';
export * from './lib/constants/banner.constants';

--------------------

// apps/your-app/src/app/app.component.ts
import { Component, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { 
  MessageBannerService, 
  MessageBannerComponent, 
  BannerAction,
  BannerType 
} from '@your-workspace/shared/message-banner';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule, MessageBannerComponent],
  template: `
    <div class="container">
      <h2>Message Banner Demo</h2>

      <!-- Static banner placements -->
      <div class="banner-container">
        <h3>Static Banners</h3>
        <lib-message-banner 
          id="top-static-banner"
          (bannerAction)="onBannerAction($event)">
        </lib-message-banner>

        <lib-message-banner 
          id="middle-static-banner"
          (bannerAction)="onBannerAction($event)">
        </lib-message-banner>
      </div>

      <!-- Dynamic banners -->
      <div class="banner-container">
        <h3>Dynamic Banners</h3>
        @for (banner of bannerService.activeBanners(); track banner.id) {
          @if (!isStaticBanner(banner.id)) {
            <lib-message-banner 
              [id]="banner.id"
              (bannerAction)="onBannerAction($event)">
            </lib-message-banner>
          }
        }
      </div>

      <!-- Controls -->
      <div class="controls">
        <h3>Banner Controls</h3>
        
        <!-- Types -->
        <div class="control-group">
          <h4>Banner Types</h4>
          <button (click)="showInfoBanner()">Show Info Banner</button>
          <button (click)="showSuccessBanner()">Show Success Banner</button>
          <button (click)="showWarningBanner()">Show Warning Banner</button>
          <button (click)="showErrorBanner()">Show Error Banner</button>
        </div>

        <!-- Actions -->
        <div class="control-group">
          <h4>Action Banners</h4>
          <button (click)="showConfirmationBanner()">Show Confirmation</button>
          <button (click)="showChoiceBanner()">Show Choice Dialog</button>
          <button (click)="showAutoClosingBanner()">Show Auto-closing Banner</button>
        </div>

        <!-- Static Banner Controls -->
        <div class="control-group">
          <h4>Static Banner Controls</h4>
          <button (click)="showTopStaticBanner()">Show Top Static</button>
          <button (click)="showMiddleStaticBanner()">Show Middle Static</button>
          <button (click)="hideAllStaticBanners()">Hide All Static</button>
        </div>

        <!-- HTML Content -->
        <div class="control-group">
          <h4>Content Types</h4>
          <button (click)="showHtmlBanner()">Show HTML Content</button>
          <button (click)="showComplexBanner()">Show Complex Banner</button>
        </div>
      </div>
    </div>
  `,
  styles: [`
    .container {
      padding: 20px;
    }

    .controls {
      margin-top: 20px;
    }

    .control-group {
      margin-bottom: 20px;
    }

    button {
      margin: 5px;
      padding: 8px 16px;
      border-radius: 4px;
      border: 1px solid #ccc;
      background: #fff;
      cursor: pointer;
    }

    button:hover {
      background: #f0f0f0;
    }
  `]
})
export class AppComponent {
  private readonly bannerService = inject(MessageBannerService);
  private readonly staticBannerIds = ['top-static-banner', 'middle-static-banner'];

  // Helper Methods
  isStaticBanner(id: string): boolean {
    return this.staticBannerIds.includes(id);
  }

  // Basic Type Banners
  showInfoBanner(): void {
    this.bannerService.show({
      message: 'This is an information message',
      type: 'info',
      verticalOffset: '20px'
    });
  }

  showSuccessBanner(): void {
    this.bannerService.show({
      message: 'Operation completed successfully!',
      type: 'success',
      verticalOffset: '80px',
      duration: 3000
    });
  }

  showWarningBanner(): void {
    this.bannerService.show({
      message: 'Please review your changes before proceeding',
      type: 'warning',
      verticalOffset: '140px'
    });
  }

  showErrorBanner(): void {
    this.bannerService.show({
      message: 'An error occurred while processing your request',
      type: 'error',
      verticalOffset: '200px'
    });
  }

  // Action Banners
  showConfirmationBanner(): void {
    this.bannerService.show({
      message: 'Are you sure you want to proceed with this action?',
      type: 'warning',
      primaryButton: {
        label: 'Confirm',
        action: 'confirm_action'
      },
      secondaryButton: {
        label: 'Cancel',
        action: 'cancel_action'
      }
    });
  }

  showChoiceBanner(): void {
    this.bannerService.show({
      message: 'Would you like to save your changes?',
      type: 'info',
      primaryButton: {
        label: 'Save',
        action: 'save_changes'
      },
      secondaryButton: {
        label: 'Don\'t Save',
        action: 'discard_changes'
      },
      showCloseIcon: false
    });
  }

  showAutoClosingBanner(): void {
    this.bannerService.show({
      message: 'This banner will close automatically in 5 seconds',
      type: 'info',
      duration: 5000,
      verticalOffset: '260px'
    });
  }

  // Static Banner Controls
  showTopStaticBanner(): void {
    this.bannerService.show({
      id: 'top-static-banner',
      message: 'This is a static top banner',
      type: 'info',
      verticalOffset: '20px',
      primaryButton: {
        label: 'Action',
        action: 'static_action'
      }
    });
  }

  showMiddleStaticBanner(): void {
    this.bannerService.show({
      id: 'middle-static-banner',
      message: 'This is a static middle banner',
      type: 'warning',
      verticalOffset: '80px'
    });
  }

  hideAllStaticBanners(): void {
    this.staticBannerIds.forEach(id => this.bannerService.hide(id));
  }

  // Complex Content Banners
  showHtmlBanner(): void {
    this.bannerService.show({
      message: `
        <strong>HTML Content</strong>
        <p>This banner contains <em>formatted</em> text and a <a href="#">link</a>.</p>
      `,
      type: 'info',
      verticalOffset: '320px'
    });
  }

  showComplexBanner(): void {
    this.bannerService.show({
      message: `
        <div style="display: flex; align-items: center; gap: 12px;">
          <span style="font-size: 24px;">ðŸš€</span>
          <div>
            <strong>New Feature Available!</strong>
            <p style="margin: 4px 0 0 0;">Try our new dashboard experience.</p>
          </div>
        </div>
      `,
      type: 'success',
      verticalOffset: '380px',
      primaryButton: {
        label: 'Try Now',
        action: 'try_feature'
      },
      secondaryButton: {
        label: 'Learn More',
        action: 'learn_more'
      }
    });
  }

  // Action Handler
  onBannerAction(event: BannerAction): void {
    console.log('Banner action:', event);

    switch (event.action) {
      case 'confirm_action':
        console.log('Confirming action...');
        break;
      case 'cancel_action':
        console.log('Cancelling action...');
        break;
      case 'save_changes':
        console.log('Saving changes...');
        break;
      case 'discard_changes':
        console.log('Discarding changes...');
        break;
      case 'try_feature':
        console.log('Navigating to new feature...');
        break;
      case 'learn_more':
        console.log('Opening documentation...');
        break;
      case 'static_action':
        console.log('Static banner action...');
        break;
    }

    // Close banner after handling action (if needed)
    if (event.actionType !== 'close') {
      this.bannerService.close(event.bannerId);
    }
  }
}

-------------------

// libs/shared/message-banner/src/lib/services/message-banner.service.spec.ts
import { TestBed } from '@angular/core/testing';
import { MessageBannerService } from './message-banner.service';
import { DomSanitizer, SecurityContext } from '@angular/platform-browser';
import { MessageBannerConfig } from '../interfaces/banner.interface';

describe('MessageBannerService', () => {
  let service: MessageBannerService;
  let sanitizer: jest.Mocked<DomSanitizer>;

  beforeEach(() => {
    const mockSanitizer = {
      sanitize: jest.fn().mockImplementation((_, value) => value),
      bypassSecurityTrustHtml: jest.fn().mockImplementation(value => value)
    };

    TestBed.configureTestingModule({
      providers: [
        MessageBannerService,
        { provide: DomSanitizer, useValue: mockSanitizer }
      ]
    });

    service = TestBed.inject(MessageBannerService);
    sanitizer = TestBed.inject(DomSanitizer) as jest.Mocked<DomSanitizer>;
  });

  afterEach(() => {
    jest.useRealTimers();
  });

  describe('show', () => {
    it('should create banner with provided id', () => {
      const id = 'test-banner';
      const message = 'Test message';

      const bannerId = service.show({ id, message });
      const banner = service.getBannerById(id)();

      expect(bannerId).toBe(id);
      expect(banner).toBeDefined();
      expect(banner?.message).toBe(message);
    });

    it('should generate unique id when not provided', () => {
      const message = 'Test message';
      
      const bannerId = service.show({ message });
      const banner = service.getBannerById(bannerId)();

      expect(bannerId).toMatch(/banner-\d+-\d+/);
      expect(banner).toBeDefined();
    });

    it('should sanitize HTML message', () => {
      const htmlMessage = '<p>Test <strong>message</strong></p>';
      service.show({ message: htmlMessage });

      expect(sanitizer.bypassSecurityTrustHtml).toHaveBeenCalledWith(htmlMessage);
    });

    it('should update existing banner if id exists', () => {
      const id = 'test-banner';
      service.show({ id, message: 'Initial message' });
      service.show({ id, message: 'Updated message' });

      const banner = service.getBannerById(id)();
      expect(banner?.message).toBe('Updated message');
      expect(service.activeBanners().length).toBe(1);
    });

    it('should auto-close banner after duration', () => {
      jest.useFakeTimers();
      const id = 'test-banner';
      
      service.show({ id, message: 'Test', duration: 1000 });
      expect(service.getBannerById(id)()).toBeDefined();

      jest.advanceTimersByTime(1000);
      expect(service.getBannerById(id)()).toBeUndefined();
    });
  });

  describe('hide/show visibility', () => {
    it('should update banner visibility', () => {
      const id = 'test-banner';
      service.show({ id, message: 'Test' });

      service.hide(id);
      expect(service.getBannerById(id)()?.visible).toBe(false);

      service.show(id);
      expect(service.getBannerById(id)()?.visible).toBe(true);
    });
  });

  describe('close', () => {
    it('should remove banner', () => {
      const id = 'test-banner';
      service.show({ id, message: 'Test' });
      
      service.close(id);
      expect(service.getBannerById(id)()).toBeUndefined();
    });
  });

  describe('activeBanners', () => {
    it('should return all active banners', () => {
      service.show({ message: 'Banner 1' });
      service.show({ message: 'Banner 2' });
      service.show({ message: 'Banner 3' });

      expect(service.activeBanners().length).toBe(3);
    });
  });
});

// libs/shared/message-banner/src/lib/components/message-banner.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { MessageBannerComponent } from './message-banner.component';
import { MessageBannerService } from '../services/message-banner.service';
import { By } from '@angular/platform-browser';
import { Component } from '@angular/core';
import { BannerAction } from '../interfaces/banner.interface';

// Test Host Component
@Component({
  template: `
    <lib-message-banner
      [id]="bannerId"
      (bannerAction)="onAction($event)">
    </lib-message-banner>
  `
})
class TestHostComponent {
  bannerId = 'test-banner';
  onAction = jest.fn();
}

describe('MessageBannerComponent', () => {
  let component: TestHostComponent;
  let fixture: ComponentFixture<TestHostComponent>;
  let service: MessageBannerService;
  let bannerElement: HTMLElement;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [TestHostComponent],
      imports: [MessageBannerComponent],
      providers: [MessageBannerService]
    }).compileComponents();

    service = TestBed.inject(MessageBannerService);
    fixture = TestBed.createComponent(TestHostComponent);
    component = fixture.componentInstance;
  });

  const createBanner = (config: any = {}) => {
    service.show({
      id: 'test-banner',
      message: 'Test message',
      ...config
    });
    fixture.detectChanges();
    bannerElement = fixture.debugElement.query(By.css('.message-banner'))?.nativeElement;
  };

  it('should create', () => {
    createBanner();
    expect(component).toBeTruthy();
    expect(bannerElement).toBeTruthy();
  });

  it('should display message content', () => {
    createBanner({ message: 'Test message content' });
    const content = bannerElement.querySelector('.message-content');
    expect(content?.textContent).toContain('Test message content');
  });

  it('should apply correct type class', () => {
    createBanner({ type: 'warning' });
    expect(bannerElement.classList.contains('warning')).toBeTruthy();
  });

  it('should position banner using verticalOffset', () => {
    createBanner({ verticalOffset: '100px' });
    expect(bannerElement.style.top).toBe('100px');
  });

  describe('Primary Button', () => {
    it('should render and handle primary button click', () => {
      const action = 'test_action';
      createBanner({
        primaryButton: { label: 'Primary', action }
      });

      const button = fixture.debugElement.query(By.css('.btn-primary'));
      expect(button.nativeElement.textContent).toContain('Primary');

      button.nativeElement.click();
      expect(component.onAction).toHaveBeenCalledWith({
        bannerId: 'test-banner',
        actionType: 'primary',
        action
      });
    });

    it('should handle disabled state', () => {
      createBanner({
        primaryButton: { label: 'Primary', disabled: true }
      });

      const button = fixture.debugElement.query(By.css('.btn-primary'));
      expect(button.nativeElement.disabled).toBeTruthy();
    });
  });

  describe('Secondary Button', () => {
    it('should render and handle secondary button click', () => {
      const action = 'secondary_action';
      createBanner({
        secondaryButton: { label: 'Secondary', action }
      });

      const button = fixture.debugElement.query(By.css('.btn-secondary'));
      expect(button.nativeElement.textContent).toContain('Secondary');

      button.nativeElement.click();
      expect(component.onAction).toHaveBeenCalledWith({
        bannerId: 'test-banner',
        actionType: 'secondary',
        action
      });
    });
  });

  describe('Close Button', () => {
    it('should show close button by default', () => {
      createBanner();
      const closeButton = fixture.debugElement.query(By.css('.btn-close'));
      expect(closeButton).toBeTruthy();
    });

    it('should hide close button when showCloseIcon is false', () => {
      createBanner({ showCloseIcon: false });
      const closeButton = fixture.debugElement.query(By.css('.btn-close'));
      expect(closeButton).toBeFalsy();
    });

    it('should emit close action and close banner on click', () => {
      createBanner();
      const closeButton = fixture.debugElement.query(By.css('.btn-close'));
      
      closeButton.nativeElement.click();
      expect(component.onAction).toHaveBeenCalledWith({
        bannerId: 'test-banner',
        actionType: 'close'
      });
      
      fixture.detectChanges();
      expect(fixture.debugElement.query(By.css('.message-banner'))).toBeFalsy();
    });
  });

  describe('Visibility', () => {
    it('should show/hide banner based on visible property', () => {
      createBanner();
      expect(bannerElement).toBeTruthy();

      service.hide('test-banner');
      fixture.detectChanges();
      expect(fixture.debugElement.query(By.css('.message-banner'))).toBeFalsy();

      service.show('test-banner');
      fixture.detectChanges();
      expect(fixture.debugElement.query(By.css('.message-banner'))).toBeTruthy();
    });
  });

  describe('Animation', () => {
    it('should apply animation by default', () => {
      createBanner();
      expect(bannerElement.classList.contains('animate')).toBeTruthy();
    });

    it('should not animate when disableAnimation is true', () => {
      createBanner({ disableAnimation: true });
      expect(bannerElement.classList.contains('animate')).toBeFalsy();
    });
  });

  describe('Accessibility', () => {
    it('should set aria-label when provided', () => {
      createBanner({ ariaLabel: 'Test notification' });
      expect(bannerElement.getAttribute('aria-label')).toBe('Test notification');
    });

    it('should set data-testid when provided', () => {
      createBanner({ testId: 'test-banner-1' });
      expect(bannerElement.getAttribute('data-testid')).toBe('test-banner-1');
    });
  });

  describe('HTML Content', () => {
    it('should render HTML content safely', () => {
      const htmlContent = '<strong>Bold</strong> content';
      createBanner({ message: htmlContent });
      
      const content = bannerElement.querySelector('.message-content');
      expect(content?.innerHTML).toContain(htmlContent);
    });
  });
});
