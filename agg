
















------------------------------------------------------------------------
// example.service.ts
import { Injectable, inject } from '@angular/core';
import { ApiService } from './api.service';

interface UserProfile {
  id: string;
  name: string;
  // ... other properties
}

interface UserPreferences {
  theme: string;
  notifications: boolean;
  // ... other properties
}

@Injectable({
  providedIn: 'root'
})
export class ExampleService {
  private apiService = inject(ApiService);

  // Method 1: Using async/await
  async getUserData(userId: string): Promise<{ profile: UserProfile; preferences: UserPreferences }> {
    try {
      const profile = await this.apiService.get<UserProfile>('getUserProfile', { userId });
      const preferences = await this.apiService.get<UserPreferences>('getUserPreferences', { userId });

      return { profile, preferences };
    } catch (error) {
      throw new Error('Failed to fetch user data: ' + (error as Error).message);
    }
  }

  // Method 2: Using Promise.all() when calls can be parallel
  async getUserDataParallel(userId: string): Promise<{ profile: UserProfile; preferences: UserPreferences }> {
    try {
      const [profile, preferences] = await Promise.all([
        this.apiService.get<UserProfile>('getUserProfile', { userId }),
        this.apiService.get<UserPreferences>('getUserPreferences', { userId })
      ]);

      return { profile, preferences };
    } catch (error) {
      throw new Error('Failed to fetch user data: ' + (error as Error).message);
    }
  }

  // Method 3: Sequential calls where second call depends on first call's data
  async updateUserWithValidation(userId: string, updates: Partial<UserProfile>): Promise<UserProfile> {
    try {
      // First API call: Validate updates
      const validationResult = await this.apiService.post<{ isValid: boolean; errors?: string[] }>(
        'validateUserUpdates',
        { updates }
      );

      if (!validationResult.isValid) {
        throw new Error(`Validation failed: ${validationResult.errors?.join(', ')}`);
      }

      // Second API call: Apply updates
      return await this.apiService.put<UserProfile>('updateUserProfile', updates, { userId });
    } catch (error) {
      if (error instanceof Error) {
        throw error; // Re-throw validation errors
      }
      throw new Error('Failed to update user profile: ' + (error as Error).message);
    }
  }

  // Method 4: Complex sequential calls with different error handling
  async completeUserRegistration(userData: any): Promise<{ success: boolean; userId?: string; error?: string }> {
    try {
      // Step 1: Create user
      const user = await this.apiService.post<{ userId: string }>('createUser', userData);

      try {
        // Step 2: Set up user preferences
        await this.apiService.post('createUserPreferences', {
          userId: user.userId,
          defaultPreferences: true
        });

        try {
          // Step 3: Send welcome email
          await this.apiService.post('sendWelcomeEmail', { userId: user.userId });
          
          return { success: true, userId: user.userId };
        } catch (emailError) {
          // Non-critical error: Log but don't fail the registration
          console.warn('Failed to send welcome email:', emailError);
          return { success: true, userId: user.userId };
        }
      } catch (prefError) {
        // Critical error: Clean up and fail
        await this.apiService.delete('deleteUser', { userId: user.userId })
          .catch(deleteError => console.error('Cleanup failed:', deleteError));
        
        throw new Error('Failed to set up user preferences');
      }
    } catch (error) {
      return {
        success: false,
        error: `Registration failed: ${(error as Error).message}`
      };
    }
  }

  // Method 5: Sequential calls with rollback
  async transferFunds(fromAccount: string, toAccount: string, amount: number): Promise<boolean> {
    try {
      // Step 1: Check balance
      const balance = await this.apiService.get<{ amount: number }>(
        'getAccountBalance',
        { accountId: fromAccount }
      );

      if (balance.amount < amount) {
        throw new Error('Insufficient funds');
      }

      // Step 2: Debit from account
      const debitResult = await this.apiService.post('debitAccount', {
        accountId: fromAccount,
        amount
      });

      try {
        // Step 3: Credit to account
        await this.apiService.post('creditAccount', {
          accountId: toAccount,
          amount
        });

        return true;
      } catch (creditError) {
        // Rollback the debit if credit fails
        try {
          await this.apiService.post('creditAccount', {
            accountId: fromAccount,
            amount
          });
        } catch (rollbackError) {
          throw new Error('Critical: Failed to rollback transaction. Please contact support.');
        }
        throw new Error('Transfer failed during credit step');
      }
    } catch (error) {
      throw new Error(`Transfer failed: ${(error as Error).message}`);
    }
  }
}

------------x----
@Component({
  selector: 'app-user-profile',
  template: `
    @if (loading) {
      <div>Loading...</div>
    } @else if (error) {
      <div class="error">{{ error }}</div>
    } @else {
      <div>{{ userData | json }}</div>
    }
  `
})
export class UserProfileComponent implements OnInit {
  loading = false;
  error: string | null = null;
  userData: any = null;

  constructor(private exampleService: ExampleService) {}

  async ngOnInit() {
    this.loading = true;
    this.error = null;

    try {
      this.userData = await this.exampleService.getUserData('123');
    } catch (error) {
      this.error = error instanceof Error ? error.message : 'An unknown error occurred';
    } finally {
      this.loading = false;
    }
  }

  async handleComplexOperation() {
    this.loading = true;
    this.error = null;

    try {
      const result = await this.exampleService.completeUserRegistration({
        // user data
      });

      if (!result.success) {
        throw new Error(result.error);
      }

      // Handle success
    } catch (error) {
      this.error = error instanceof Error ? error.message : 'An unknown error occurred';
    } finally {
      this.loading = false;
    }
  }
}

--------------x--------------

@Component({
  selector: 'app-user-profile',
  template: `
    @if (loading) {
      <div>Loading...</div>
    } @else if (error) {
      <div class="error">{{ error }}</div>
    } @else {
      <div>{{ userData | json }}</div>
    }
  `
})
export class UserProfileComponent implements OnInit {
  loading = false;
  error: string | null = null;
  userData: any = null;

  constructor(private exampleService: ExampleService) {}

  async ngOnInit() {
    this.loading = true;
    this.error = null;

    try {
      this.userData = await this.exampleService.getUserData('123');
    } catch (error) {
      this.error = error instanceof Error ? error.message : 'An unknown error occurred';
    } finally {
      this.loading = false;
    }
  }

  async handleComplexOperation() {
    this.loading = true;
    this.error = null;

    try {
      const result = await this.exampleService.completeUserRegistration({
        // user data
      });

      if (!result.success) {
        throw new Error(result.error);
      }

      // Handle success
    } catch (error) {
      this.error = error instanceof Error ? error.message : 'An unknown error occurred';
    } finally {
      this.loading = false;
    }
  }
}

-----------xxxx------

// user-dashboard.component.ts
import { Component, OnInit, inject, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ExampleService } from './example.service';

interface UserData {
  profile: UserProfile;
  preferences: UserPreferences;
}

interface UserProfile {
  id: string;
  name: string;
  email: string;
}

interface UserPreferences {
  theme: string;
  notifications: boolean;
}

@Component({
  selector: 'app-user-dashboard',
  standalone: true,
  imports: [CommonModule],
  template: `
    @if (loading()) {
      <div class="loading-container">
        <app-loading-spinner />
      </div>
    }

    @if (error()) {
      <div class="error-container">
        <div class="error-message">
          {{ error() }}
          <button (click)="retryLoad()" class="retry-button">
            Retry
          </button>
        </div>
      </div>
    }

    @if (userData()) {
      <div class="dashboard-container">
        <!-- Profile Section -->
        <div class="profile-section">
          <h2>Profile</h2>
          <div class="profile-details">
            <p>Name: {{ userData()?.profile.name }}</p>
            <p>Email: {{ userData()?.profile.email }}</p>
          </div>
        </div>

        <!-- Preferences Section -->
        <div class="preferences-section">
          <h2>Preferences</h2>
          <div class="preferences-details">
            <p>Theme: {{ userData()?.preferences.theme }}</p>
            <p>Notifications: {{ userData()?.preferences.notifications ? 'Enabled' : 'Disabled' }}</p>
          </div>
        </div>

        <!-- Actions Section -->
        <div class="actions-section">
          <button (click)="refreshData()" 
                  [disabled]="loading()"
                  class="refresh-button">
            Refresh Data
          </button>
        </div>
      </div>
    }
  `,
  styles: [`
    .dashboard-container {
      padding: 20px;
      max-width: 800px;
      margin: 0 auto;
    }

    .loading-container {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 200px;
    }

    .error-container {
      padding: 20px;
      background-color: #fff3f3;
      border: 1px solid #ff8080;
      border-radius: 4px;
      margin: 20px;
    }

    .error-message {
      color: #d63031;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .retry-button {
      background-color: #ff7675;
      color: white;
      border: none;
      padding: 5px 10px;
      border-radius: 4px;
      cursor: pointer;
    }

    .profile-section,
    .preferences-section {
      background-color: white;
      padding: 20px;
      border-radius: 4px;
      margin-bottom: 20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .actions-section {
      display: flex;
      justify-content: flex-end;
      padding: 20px 0;
    }

    .refresh-button {
      background-color: #74b9ff;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
    }

    .refresh-button:disabled {
      background-color: #ddd;
      cursor: not-allowed;
    }
  `]
})
export class UserDashboardComponent implements OnInit {
  private exampleService = inject(ExampleService);

  // Signals for state management
  loading = signal(false);
  error = signal<string | null>(null);
  userData = signal<UserData | null>(null);

  ngOnInit() {
    this.loadUserData();
  }

  async loadUserData(showLoading = true): Promise<void> {
    if (showLoading) {
      this.loading.set(true);
    }
    this.error.set(null);

    try {
      // Using parallel data fetching
      const userData = await this.exampleService.getUserDataParallel('123'); // Replace with actual user ID
      this.userData.set(userData);
    } catch (err) {
      this.error.set(this.getErrorMessage(err));
      this.userData.set(null);
    } finally {
      this.loading.set(false);
    }
  }

  // Silent refresh without showing loading indicator
  async refreshData(): Promise<void> {
    await this.loadUserData(false);
  }

  async retryLoad(): Promise<void> {
    await this.loadUserData();
  }

  private getErrorMessage(error: unknown): string {
    if (error instanceof Error) {
      return error.message;
    }
    return 'An unexpected error occurred';
  }
}

// Usage with optimistic updates:
@Component({
  selector: 'app-user-settings',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="settings-container">
      @if (userData()) {
        <div class="settings-form">
          <!-- Theme Toggle -->
          <div class="setting-item">
            <label>Theme</label>
            <select 
              [value]="userData()?.preferences.theme"
              (change)="updateTheme($event)"
              [disabled]="updating()"
            >
              <option value="light">Light</option>
              <option value="dark">Dark</option>
            </select>
          </div>

          <!-- Notifications Toggle -->
          <div class="setting-item">
            <label>
              <input 
                type="checkbox"
                [checked]="userData()?.preferences.notifications"
                (change)="updateNotifications($event)"
                [disabled]="updating()"
              >
              Enable Notifications
            </label>
          </div>
        </div>

        @if (error()) {
          <div class="error-message">
            {{ error() }}
          </div>
        }
      }
    </div>
  `
})
export class UserSettingsComponent implements OnInit {
  private exampleService = inject(ExampleService);

  userData = signal<UserData | null>(null);
  updating = signal(false);
  error = signal<string | null>(null);

  ngOnInit() {
    this.loadData();
  }

  async loadData(): Promise<void> {
    try {
      const data = await this.exampleService.getUserDataParallel('123');
      this.userData.set(data);
    } catch (err) {
      this.error.set(this.getErrorMessage(err));
    }
  }

  async updateTheme(event: Event): Promise<void> {
    const select = event.target as HTMLSelectElement;
    const newTheme = select.value;

    // Optimistic update
    this.updateLocalState({ theme: newTheme });

    try {
      this.updating.set(true);
      await this.exampleService.updateUserWithValidation('123', {
        preferences: { theme: newTheme }
      });
    } catch (err) {
      // Rollback on error
      await this.loadData();
      this.error.set(this.getErrorMessage(err));
    } finally {
      this.updating.set(false);
    }
  }

  async updateNotifications(event: Event): Promise<void> {
    const checkbox = event.target as HTMLInputElement;
    const enabled = checkbox.checked;

    // Optimistic update
    this.updateLocalState({ notifications: enabled });

    try {
      this.updating.set(true);
      await this.exampleService.updateUserWithValidation('123', {
        preferences: { notifications: enabled }
      });
    } catch (err) {
      // Rollback on error
      await this.loadData();
      this.error.set(this.getErrorMessage(err));
    } finally {
      this.updating.set(false);
    }
  }

  private updateLocalState(update: Partial<UserPreferences>): void {
    this.userData.update(data => {
      if (data) {
        return {
          ...data,
          preferences: {
            ...data.preferences,
            ...update
          }
        };
      }
      return data;
    });
  }

  private getErrorMessage(error: unknown): string {
    return error instanceof Error ? error.message : 'An unexpected error occurred';
  }
}
