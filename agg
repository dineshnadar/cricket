import { Component, inject, effect, OnInit, computed, signal } from '@angular/core';
import { AsyncPipe } from '@angular/common';
import { ProfileBuilderService, ActiveWidget } from './profile-builder.service';
import { LeftMenuComponent } from './left-menu.component';

@Component({
  selector: 'app-party-builder',
  standalone: true,
  imports: [AsyncPipe, LeftMenuComponent],
  template: `
    <!-- ... other template parts ... -->
    @if (activeProfile()) {
      <div class="party-builder">
        <app-left-menu />
        <div #widgetContainer></div>
        <div class="widget-navigation">
          <button (click)="loadPreviousWidget()" 
                  [disabled]="isNavigating() || isFirstWidget()">
            Previous
          </button>
         <button (click)="loadNextWidget()" 
        [disabled]="isNavigating() || (isLastWidget() | async)">
  Next
</button>
        </div>
        <div class="navigation-mode">
          <label>
            <input type="checkbox" [checked]="includeSubItems()" (change)="toggleNavigationMode()">
            Include sub-items in navigation
          </label>
        </div>
      </div>
    }
    <!-- ... other template parts ... -->
  `,
  styles: [/* ... */]
})
export class PartyBuilderComponent implements OnInit {
  private profileBuilder = inject(ProfileBuilderService);

  isNavigating = signal(false);
  includeSubItems = signal(false);

  activeWidget = this.profileBuilder.getActiveWidget;
  visibleWidgets = this.profileBuilder.getVisibleWidgets;

  isFirstWidget = computed(() => {
    const currentWidget = this.activeWidget();
    const widgets = this.visibleWidgets();
    if (!currentWidget || widgets.length === 0) return true;

    if (this.includeSubItems()) {
      return widgets[0].name === currentWidget.widgetName && 
             (!currentWidget.subItemName || 
              (Array.isArray(widgets[0].subMenu) && widgets[0].subMenu[0].name === currentWidget.subItemName));
    } else {
      return widgets[0].name === currentWidget.widgetName;
    }
  });

  isLastWidget = computed(async () => {
    const currentWidget = this.activeWidget();
    if (!currentWidget) return true;

    if (this.includeSubItems()) {
      return await this.profileBuilder.isLastItem(currentWidget);
    } else {
      const widgets = this.visibleWidgets();
      return widgets[widgets.length - 1].name === currentWidget.widgetName;
    }
  });

  // ... existing methods ...

  async loadNextWidget() {
    if (this.isNavigating() || await this.isLastWidget()) return;
    
    this.isNavigating.set(true);
    try {
      const currentWidget = this.activeWidget();
      if (currentWidget) {
        const nextWidget = this.includeSubItems()
          ? await this.profileBuilder.getNextWidget(currentWidget)
          : this.getNextTopLevelWidget(currentWidget.widgetName);
        
        if (nextWidget) {
          this.profileBuilder.setActiveWidget(
            nextWidget.widgetName, 
            this.includeSubItems() ? nextWidget.subItemName : undefined
          );
        }
      }
    } finally {
      this.isNavigating.set(false);
    }
  }

  // ... other methods ...
}


--------

import { Injectable, inject, signal, computed, type WritableSignal, type Signal } from '@angular/core';
import { WIDGET_CONFIG, WidgetConfig, SubMenuItem } from './widget-config';
import { WidgetStateService } from './widget-state.service';
import { DynamicMenuService } from './dynamic-menu.service';

export interface ActiveWidget {
  widgetName: string;
  subItemName?: string;
}

@Injectable({ providedIn: 'root' })
export class ProfileBuilderService {
  // ... existing code ...

  async isLastItem(currentWidget: ActiveWidget): Promise<boolean> {
    const visibleWidgets = this.getVisibleWidgets()();
    const currentWidgetIndex = visibleWidgets.findIndex(w => w.name === currentWidget.widgetName);
    
    if (currentWidgetIndex === -1 || currentWidgetIndex < visibleWidgets.length - 1) {
      return false;
    }

    const lastWidget = visibleWidgets[visibleWidgets.length - 1];
    const subItems = await this.getSubMenuItems(lastWidget);

    if (subItems.length === 0) {
      return !currentWidget.subItemName;
    }

    return currentWidget.subItemName === subItems[subItems.length - 1].name;
  }

  // ... existing methods ...
}
