// rule-factory.service.ts
import { Injectable } from '@angular/core';
import { 
  FieldRule, 
  ValidationRule, 
  Condition, 
  FieldReference, 
  FieldOperator 
} from './unified-validation.service';

/**
 * Factory service to create common validation rules
 */
@Injectable({ providedIn: 'root' })
export class RuleFactoryService {
  
  /**
   * Create a required field rule
   * @param dependencies Optional list of field dependencies that should trigger rule re-evaluation
   */
  createRequiredFieldRule(dependencies?: string[] | FieldReference[]): FieldRule {
    return {
      validation: {
        rules: [{ type: 'required' }]
      },
      runWhen: { 
        onLoad: true, 
        onChange: true,
        onDependencyChange: dependencies ? true : false 
      }
    };
  }
  
  /**
   * Create a conditional visibility rule
   * @param conditionField Field that controls visibility
   * @param conditionValue Value to compare against
   * @param operator Comparison operator
   * @param clearOnHide Whether to clear the field value when hidden
   */
  createConditionalVisibilityRule(
    conditionField: string | FieldReference,
    conditionValue: any,
    operator: FieldOperator = 'equals',
    clearOnHide: boolean = true
  ): FieldRule {
    return {
      conditions: [{
        field: conditionField,
        operator: operator,
        value: conditionValue
      }],
      visibility: {
        value: true,
        clearOnHide: clearOnHide
      },
      runWhen: { onLoad: true, onDependencyChange: true }
    };
  }
  
  /**
   * Create a filtered lookup rule
   * @param lookupName Name of the lookup to use
   * @param filterField Optional field to filter the lookup by
   * @param filterProperty Optional property on the lookup item to filter by
   */
  createFilteredLookupRule(
    lookupName: string,
    filterField?: string | FieldReference,
    filterProperty?: string
  ): FieldRule {
    const rule: FieldRule = {
      lookup: {
        lookupName: lookupName
      },
      runWhen: { onLoad: true }
    };
    
    if (filterField) {
      rule.lookup.filterBy = {
        field: filterField,
        property: filterProperty
      };
      rule.runWhen.onDependencyChange = true;
    }
    
    return rule;
  }
  
  /**
   * Create a conditional validation rule
   * @param validationRules List of validation rules to apply
   * @param conditions Optional conditions that determine if validation should be applied
   */
  createConditionalValidationRule(
    validationRules: ValidationRule[],
    conditions?: Condition[]
  ): FieldRule {
    return {
      validation: {
        rules: validationRules,
        conditions: conditions
      },
      runWhen: { 
        onLoad: true, 
        onChange: true, 
        onDependencyChange: conditions ? true : false
      }
    };
  }
  
  /**
   * Create an email validation rule
   * @param isRequired Whether the field is required
   */
  createEmailValidationRule(isRequired: boolean = false): FieldRule {
    const rules: ValidationRule[] = [
      { type: 'email' }
    ];
    
    if (isRequired) {
      rules.unshift({ type: 'required' });
    }
    
    return {
      validation: {
        rules: rules
      },
      runWhen: { onLoad: true, onChange: true }
    };
  }
  
  /**
   * Create a pattern validation rule
   * @param pattern Regular expression pattern
   * @param isRequired Whether the field is required
   */
  createPatternValidationRule(pattern: string, isRequired: boolean = false): FieldRule {
    const rules: ValidationRule[] = [
      { type: 'pattern', value: pattern }
    ];
    
    if (isRequired) {
      rules.unshift({ type: 'required' });
    }
    
    return {
      validation: {
        rules: rules
      },
      runWhen: { onLoad: true, onChange: true }
    };
  }
  
  /**
   * Create a length validation rule
   * @param minLength Minimum length
   * @param maxLength Maximum length
   * @param isRequired Whether the field is required
   */
  createLengthValidationRule(
    minLength?: number, 
    maxLength?: number, 
    isRequired: boolean = false
  ): FieldRule {
    const rules: ValidationRule[] = [];
    
    if (isRequired) {
      rules.push({ type: 'required' });
    }
    
    if (minLength !== undefined) {
      rules.push({ type: 'minLength', value: minLength });
    }
    
    if (maxLength !== undefined) {
      rules.push({ type: 'maxLength', value: maxLength });
    }
    
    return {
      validation: {
        rules: rules
      },
      runWhen: { onLoad: true, onChange: true }
    };
  }
  
  /**
   * Create a custom validator rule
   * @param customValidatorName Name of the custom validator
   * @param params Parameters to pass to the custom validator
   * @param isRequired Whether the field is required
   */
  createCustomValidationRule(
    customValidatorName: string,
    params?: any,
    isRequired: boolean = false
  ): FieldRule {
    const rules: ValidationRule[] = [
      { type: 'custom', customValidatorName, params }
    ];
    
    if (isRequired) {
      rules.unshift({ type: 'required' });
    }
    
    return {
      validation: {
        rules: rules
      },
      runWhen: { onLoad: true, onChange: true }
    };
  }
  
  /**
   * Create a hidden field rule
   * @param clearValue Whether to clear the field value when hidden
   */
  createHiddenFieldRule(clearValue: boolean = true): FieldRule {
    return {
      visibility: {
        value: false,
        clearOnHide: clearValue
      },
      runWhen: { onLoad: true }
    };
  }
  
  /**
   * Create a visible field rule
   */
  createVisibleFieldRule(): FieldRule {
    return {
      visibility: {
        value: true,
        clearOnHide: false
      },
      runWhen: { onLoad: true }
    };
  }
  
  /**
   * Combine multiple rules together
   * @param rules List of rules to combine
   */
  combineRules(...rules: FieldRule[]): FieldRule {
    const result: FieldRule = {};
    
    // Process all rules
    rules.forEach(rule => {
      // Combine conditions
      if (rule.conditions) {
        if (!result.conditions) {
          result.conditions = [...rule.conditions];
        } else {
          result.conditions.push(...rule.conditions);
        }
      }
      
      // Take the last visibility setting
      if (rule.visibility) {
        result.visibility = { ...rule.visibility };
      }
      
      // Combine validation
      if (rule.validation) {
        if (!result.validation) {
          result.validation = { 
            rules: [...rule.validation.rules],
            conditions: rule.validation.conditions ? [...rule.validation.conditions] : undefined
          };
        } else {
          result.validation.rules.push(...rule.validation.rules);
          if (rule.validation.conditions) {
            if (!result.validation.conditions) {
              result.validation.conditions = [...rule.validation.conditions];
            } else {
              result.validation.conditions.push(...rule.validation.conditions);
            }
          }
        }
      }
      
      // Take the last lookup setting
      if (rule.lookup) {
        result.lookup = { ...rule.lookup };
      }
      
      // Combine run settings (OR logic)
      if (rule.runWhen) {
        if (!result.runWhen) {
          result.runWhen = { ...rule.runWhen };
        } else {
          result.runWhen.onLoad = result.runWhen.onLoad || rule.runWhen.onLoad;
          result.runWhen.onChange = result.runWhen.onChange || rule.runWhen.onChange;
          result.runWhen.onDependencyChange = result.runWhen.onDependencyChange || rule.runWhen.onDependencyChange;
          result.runWhen.manual = result.runWhen.manual || rule.runWhen.manual;
        }
