import { Injectable, inject } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { ValidationService, FieldRule } from './enhanced-validation.service';

export interface AddressValidationConfig {
  // Simple boolean flag for whether address is required
  isRequired?: boolean;
  
  // Country code values (customizable)
  countryValues?: {
    usa?: string;
    canada?: string;
  };
  
  // Custom field names if different from default
  fieldNames?: {
    addressLine1?: string;
    addressLine2?: string;
    city?: string;
    stateCode?: string;
    zip?: string;
    provinceCode?: string;
    postalCode?: string;
    countryCode?: string;
  };
}

@Injectable({
  providedIn: 'root'
})
export class AddressValidationService {
  private validationService = inject(ValidationService);
  private registeredForms = new Map<string, { form: FormGroup; config: AddressValidationConfig }>();
  
  private defaultFieldNames = {
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    city: 'city',
    stateCode: 'stateCode',
    zip: 'zip',
    provinceCode: 'provinceCode',
    postalCode: 'postalCode',
    countryCode: 'countryCode'
  };
  
  private defaultCountryValues = {
    usa: 'USA',
    canada: 'CANADA'
  };

  /**
   * Register address validation rules for a FormGroup
   */
  registerAddressValidation(
    formId: string,
    addressForm: FormGroup,
    config: AddressValidationConfig = {}
  ): void {
    // Store the form and config for later updates
    this.registeredForms.set(formId, { form: addressForm, config });
    
    // Register the validation rules
    this.applyValidationRules(formId, addressForm, config);
  }

  /**
   * Update address validation configuration at runtime
   */
  updateAddressRequirement(formId: string, isRequired: boolean): void {
    const registeredForm = this.registeredForms.get(formId);
    if (!registeredForm) {
      console.warn(`No registered form found for formId: ${formId}`);
      return;
    }

    // Update the config
    const updatedConfig = { ...registeredForm.config, isRequired };
    this.registeredForms.set(formId, { ...registeredForm, config: updatedConfig });

    // Re-apply validation rules with updated config
    this.applyValidationRules(formId, registeredForm.form, updatedConfig);
  }

  /**
   * Apply validation rules to the form
   */
  private applyValidationRules(formId: string, addressForm: FormGroup, config: AddressValidationConfig): void {
    // Merge configuration with defaults
    const fieldNames = { ...this.defaultFieldNames, ...config.fieldNames };
    const countryValues = { ...this.defaultCountryValues, ...config.countryValues };
    
    // Create validation rules
    const addressRules = this.createAddressValidationRules(fieldNames, countryValues, config);
    
    // Register with validation service
    this.validationService.registerRules(formId, addressForm, addressRules);
  }

  /**
   * Create address validation rules based on configuration
   */
  private createAddressValidationRules(
    fieldNames: any,
    countryValues: any,
    config: AddressValidationConfig
  ): Record<string, FieldRule[]> {
    
    // Helper function to create "address line is not empty" condition
    const addressLineNotEmptyCondition = {
      operator: 'or' as const,
      conditions: [
        {
          field: fieldNames.addressLine1,
          fieldOperator: 'isNotEmpty' as const
        },
        {
          field: fieldNames.addressLine2,
          fieldOperator: 'isNotEmpty' as const
        }
      ]
    };

    // Helper function to create "any address field is not empty" condition
    const anyAddressFieldNotEmptyCondition = {
      operator: 'or' as const,
      conditions: [
        {
          field: fieldNames.addressLine1,
          fieldOperator: 'isNotEmpty' as const
        },
        {
          field: fieldNames.addressLine2,
          fieldOperator: 'isNotEmpty' as const
        },
        {
          field: fieldNames.city,
          fieldOperator: 'isNotEmpty' as const
        },
        {
          field: fieldNames.stateCode,
          fieldOperator: 'isNotEmpty' as const
        },
        {
          field: fieldNames.zip,
          fieldOperator: 'isNotEmpty' as const
        },
        {
          field: fieldNames.provinceCode,
          fieldOperator: 'isNotEmpty' as const
        },
        {
          field: fieldNames.postalCode,
          fieldOperator: 'isNotEmpty' as const
        }
      ]
    };

    // Create the base required condition
    const baseRequiredConditions = [addressLineNotEmptyCondition];
    
    // Add "always required" condition if config.isRequired is true
    if (config.isRequired) {
      // Since we can't create a dummy field, we'll use a different approach
      // We'll create a condition that always evaluates to true
      baseRequiredConditions.push({
        field: fieldNames.countryCode, // Using existing field
        fieldOperator: 'isEmpty' as const
      });
      baseRequiredConditions.push({
        field: fieldNames.countryCode, // Using existing field
        fieldOperator: 'isNotEmpty' as const
      });
    }

    const addressRequiredCondition = {
      operator: 'or' as const,
      conditions: baseRequiredConditions
    };

    const countryRequiredCondition = {
      operator: 'or' as const,
      conditions: config.isRequired ? [
        anyAddressFieldNotEmptyCondition,
        {
          field: fieldNames.countryCode,
          fieldOperator: 'isEmpty' as const
        },
        {
          field: fieldNames.countryCode,
          fieldOperator: 'isNotEmpty' as const
        }
      ] : [anyAddressFieldNotEmptyCondition]
    };

    const addressRules: Record<string, FieldRule[]> = {
      
      // Country Code - always visible, required based on configuration
      [fieldNames.countryCode]: [
        {
          conditions: [countryRequiredCondition],
          validation: {
            rules: [{ type: 'required' }]
          }
        }
      ],

      // Address Line 1 - always visible, add required rule if config.isRequired
      [fieldNames.addressLine1]: config.isRequired ? [
        {
          visibility: { value: true }
        },
        {
          validation: {
            rules: [{ type: 'required' }]
          }
        }
      ] : [
        {
          visibility: { value: true }
        }
      ],

      // Address Line 2 - always visible, never required
      [fieldNames.addressLine2]: [
        {
          visibility: { value: true }
        }
      ],

      // City - visible based on country code rules
      [fieldNames.city]: [
        // Visibility rule
        {
          conditions: [
            {
              operator: 'or',
              conditions: [
                { field: fieldNames.countryCode, fieldOperator: 'isEmpty' },
                { field: fieldNames.countryCode, fieldOperator: 'equals', value: countryValues.usa },
                { field: fieldNames.countryCode, fieldOperator: 'equals', value: countryValues.canada },
                {
                  operator: 'and',
                  conditions: [
                    { field: fieldNames.countryCode, fieldOperator: 'isNotEmpty' },
                    { field: fieldNames.countryCode, fieldOperator: 'notEquals', value: countryValues.usa },
                    { field: fieldNames.countryCode, fieldOperator: 'notEquals', value: countryValues.canada }
                  ]
                }
              ]
            }
          ],
          visibility: { value: true, clearOnHide: true }
        },
        // Required rule
        {
          conditions: [addressRequiredCondition],
          validation: {
            rules: [{ type: 'required' }]
          }
        }
      ],

      // State Code - visible only for USA or empty country
      [fieldNames.stateCode]: [
        // Visibility rule
        {
          conditions: [
            {
              operator: 'or',
              conditions: [
                { field: fieldNames.countryCode, fieldOperator: 'isEmpty' },
                { field: fieldNames.countryCode, fieldOperator: 'equals', value: countryValues.usa }
              ]
            }
          ],
          visibility: { value: true, clearOnHide: true }
        },
        // Required rule
        {
          conditions: [
            {
              operator: 'and',
              conditions: [
                addressRequiredCondition,
                {
                  operator: 'or',
                  conditions: [
                    { field: fieldNames.countryCode, fieldOperator: 'isEmpty' },
                    { field: fieldNames.countryCode, fieldOperator: 'equals', value: countryValues.usa }
                  ]
                }
              ]
            }
          ],
          validation: {
            rules: [{ type: 'required' }]
          }
        }
      ],

      // ZIP Code - visible only for USA or empty country
      [fieldNames.zip]: [
        // Visibility rule
        {
          conditions: [
            {
              operator: 'or',
              conditions: [
                { field: fieldNames.countryCode, fieldOperator: 'isEmpty' },
                { field: fieldNames.countryCode, fieldOperator: 'equals', value: countryValues.usa }
              ]
            }
          ],
          visibility: { value: true, clearOnHide: true }
        },
        // Required rule
        {
          conditions: [
            {
              operator: 'and',
              conditions: [
                addressRequiredCondition,
                {
                  operator: 'or',
                  conditions: [
                    { field: fieldNames.countryCode, fieldOperator: 'isEmpty' },
                    { field: fieldNames.countryCode, fieldOperator: 'equals', value: countryValues.usa }
                  ]
                }
              ]
            }
          ],
          validation: {
            rules: [{ type: 'required' }]
          }
        }
      ],

      // Province Code - visible only for Canada
      [fieldNames.provinceCode]: [
        // Visibility rule
        {
          conditions: [
            { field: fieldNames.countryCode, fieldOperator: 'equals', value: countryValues.canada }
          ],
          visibility: { value: true, clearOnHide: true }
        },
        // Required rule
        {
          conditions: [
            {
              operator: 'and',
              conditions: [
                addressRequiredCondition,
                { field: fieldNames.countryCode, fieldOperator: 'equals', value: countryValues.canada }
              ]
            }
          ],
          validation: {
            rules: [{ type: 'required' }]
          }
        }
      ],

      // Postal Code - visible for Canada or other countries
      [fieldNames.postalCode]: [
        // Visibility rule
        {
          conditions: [
            {
              operator: 'or',
              conditions: [
                { field: fieldNames.countryCode, fieldOperator: 'equals', value: countryValues.canada },
                {
                  operator: 'and',
                  conditions: [
                    { field: fieldNames.countryCode, fieldOperator: 'isNotEmpty' },
                    { field: fieldNames.countryCode, fieldOperator: 'notEquals', value: countryValues.usa },
                    { field: fieldNames.countryCode, fieldOperator: 'notEquals', value: countryValues.canada }
                  ]
                }
              ]
            }
          ],
          visibility: { value: true, clearOnHide: true }
        },
        // Required rule
        {
          conditions: [
            {
              operator: 'and',
              conditions: [
                addressRequiredCondition,
                {
                  operator: 'or',
                  conditions: [
                    { field: fieldNames.countryCode, fieldOperator: 'equals', value: countryValues.canada },
                    {
                      operator: 'and',
                      conditions: [
                        { field: fieldNames.countryCode, fieldOperator: 'isNotEmpty' },
                        { field: fieldNames.countryCode, fieldOperator: 'notEquals', value: countryValues.usa },
                        { field: fieldNames.countryCode, fieldOperator: 'notEquals', value: countryValues.canada }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          validation: {
            rules: [{ type: 'required' }]
          }
        }
      ]
    };

    return addressRules;
  }
}

// Usage example with the corrected approach
@Component({
  selector: 'app-employee-corrected',
  template: `
    <form [formGroup]="employeeForm">
      <div class="form-group">
        <label for="employeeStatus">Employee Status:</label>
        <select id="employeeStatus" formControlName="employeeStatus" (change)="onEmployeeStatusChange($event)">
          <option value="">Select Status</option>
          <option value="employed">Employed</option>
          <option value="unemployed">Unemployed</option>
        </select>
      </div>

      <div formGroupName="address">
        <h3>Address Information</h3>
        <!-- Address form fields here -->
        <div class="form-group">
          <label for="countryCode">Country:</label>
          <select id="countryCode" formControlName="countryCode">
            <option value="">Select Country</option>
            <option value="USA">United States</option>
            <option value="CANADA">Canada</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="addressLine1">Address Line 1:</label>
          <input id="addressLine1" formControlName="addressLine1" />
        </div>
        
        <div class="form-group">
          <label for="city">City:</label>
          <input id="city" formControlName="city" />
        </div>
        
        <!-- Other address fields... -->
      </div>
    </form>
  `
})
export class EmployeeCorrectedComponent implements OnInit {
  private addressValidationService = inject(AddressValidationService);
  private fb = inject(FormBuilder);

  employeeForm: FormGroup;

  ngOnInit() {
    this.employeeForm = this.fb.group({
      employeeStatus: [''],
      address: this.fb.group({
        addressLine1: [''],
        addressLine2: [''],
        city: [''],
        stateCode: [''],
        zip: [''],
        provinceCode: [''],
        postalCode: [''],
        countryCode: ['']
      })
    });

    // Register address validation with initial config
    this.addressValidationService.registerAddressValidation(
      'address',
      this.employeeForm.get('address') as FormGroup,
      { isRequired: false }
    );
  }

  onEmployeeStatusChange(event: Event) {
    const target = event.target as HTMLSelectElement;
    const isEmployed = target.value === 'employed';
    
    // Update address validation requirement
    this.addressValidationService.updateAddressRequirement('address', isEmployed);
  }
}
