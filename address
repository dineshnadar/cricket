import { Injectable, inject } from '@angular/core';
import { FormGroup, FormBuilder } from '@angular/forms';
import { Component, OnInit } from '@angular/core';
import { ValidationService, FieldRule, ValidationController } from './enhanced-validation.service';

export interface AddressValidationConfig {
  // Simple boolean flag for whether address is required
  isRequired?: boolean;
  
  // Country code values (customizable)
  countryValues?: {
    usa?: string;
    canada?: string;
  };
  
  // Custom field names if different from default
  fieldNames?: {
    addressLine1?: string;
    addressLine2?: string;
    city?: string;
    stateCode?: string;
    zip?: string;
    provinceCode?: string;
    postalCode?: string;
    countryCode?: string;
  };
}

@Injectable({
  providedIn: 'root'
})
export class AddressValidationService {
  private validationService = inject(ValidationService);
  
  private defaultFieldNames = {
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    city: 'city',
    stateCode: 'stateCode',
    zip: 'zip',
    provinceCode: 'provinceCode',
    postalCode: 'postalCode',
    countryCode: 'countryCode'
  };
  
  private defaultCountryValues = {
    usa: 'USA',
    canada: 'CANADA'
  };

  /**
   * Register address validation rules for a FormGroup
   */
  registerAddressValidation(
    formId: string,
    addressForm: FormGroup,
    config: AddressValidationConfig = {}
  ): ValidationController {
    // Merge configuration with defaults
    const fieldNames = { ...this.defaultFieldNames, ...config.fieldNames };
    const countryValues = { ...this.defaultCountryValues, ...config.countryValues };
    
    // Create validation rules
    const addressRules = this.createAddressValidationRules(fieldNames, countryValues, config);
    
    // Register with validation service
    const controller = this.validationService.registerRules(formId, addressForm, addressRules);
    
    return controller;
  }

  /**
   * Create address validation rules based on configuration
   */
  private createAddressValidationRules(
    fieldNames: any,
    countryValues: any,
    config: AddressValidationConfig
  ): Record<string, FieldRule> {
    
    const addressRules: Record<string, FieldRule> = {};

    // Country Code - always visible
    if (config.isRequired) {
      // If address is always required, country code is always required
      addressRules[fieldNames.countryCode] = {
        visibility: { 
          value: true
        },
        validation: {
          rules: [{ type: 'required' }]
        },
        runWhen: { onLoad: true, onChange: true }
      };
    } else {
      // Country code is required only if either address line is not empty
      addressRules[fieldNames.countryCode] = {
        visibility: { 
          value: true
        },
        validation: {
          conditions: [
            {
              field: fieldNames.addressLine1,
              operator: 'isNotEmpty'
            }
          ],
          rules: [{ type: 'required' }]
        },
        runWhen: { onLoad: true, onChange: true, onDependencyChange: true }
      };
    }

    // Address Line 1 - always visible
    if (config.isRequired) {
      addressRules[fieldNames.addressLine1] = {
        visibility: { 
          value: true
        },
        validation: {
          rules: [{ type: 'required' }]
        },
        runWhen: { onLoad: true, onChange: true }
      };
    } else {
      addressRules[fieldNames.addressLine1] = {
        visibility: { 
          value: true
        },
        runWhen: { onLoad: true }
      };
    }

    // Address Line 2 - always visible, never required
    addressRules[fieldNames.addressLine2] = {
      visibility: { 
        value: true
      },
      runWhen: { onLoad: true }
    };

    // City - visible for all countries, required based on configuration
    if (config.isRequired) {
      addressRules[fieldNames.city] = {
        visibility: { 
          value: true
        },
        validation: {
          rules: [{ type: 'required' }]
        },
        runWhen: { onLoad: true, onChange: true }
      };
    } else {
      addressRules[fieldNames.city] = {
        visibility: { 
          value: true
        },
        validation: {
          conditions: [
            {
              field: fieldNames.addressLine1,
              operator: 'isNotEmpty'
            }
          ],
          rules: [{ type: 'required' }]
        },
        runWhen: { onLoad: true, onChange: true, onDependencyChange: true }
      };
    }

    // State Code - visible only for USA or empty country
    addressRules[fieldNames.stateCode] = {
      // Show when country is empty (default US behavior)
      conditions: [
        {
          field: fieldNames.countryCode,
          operator: 'isEmpty'
        }
      ],
      visibility: { 
        value: true, 
        clearOnHide: true
      },
      runWhen: { onLoad: true, onChange: true, onDependencyChange: true }
    };

    // For validation, we need to handle required logic
    if (config.isRequired) {
      // Always required when visible
      addressRules[fieldNames.stateCode].validation = {
        conditions: [
          {
            field: fieldNames.countryCode,
            operator: 'isEmpty'
          }
        ],
        rules: [{ type: 'required' }]
      };
    } else {
      // Required only if address line 1 is not empty AND (country is empty OR USA)
      addressRules[fieldNames.stateCode].validation = {
        conditions: [
          {
            field: fieldNames.addressLine1,
            operator: 'isNotEmpty'
          },
          {
            field: fieldNames.countryCode,
            operator: 'isEmpty'
          }
        ],
        rules: [{ type: 'required' }]
      };
    }

    // ZIP Code - visible only for USA or empty country
    addressRules[fieldNames.zip] = {
      conditions: [
        {
          field: fieldNames.countryCode,
          operator: 'isEmpty'
        }
      ],
      visibility: { 
        value: true, 
        clearOnHide: true
      },
      runWhen: { onLoad: true, onChange: true, onDependencyChange: true }
    };

    if (config.isRequired) {
      addressRules[fieldNames.zip].validation = {
        conditions: [
          {
            field: fieldNames.countryCode,
            operator: 'isEmpty'
          }
        ],
        rules: [{ type: 'required' }]
      };
    } else {
      addressRules[fieldNames.zip].validation = {
        conditions: [
          {
            field: fieldNames.addressLine1,
            operator: 'isNotEmpty'
          },
          {
            field: fieldNames.countryCode,
            operator: 'isEmpty'
          }
        ],
        rules: [{ type: 'required' }]
      };
    }

    // Province Code - visible only for Canada
    addressRules[fieldNames.provinceCode] = {
      conditions: [
        {
          field: fieldNames.countryCode,
          operator: 'equals',
          value: countryValues.canada
        }
      ],
      visibility: { 
        value: true, 
        clearOnHide: true
      },
      runWhen: { onLoad: true, onChange: true, onDependencyChange: true }
    };

    if (config.isRequired) {
      addressRules[fieldNames.provinceCode].validation = {
        conditions: [
          {
            field: fieldNames.countryCode,
            operator: 'equals',
            value: countryValues.canada
          }
        ],
        rules: [{ type: 'required' }]
      };
    } else {
      addressRules[fieldNames.provinceCode].validation = {
        conditions: [
          {
            field: fieldNames.addressLine1,
            operator: 'isNotEmpty'
          },
          {
            field: fieldNames.countryCode,
            operator: 'equals',
            value: countryValues.canada
          }
        ],
        rules: [{ type: 'required' }]
      };
    }

    // Postal Code - visible for Canada or other countries (not USA)
    addressRules[fieldNames.postalCode] = {
      conditions: [
        {
          field: fieldNames.countryCode,
          operator: 'equals',
          value: countryValues.canada
        }
      ],
      visibility: { 
        value: true, 
        clearOnHide: true
      },
      runWhen: { onLoad: true, onChange: true, onDependencyChange: true }
    };

    if (config.isRequired) {
      addressRules[fieldNames.postalCode].validation = {
        conditions: [
          {
            field: fieldNames.countryCode,
            operator: 'equals',
            value: countryValues.canada
          }
        ],
        rules: [{ type: 'required' }]
      };
    } else {
      addressRules[fieldNames.postalCode].validation = {
        conditions: [
          {
            field: fieldNames.addressLine1,
            operator: 'isNotEmpty'
          },
          {
            field: fieldNames.countryCode,
            operator: 'equals',
            value: countryValues.canada
          }
        ],
        rules: [{ type: 'required' }]
      };
    }

    return addressRules;
  }

  /**
   * Register additional rules for USA-specific state code visibility and validation
   */
  registerUSAStateCodeRules(
    formId: string,
    fieldNames: any,
    countryValues: any,
    config: AddressValidationConfig
  ) {
    const usaStateCodeRules: Record<string, FieldRule> = {};
    
    // State Code for USA
    usaStateCodeRules[fieldNames.stateCode] = {
      conditions: [
        {
          field: fieldNames.countryCode,
          operator: 'equals',
          value: countryValues.usa
        }
      ],
      visibility: { 
        value: true, 
        clearOnHide: true
      },
      runWhen: { onLoad: true, onChange: true, onDependencyChange: true }
    };

    if (config.isRequired) {
      usaStateCodeRules[fieldNames.stateCode].validation = {
        conditions: [
          {
            field: fieldNames.countryCode,
            operator: 'equals',
            value: countryValues.usa
          }
        ],
        rules: [{ type: 'required' }]
      };
    } else {
      usaStateCodeRules[fieldNames.stateCode].validation = {
        conditions: [
          {
            field: fieldNames.addressLine1,
            operator: 'isNotEmpty'
          },
          {
            field: fieldNames.countryCode,
            operator: 'equals',
            value: countryValues.usa
          }
        ],
        rules: [{ type: 'required' }]
      };
    }

    // ZIP Code for USA
    usaStateCodeRules[fieldNames.zip] = {
      conditions: [
        {
          field: fieldNames.countryCode,
          operator: 'equals',
          value: countryValues.usa
        }
      ],
      visibility: { 
        value: true, 
        clearOnHide: true
      },
      runWhen: { onLoad: true, onChange: true, onDependencyChange: true }
    };

    if (config.isRequired) {
      usaStateCodeRules[fieldNames.zip].validation = {
        conditions: [
          {
            field: fieldNames.countryCode,
            operator: 'equals',
            value: countryValues.usa
          }
        ],
        rules: [{ type: 'required' }]
      };
    } else {
      usaStateCodeRules[fieldNames.zip].validation = {
        conditions: [
          {
            field: fieldNames.addressLine1,
            operator: 'isNotEmpty'
          },
          {
            field: fieldNames.countryCode,
            operator: 'equals',
            value: countryValues.usa
          }
        ],
        rules: [{ type: 'required' }]
      };
    }

    return this.validationService.registerRules(formId + '_usa', null, usaStateCodeRules);
  }

  /**
   * Register additional rules for other countries postal code visibility
   */
  registerOtherCountryPostalCodeRules(
    formId: string,
    fieldNames: any,
    countryValues: any,
    config: AddressValidationConfig
  ) {
    const otherCountryRules: Record<string, FieldRule> = {};
    
    // Postal Code for other countries (not USA, not Canada)
    otherCountryRules[fieldNames.postalCode] = {
      conditions: [
        {
          field: fieldNames.countryCode,
          operator: 'isNotEmpty'
        },
        {
          field: fieldNames.countryCode,
          operator: 'notEquals',
          value: countryValues.usa
        },
        {
          field: fieldNames.countryCode,
          operator: 'notEquals',
          value: countryValues.canada
        }
      ],
      visibility: { 
        value: true, 
        clearOnHide: true
      },
      runWhen: { onLoad: true, onChange: true, onDependencyChange: true }
    };

    if (config.isRequired) {
      otherCountryRules[fieldNames.postalCode].validation = {
        conditions: [
          {
            field: fieldNames.countryCode,
            operator: 'isNotEmpty'
          },
          {
            field: fieldNames.countryCode,
            operator: 'notEquals',
            value: countryValues.usa
          },
          {
            field: fieldNames.countryCode,
            operator: 'notEquals',
            value: countryValues.canada
          }
        ],
        rules: [{ type: 'required' }]
      };
    } else {
      otherCountryRules[fieldNames.postalCode].validation = {
        conditions: [
          {
            field: fieldNames.addressLine1,
            operator: 'isNotEmpty'
          },
          {
            field: fieldNames.countryCode,
            operator: 'isNotEmpty'
          },
          {
            field: fieldNames.countryCode,
            operator: 'notEquals',
            value: countryValues.usa
          },
          {
            field: fieldNames.countryCode,
            operator: 'notEquals',
            value: countryValues.canada
          }
        ],
        rules: [{ type: 'required' }]
      };
    }

    return this.validationService.registerRules(formId + '_other', null, otherCountryRules);
  }
}

// Usage example with corrected implementation
@Component({
  selector: 'app-employee-corrected',
  template: `
    <form [formGroup]="employeeForm">
      <div class="form-group">
        <label for="employeeStatus">Employee Status:</label>
        <select id="employeeStatus" formControlName="employeeStatus" (change)="onEmployeeStatusChange($event)">
          <option value="">Select Status</option>
          <option value="employed">Employed</option>
          <option value="unemployed">Unemployed</option>
        </select>
      </div>

      <div formGroupName="address">
        <h3>Address Information</h3>
        
        <div class="form-group">
          <label for="countryCode">Country:</label>
          <select id="countryCode" formControlName="countryCode">
            <option value="">Select Country</option>
            <option value="USA">United States</option>
            <option value="CANADA">Canada</option>
            <option value="OTHER">Other</option>
          </select>
          <div *ngIf="employeeForm.get('address.countryCode')?.errors?.required && employeeForm.get('address.countryCode')?.touched" class="error">
            Country is required
          </div>
        </div>
        
        <div class="form-group">
          <label for="addressLine1">Address Line 1:</label>
          <input id="addressLine1" formControlName="addressLine1" />
          <div *ngIf="employeeForm.get('address.addressLine1')?.errors?.required && employeeForm.get('address.addressLine1')?.touched" class="error">
            Address Line 1 is required
          </div>
        </div>
        
        <div class="form-group">
          <label for="addressLine2">Address Line 2:</label>
          <input id="addressLine2" formControlName="addressLine2" />
        </div>
        
        <div class="form-group">
          <label for="city">City:</label>
          <input id="city" formControlName="city" />
          <div *ngIf="employeeForm.get('address.city')?.errors?.required && employeeForm.get('address.city')?.touched" class="error">
            City is required
          </div>
        </div>
        
        <div class="form-group">
          <label for="stateCode">State:</label>
          <select id="stateCode" formControlName="stateCode">
            <option value="">Select State</option>
            <option value="CA">California</option>
            <option value="NY">New York</option>
            <option value="TX">Texas</option>
          </select>
          <div *ngIf="employeeForm.get('address.stateCode')?.errors?.required && employeeForm.get('address.stateCode')?.touched" class="error">
            State is required
          </div>
        </div>
        
        <div class="form-group">
          <label for="zip">ZIP Code:</label>
          <input id="zip" formControlName="zip" />
          <div *ngIf="employeeForm.get('address.zip')?.errors?.required && employeeForm.get('address.zip')?.touched" class="error">
            ZIP Code is required
          </div>
        </div>
        
        <div class="form-group">
          <label for="provinceCode">Province:</label>
          <select id="provinceCode" formControlName="provinceCode">
            <option value="">Select Province</option>
            <option value="ON">Ontario</option>
            <option value="BC">British Columbia</option>
            <option value="AB">Alberta</option>
          </select>
          <div *ngIf="employeeForm.get('address.provinceCode')?.errors?.required && employeeForm.get('address.provinceCode')?.touched" class="error">
            Province is required
          </div>
        </div>
        
        <div class="form-group">
          <label for="postalCode">Postal Code:</label>
          <input id="postalCode" formControlName="postalCode" />
          <div *ngIf="employeeForm.get('address.postalCode')?.errors?.required && employeeForm.get('address.postalCode')?.touched" class="error">
            Postal Code is required
          </div>
        </div>
      </div>
    </form>
  `,
  styles: [`
    .form-group {
      margin-bottom: 1rem;
    }
    .error {
      color: red;
      font-size: 0.8rem;
      margin-top: 0.25rem;
    }
  `]
})
export class EmployeeCorrectedComponent implements OnInit {
  private addressValidationService = inject(AddressValidationService);
  private fb = inject(FormBuilder);

  employeeForm: FormGroup;
  addressController: ValidationController;

  ngOnInit() {
    this.employeeForm = this.fb.group({
      employeeStatus: [''],
      address: this.fb.group({
        addressLine1: [''],
        addressLine2: [''],
        city: [''],
        stateCode: [''],
        zip: [''],
        provinceCode: [''],
        postalCode: [''],
        countryCode: ['']
      })
    });

    // Register address validation with initial config (not required)
    this.setupAddressValidation(false);
  }

  onEmployeeStatusChange(event: Event) {
    const target = event.target as HTMLSelectElement;
    const isEmployed = target.value === 'employed';
    
    // Re-setup address validation with new configuration
    this.setupAddressValidation(isEmployed);
  }

  private setupAddressValidation(isRequired: boolean) {
    const addressForm = this.employeeForm.get('address') as FormGroup;
    
    // Register base address validation
    this.addressController = this.addressValidationService.registerAddressValidation(
      'address',
      addressForm,
      { isRequired }
    );

    // Register additional rules for USA-specific logic
    this.addressValidationService.registerUSAStateCodeRules(
      'address',
      this.addressValidationService['defaultFieldNames'],
      this.addressValidationService['defaultCountryValues'],
      { isRequired }
    );

    // Register additional rules for other countries
    this.addressValidationService.registerOtherCountryPostalCodeRules(
      'address',
      this.addressValidationService['defaultFieldNames'],
      this.addressValidationService['defaultCountryValues'],
      { isRequired }
    );

    // Run initial validations
    this.addressController.runLoadValidations();
  }
}
