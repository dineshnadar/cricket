function deepGroupFields(fields, sortByLabel = false) {
  const grouped = { fieldsLeft: [], fieldsRight: [], fieldsFull: [] };
  let leftCount = 0, rightCount = 0;

  const fieldCount = fields.length;
  for (let i = 0; i < fieldCount; i++) {
    const field = fields[i];
    
    field.seq = field.seq ?? i;
    
    if (field.fields && field.fields.length) {
      const nestedGrouped = deepGroupFields(field.fields, sortByLabel);
      field.fieldType = 'nested';
      field.fieldsLeft = nestedGrouped.fieldsLeft;
      field.fieldsRight = nestedGrouped.fieldsRight;
      field.fieldsFull = nestedGrouped.fieldsFull;
      delete field.fields;
    }

    const side = field.side && ['left', 'right', 'full'].includes(field.side) 
      ? field.side 
      : (leftCount <= rightCount ? (leftCount++, 'left') : (rightCount++, 'right'));
    
    grouped[`fields${side.charAt(0).toUpperCase() + side.slice(1)}`].push(field);
  }

  const sortFunction = sortByLabel
    ? (a, b) => a.label.localeCompare(b.label)
    : (a, b) => a.seq - b.seq;

  for (const key in grouped) {
    grouped[key].sort(sortFunction);
    const groupLength = grouped[key].length;
    for (let i = 0; i < groupLength; i++) {
      grouped[key][i].seq = i + 1;
    }
  }

  return grouped;
}

function optimizedGroupFieldsBySide(sections, sortByLabel = false) {
  const sectionCount = sections.length;
  const result = new Array(sectionCount);
  for (let i = 0; i < sectionCount; i++) {
    const section = sections[i];
    const grouped = deepGroupFields(section.fields, sortByLabel);
    delete section.fields;
    result[i] = { ...section, ...grouped };
  }
  return result;
}

// Usage in Angular service
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class FieldGroupingService {
  groupFields(sections, sortByLabel = false) {
    return optimizedGroupFieldsBySide(sections, sortByLabel);
  }
}
