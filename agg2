import { AbstractControl, FormArray, FormGroup } from '@angular/forms';
import { ExtendedAbstractControl, FieldItem, LayoutField } from './form-extension.types';

export class FormExtensionHelpers {
  // ... other methods ...

  private createArrayFieldItem(baseItem: FieldItem, parentControl: FormGroup | FormArray, layout: LayoutField): FieldItem {
    const control = parentControl instanceof FormGroup 
      ? parentControl.get(baseItem.fldName!) as FormArray 
      : parentControl as FormArray;

    if (!(control instanceof FormArray)) {
      console.error(`Expected FormArray for ${baseItem.fldName}, but got:`, control);
      return baseItem;
    }

    const arrayItem: FieldItem = {
      ...baseItem,
      type: 'arrayGroup',
      isArray: true,
      value: control.value,
      fields: control.controls.map((ctrl, index) => {
        if (ctrl instanceof FormGroup) {
          // Handle nested FormGroup within the array
          return {
            fldName: `${baseItem.fldName}.${index}`,
            type: 'formGroup',
            fields: Object.keys(ctrl.controls).map(key => {
              // Find the corresponding layout field for this key
              const fieldLayout = layout.fields?.find(f => f.fldName === key);
              return this.createFieldItem({
                fldName: key,
                type: 'field',
                side: fieldLayout?.side || 'full',
                seq: fieldLayout?.seq || index,
                ...fieldLayout // Spread other layout properties
              } as LayoutField, ctrl);
            }).filter(Boolean) as FieldItem[]
          };
        } else {
          // Handle simple FormControl within the array
          return this.createFieldItem({
            fldName: `${baseItem.fldName}.${index}`,
            type: 'field',
            side: 'full',
            seq: index,
            ...layout // Spread layout properties for simple array items
          } as LayoutField, control, index);
        }
      }).filter(Boolean) as FieldItem[]
    };

    return arrayItem;
  }

  // ... other methods ...
}
