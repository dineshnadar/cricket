import { Component, ViewChild, ViewContainerRef, inject, effect, signal, computed } from '@angular/core';
import { NgFor, NgIf } from '@angular/common';
import { ProfileBuilderService } from './profile-builder.service';
import { LeftMenuComponent } from './left-menu.component';

@Component({
  selector: 'app-party-builder',
  standalone: true,
  imports: [NgFor, NgIf, LeftMenuComponent],
  template: `
    <div class="profile-selector">
      <button *ngFor="let profile of profiles; let i = index"
              (click)="setActiveProfile(i)"
              [class.active]="i === activeProfileIndex()">
        Profile {{ i + 1 }}
      </button>
      <button (click)="addNewProfile()">Add New Profile</button>
    </div>
    <div class="party-builder" *ngIf="activeProfile()">
      <app-left-menu></app-left-menu>
      <div #widgetContainer></div>
      <div class="navigation-buttons">
        <button (click)="loadPreviousWidget()" [disabled]="!canNavigatePrevious()">Previous</button>
        <button (click)="loadNextWidget()" [disabled]="!canNavigateNext()">Next</button>
      </div>
    </div>
    <button (click)="validateAll()">Validate All</button>
    <button (click)="loadAllWidgets()">Load All Widgets</button>
    <button (click)="loadNextIncompleteWidget()">Next Incomplete Widget</button>
  `
})
export class PartyBuilderComponent {
  @ViewChild('widgetContainer', { read: ViewContainerRef, static: false })
  widgetContainer!: ViewContainerRef;

  private profileBuilder = inject(ProfileBuilderService);

  profiles = this.profileBuilder.getProfiles;
  activeProfile = this.profileBuilder.getActiveProfile;
  activeProfileIndex = this.profileBuilder.activeProfileIndex;
  visibleWidgets = this.profileBuilder.getVisibleWidgets;

  private currentWidgetIndex = signal(-1);

  canNavigatePrevious = computed(() => this.currentWidgetIndex() > 0);
  canNavigateNext = computed(() => {
    const visibleWidgets = this.visibleWidgets();
    return this.currentWidgetIndex() < visibleWidgets.length - 1;
  });

  constructor() {
    effect(() => {
      const activeWidgetName = this.profileBuilder.getActiveWidgetName();
      if (activeWidgetName) {
        this.loadComponent(activeWidgetName);
        this.updateCurrentWidgetIndex(activeWidgetName);
      }
    });
  }

  private updateCurrentWidgetIndex(widgetName: string) {
    const visibleWidgets = this.visibleWidgets();
    this.currentWidgetIndex.set(visibleWidgets.findIndex(w => w.name === widgetName));
  }

  async loadComponent(widgetName: string) {
    this.widgetContainer.clear();
    const widgetConfig = this.profileBuilder.findWidgetByName(widgetName);
    if (widgetConfig && widgetConfig.component) {
      const component = await widgetConfig.component();
      const componentRef = this.widgetContainer.createComponent(component);
      if (componentRef.instance.setFormGroup) {
        const formGroup = this.profileBuilder.getWidgetFormGroup(widgetName);
        if (formGroup) {
          componentRef.instance.setFormGroup(formGroup);
        }
      }
    }
  }

  setActiveProfile(index: number) {
    this.profileBuilder.setActiveProfile(index);
  }

  addNewProfile() {
    this.profileBuilder.addNewProfile();
  }

  validateAll() {
    const isValid = this.profileBuilder.validateAllWidgets();
    console.log(isValid ? 'All widgets are valid' : 'There are validation errors');
    console.log('Completion percentage:', this.profileBuilder.getCompletionPercentage());
  }

  loadAllWidgets() {
    this.profileBuilder.loadAllWidgets();
  }

  loadNextIncompleteWidget() {
    const nextWidgetName = this.profileBuilder.getNextIncompleteWidget();
    if (nextWidgetName) {
      this.profileBuilder.setActiveWidget(nextWidgetName);
    } else {
      console.log('All widgets are complete!');
    }
  }

  loadPreviousWidget() {
    if (this.canNavigatePrevious()) {
      const previousWidget = this.visibleWidgets()[this.currentWidgetIndex() - 1];
      this.profileBuilder.setActiveWidget(previousWidget.name);
    }
  }

  loadNextWidget() {
    if (this.canNavigateNext()) {
      const nextWidget = this.visibleWidgets()[this.currentWidgetIndex() + 1];
      this.profileBuilder.setActiveWidget(nextWidget.name);
    }
  }
}
