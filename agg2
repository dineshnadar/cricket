interface IndItem {
  code?: string;
  y?: string;
}

interface DataItem {
  ind?: IndItem[];
  [key: string]: any;
}

function filterAndMapDinoData(data: DataItem[]): any[] {
  return (data ?? [])
    .filter(item => 
      item?.ind?.some(indItem => 
        indItem?.code === 'IsDino' && indItem?.y === 'Y'
      ) ?? false
    )
    .map(item => {
      // Perform any mapping operations here
      // For example, you might want to create a new object with specific properties
      return {
        // Add the properties you want to include in the mapped result
        ...item,
        isDino: true
      };
    });
}

// Usage
const originalData: DataItem[] = [
  { ind: [{ code: 'IsDino', y: 'Y' }, { code: 'Other', y: 'N' }], name: 'Dino1' },
  { ind: [{ code: 'IsDino', y: 'N' }, { code: 'Other', y: 'Y' }], name: 'NotDino' },
  { ind: [{ code: 'IsDino', y: 'Y' }, { code: 'Other', y: 'Y' }], name: 'Dino2' },
  { name: 'NoIndData' },
  {},
  { ind: [] },
  { ind: [{ code: 'IsDino' }] },
  { ind: [{ y: 'Y' }] },
];

const filteredAndMappedData = filterAndMapDinoData(originalData);
console.log(filteredAndMappedData);
