 createArrayFieldItem(baseItem: FieldItem, parentControl: FormGroup | FormArray, layout?: TableLayout): FieldItem {
    const control = parentControl instanceof FormGroup 
      ? parentControl.get(baseItem.fldName!) as FormArray 
      : parentControl as FormArray;

    if (!(control instanceof FormArray)) {
      console.error(`Expected FormArray for ${baseItem.fldName}, but got:`, control);
      return baseItem;
    }

    const arrayItem: FieldItem = {
      ...baseItem,
      type: baseItem.type as 'arraySimple' | 'arrayGroup',
      value: control.value,
      isArray: true,
      fields: control.controls.map((ctrl, index) => {
        if (ctrl instanceof FormGroup) {
          // Handle array of form groups
          return {
            fldName: `${baseItem.fldName}.${index}`,
            type: 'formGroup',
            fields: this.createFieldsFromLayout(ctrl, layout)
          };
        } else {
          // Handle array of simple controls
          return this.createFieldItem({
            fldName: `${baseItem.fldName}.${index}`,
            type: 'field',
            side: 'full',
            seq: index
          } as LayoutField, control, index);
        }
      }).filter(Boolean) as FieldItem[],
      isValid: control.valid,
      errors: control.errors,
      touched: control.touched,
      dirty: control.dirty
    };

    return arrayItem;
  }

  private createFieldsFromLayout(formGroup: FormGroup, layout?: TableLayout): FieldItem[] {
    if (!layout || !layout.columns) {
      // If no layout is provided, fall back to default behavior
      return Object.keys(formGroup.controls).map(key => 
        this.createFieldItem({
          fldName: key,
          type: 'field',
          side: 'full',
          seq: 0
        } as LayoutField, formGroup)
      ).filter(Boolean) as FieldItem[];
    }

    return layout.columns.map((column, index) => {
      const layoutField: LayoutField = {
        fldName: column.field,
        type: 'field',
        side: column.side || 'full',
        seq: column.seq !== undefined ? column.seq : index,
        label: column.header
      };

      return this.createFieldItem(layoutField, formGroup);
    }).filter(Boolean) as FieldItem[];
  }
