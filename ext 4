// selective-rule-execution.service.ts
import { Injectable } from '@angular/core';
import { AbstractControl, FormGroup, ValidatorFn, Validators } from '@angular/forms';
import { UnifiedValidationService, ValidationController, FieldRule, RuleTiming } from './unified-validation.service';
import { FormExtensionService } from './form-extension.service';

/**
 * Extended validation controller with selective rule execution methods
 */
export interface ExtendedValidationController extends ValidationController {
  /**
   * Runs only visibility rules for specified form/field or all forms/fields
   * @param formId Optional form ID to target a specific form
   * @param fieldPath Optional field path to target a specific field
   */
  runVisibilityOnly(formId?: string, fieldPath?: string): void;
  
  /**
   * Runs only validation rules for specified form/field or all forms/fields
   * @param formId Optional form ID to target a specific form
   * @param fieldPath Optional field path to target a specific field
   */
  runValidationOnly(formId?: string, fieldPath?: string): void;
  
  /**
   * Runs only lookup rules for specified form/field or all forms/fields
   * @param formId Optional form ID to target a specific form
   * @param fieldPath Optional field path to target a specific field
   */
  runLookupOnly(formId?: string, fieldPath?: string): void;
  
  /**
   * Runs only disable rules for specified form/field or all forms/fields
   * @param formId Optional form ID to target a specific form
   * @param fieldPath Optional field path to target a specific field
   */
  runDisableOnly(formId?: string, fieldPath?: string): void;
  
  /**
   * Runs visibility and lookup rules but skips validation for specified form/field or all forms/fields
   * @param formId Optional form ID to target a specific form
   * @param fieldPath Optional field path to target a specific field
   */
  runVisibilityAndLookup(formId?: string, fieldPath?: string): void;
  
  /**
   * Runs visibility and validation rules but skips lookup for specified form/field or all forms/fields
   * @param formId Optional form ID to target a specific form
   * @param fieldPath Optional field path to target a specific field
   */
  runVisibilityAndValidation(formId?: string, fieldPath?: string): void;
  
  /**
   * Runs visibility and disable rules for specified form/field or all forms/fields
   * @param formId Optional form ID to target a specific form
   * @param fieldPath Optional field path to target a specific field
   */
  runVisibilityAndDisable(formId?: string, fieldPath?: string): void;
  
  /**
   * Applies Angular validators directly without running framework validation rules
   * @param formId Form ID to target
   * @param fieldPath Field path to target
   * @param validators Array of Angular validators to apply
   */
  applyAngularValidators(formId: string, fieldPath: string, validators: ValidatorFn[]): void;
  
  /**
   * Updates a field's visibility directly without running other rules
   * @param formId Form ID to target
   * @param fieldPath Field path to target
   * @param isVisible Whether the field should be visible
   * @param clearOnHide Whether to clear the value when hidden
   */
  updateVisibility(formId: string, fieldPath: string, isVisible: boolean, clearOnHide?: boolean): void;
  
  /**
   * Updates a field's disabled state directly without running other rules
   * @param formId Form ID to target
   * @param fieldPath Field path to target
   * @param isDisabled Whether the field should be disabled
   * @param clearOnDisable Whether to clear the value when disabled
   */
  updateDisabledState(formId: string, fieldPath: string, isDisabled: boolean, clearOnDisable?: boolean): void;
}

/**
 * Utility service to provide selective rule execution methods for the Unified Validation Framework
 */
@Injectable({ providedIn: 'root' })
export class ValidationExecutionService {
  
  constructor(
    private validationService: UnifiedValidationService,
    private formExtension: FormExtensionService
  ) {}
  
  /**
   * Extends the validation controller with selective rule execution methods
   * @param validationController The controller to extend
   * @returns Extended validation controller with new methods
   */
  extendController(validationController: ValidationController): ExtendedValidationController {
    return {
      ...validationController,
      
      // Run only visibility rules
      runVisibilityOnly: (formId?: string, fieldPath?: string) => 
        this.runRuleType(formId, fieldPath, ['visibility']),
      
      // Run only validation rules
      runValidationOnly: (formId?: string, fieldPath?: string) => 
        this.runRuleType(formId, fieldPath, ['validation']),
      
      // Run only lookup rules
      runLookupOnly: (formId?: string, fieldPath?: string) => 
        this.runRuleType(formId, fieldPath, ['lookup']),
      
      // Run only disable rules
      runDisableOnly: (formId?: string, fieldPath?: string) => 
        this.runRuleType(formId, fieldPath, ['disable']),
      
      // Run visibility and lookup, but not validation
      runVisibilityAndLookup: (formId?: string, fieldPath?: string) => 
        this.runRuleType(formId, fieldPath, ['visibility', 'lookup']),
      
      // Run visibility and validation, but not lookup
      runVisibilityAndValidation: (formId?: string, fieldPath?: string) => 
        this.runRuleType(formId, fieldPath, ['visibility', 'validation']),
      
      // Run visibility and disable rules
      runVisibilityAndDisable: (formId?: string, fieldPath?: string) => 
        this.runRuleType(formId, fieldPath, ['visibility', 'disable']),
      
      // Apply Angular validators without running framework validation
      applyAngularValidators: (formId: string, fieldPath: string, validators: ValidatorFn[]) => 
        this.applyAngularValidators(formId, fieldPath, validators),
        
      // Update a field's visibility without running other rules
      updateVisibility: (formId: string, fieldPath: string, isVisible: boolean, clearOnHide?: boolean) => 
        this.updateVisibility(formId, fieldPath, isVisible, clearOnHide),
        
      // Update a field's disabled state without running other rules
      updateDisabledState: (formId: string, fieldPath: string, isDisabled: boolean, clearOnDisable?: boolean) => 
        this.updateDisabledState(formId, fieldPath, isDisabled, clearOnDisable)
    };
  }
  
  /**
   * Executes only specific rule types for a field or all fields
   * @param formId Optional form ID to target a specific form
   * @param fieldPath Optional field path to target a specific field
   * @param ruleTypes Array of rule types to execute ['visibility', 'validation', 'lookup', 'disable']
   */
  private runRuleType(
    formId?: string, 
    fieldPath?: string, 
    ruleTypes: Array<'visibility' | 'validation' | 'lookup' | 'disable'> = []
  ): void {
    // Execute for a specific field
    if (formId && fieldPath) {
      this.runRuleTypeForField(formId, fieldPath, ruleTypes);
      return;
    }
    
    // Execute for all forms and fields
    this.validationService['formRegistry'].forEach((form, formId) => {
      const rules = this.validationService['rulesRegistry'].get(formId);
      if (!rules) return;
      
      Object.keys(rules).forEach(path => {
        this.runRuleTypeForField(formId, path, ruleTypes);
      });
    });
  }
  
  /**
   * Executes specific rule types for a specific field
   */
  private runRuleTypeForField(
    formId: string, 
    fieldPath: string, 
    ruleTypes: Array<'visibility' | 'validation' | 'lookup' | 'disable'> = []
  ): void {
    const form = this.validationService['formRegistry'].get(formId);
    const control = form?.get(fieldPath);
    
    if (!form || !control) return;
    
    // Get rule
    const rules = this.validationService['rulesRegistry'].get(formId);
    const rule = rules?.[fieldPath];
    
    if (!rule) return;
    
    // Evaluate base conditions
    const conditions = rule.conditions || [];
    const conditionsMet = this.validationService['evaluateConditions'](formId, conditions);
    
    // Apply visibility rule if requested
    if (ruleTypes.includes('visibility') && rule.visibility) {
      const isVisible = conditionsMet && rule.visibility.value;
      this.formExtension.updateControlProperty(control, 'visible', isVisible);
      
      if (!isVisible && rule.visibility.clearOnHide) {
        this.validationService['clearControlValue'](control);
      }
    }
    
    // Apply disable rule if requested
    if (ruleTypes.includes('disable') && rule.disable) {
      // Check disable-specific conditions if any
      const disableConditionsMet = !rule.disable.conditions || 
        this.validationService['evaluateConditions'](formId, rule.disable.conditions);
      
      const isDisabled = conditionsMet && disableConditionsMet && rule.disable.value;
      this.formExtension.updateControlProperty(control, 'disabled', isDisabled);
      
      // Set native disabled state
      if (isDisabled) {
        control.disable({ emitEvent: false });
        
        if (rule.disable.clearOnDisable) {
          this.validationService['clearControlValue'](control);
        }
      } else {
        control.enable({ emitEvent: false });
      }
    }
    
    // Apply validation rule if requested
    if (ruleTypes.includes('validation') && rule.validation) {
      // Check validation-specific conditions
      const validationConditions = rule.validation.conditions || [];
      const validationConditionsMet = validationConditions.length === 0 ? 
        conditionsMet : 
        this.validationService['evaluateConditions'](formId, validationConditions);
      
      if (conditionsMet && validationConditionsMet) {
        // Get original validators
        const originalValidators = this.validationService['getOriginalValidators'](formId, fieldPath);
        
        // Get rule validators
        const ruleValidators = this.validationService['createValidators'](rule.validation.rules);
        
        // Combine validators
        const combinedValidators = [...originalValidators, ...ruleValidators];
        
        // Apply validators
        control.setValidators(combinedValidators);
        
        // Update required flag
        const isRequired = ruleValidators.some(v => 
          this.validationService['isRequiredValidator'](v)
        );
        this.formExtension.updateControlProperty(control, 'required', isRequired);
      } else {
        // Reset to original validators
        const originalValidators = this.validationService['getOriginalValidators'](formId, fieldPath);
        control.setValidators(originalValidators.length > 0 ? originalValidators : null);
        
        // Remove required flag
        this.formExtension.updateControlProperty(control, 'required', false);
      }
      
      control.updateValueAndValidity({ emitEvent: false });
    }
    
    // Apply lookup rule if requested
    if (ruleTypes.includes('lookup') && rule.lookup) {
      this.validationService['applyLookupRules'](formId, fieldPath, control, rule.lookup, conditionsMet);
    }
  }
  
  /**
   * Applies Angular validators directly without running framework validation rules
   */
  private applyAngularValidators(
    formId: string, 
    fieldPath: string, 
    validators: ValidatorFn[]
  ): void {
    const form = this.validationService['formRegistry'].get(formId);
    const control = form?.get(fieldPath);
    
    if (!form || !control) return;
    
    // Set validators directly on the control
    control.setValidators(validators);
    control.updateValueAndValidity();
    
    // Also update required flag for UI if Validators.required is present
    const isRequired = validators.some(v => 
      v === Validators.required || 
      v === Validators.requiredTrue || 
      this.isRequiredValidator(v)
    );
    this.formExtension.updateControlProperty(control, 'required', isRequired);
  }
  
  /**
   * Check if a validator is a required validator
   */
  private isRequiredValidator(validator: ValidatorFn): boolean {
    // First check for direct equality with the standard required validators
    if (validator === Validators.required || validator === Validators.requiredTrue) {
      return true;
    }
    
    // Try to identify required validators by testing with a null input
    const testControl = { value: null } as any;
    const errors = validator(testControl);
    return errors && ('required' in errors);
  }
  
  /**
   * Updates a field's visibility directly without running other rules
   */
  private updateVisibility(
    formId: string, 
    fieldPath: string, 
    isVisible: boolean, 
    clearOnHide: boolean = false
  ): void {
    const form = this.validationService['formRegistry'].get(formId);
    const control = form?.get(fieldPath);
    
    if (!form || !control) return;
    
    // Update visibility
    this.formExtension.updateControlProperty(control, 'visible', isVisible);
    
    // Clear value if needed
    if (!isVisible && clearOnHide) {
      this.validationService['clearControlValue'](control);
    }
  }
  
  /**
   * Updates a field's disabled state directly without running other rules
   */
  private updateDisabledState(
    formId: string, 
    fieldPath: string, 
    isDisabled: boolean, 
    clearOnDisable: boolean = false
  ): void {
    const form = this.validationService['formRegistry'].get(formId);
    const control = form?.get(fieldPath);
    
    if (!form || !control) return;
    
    // Update disabled property
    this.formExtension.updateControlProperty(control, 'disabled', isDisabled);
    
    // Set native disabled state
    if (isDisabled) {
      control.disable({ emitEvent: false });
      
      // Clear value if needed
      if (clearOnDisable) {
        this.validationService['clearControlValue'](control);
      }
    } else {
      control.enable({ emitEvent: false });
    }
  }
}
