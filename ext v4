// profile-validation.service.ts
import { Injectable } from '@angular/core';
import { FormGroup, FormArray, AbstractControl } from '@angular/forms';
import { UnifiedValidationService, ValidationController } from './unified-validation.service';
import { RuleFactoryService } from './rule-factory.service';

@Injectable({
  providedIn: 'root'
})
export class ProfileValidationService {
  private controller: ValidationController;

  constructor(
    private validationService: UnifiedValidationService,
    private ruleFactory: RuleFactoryService
  ) {}

  /**
   * Register the main profile form
   */
  registerMainForm(profileForm: FormGroup): ValidationController {
    // Register the main form
    this.validationService.registerForm('mainProfileForm', profileForm);
    
    // Get a validation controller (can be empty rules since we're registering individual sections)
    this.controller = this.validationService.registerRules('mainProfileForm', {});
    
    return this.controller;
  }

  /**
   * Register validation for all profiles in the form array
   */
  registerAllProfiles(profilesArray: FormArray): void {
    for (let i = 0; i < profilesArray.length; i++) {
      this.registerProfile(profilesArray.at(i) as FormGroup, i);
    }
  }

  /**
   * Register validation for a single profile
   */
  registerProfile(profile: FormGroup, profileIndex: number): void {
    // Register profile form
    const profileFormId = `profile_${profileIndex}`;
    this.validationService.registerForm(profileFormId, profile);
    
    // Define validation rules for profile fields
    const profileRules = {
      'firstName': this.ruleFactory.createRequiredFieldRule(),
      'lastName': this.ruleFactory.createRequiredFieldRule(),
      // Add more field rules as needed
    };
    
    // Register rules
    this.validationService.registerRules(profileFormId, profileRules);
    
    // Register contact info if it exists
    if (profile.get('contactInfo')) {
      this.registerContactInfo(profile.get('contactInfo') as FormGroup, profileIndex);
    }
  }

  /**
   * Register validation for contact info section
   */
  registerContactInfo(contactInfo: FormGroup, profileIndex: number): void {
    // Register contact info form
    const contactFormId = `profile_${profileIndex}_contact`;
    this.validationService.registerForm(contactFormId, contactInfo);
    
    // Register legal address if it exists
    if (contactInfo.get('legalAddress')) {
      this.registerLegalAddress(contactInfo.get('legalAddress') as FormGroup, profileIndex);
    }
    
    // Register phone info array if it exists
    if (contactInfo.get('phoneInfo')) {
      const phoneArray = contactInfo.get('phoneInfo') as FormArray;
      for (let i = 0; i < phoneArray.length; i++) {
        this.registerPhoneInfo(phoneArray.at(i) as FormGroup, profileIndex, i);
      }
    }
    
    // Register email info array if it exists
    if (contactInfo.get('emailInfo')) {
      const emailArray = contactInfo.get('emailInfo') as FormArray;
      for (let i = 0; i < emailArray.length; i++) {
        this.registerEmailInfo(emailArray.at(i) as FormGroup, profileIndex, i);
      }
    }
  }

  /**
   * Register validation for legal address
   */
  registerLegalAddress(legalAddress: FormGroup, profileIndex: number): void {
    // Register legal address form
    const addressFormId = `profile_${profileIndex}_address`;
    this.validationService.registerForm(addressFormId, legalAddress);
    
    // Define address validation rules
    const addressRules = {
      'street': this.ruleFactory.createRequiredFieldRule(),
      'city': this.ruleFactory.createRequiredFieldRule(),
      'state': this.ruleFactory.createRequiredFieldRule(),
      'zipCode': this.ruleFactory.createPatternValidationRule('^\\d{5}(-\\d{4})?$', true)
    };
    
    // Register rules
    this.validationService.registerRules(addressFormId, addressRules);
  }

  /**
   * Register validation for a phone info item
   */
  registerPhoneInfo(phoneItem: FormGroup, profileIndex: number, phoneIndex: number): void {
    // Register phone item form
    const phoneFormId = `profile_${profileIndex}_phone_${phoneIndex}`;
    this.validationService.registerForm(phoneFormId, phoneItem);
    
    // Define phone validation rules
    const phoneRules = {
      'phoneType': this.ruleFactory.createRequiredFieldRule(),
      'phoneNumber': this.ruleFactory.combineRules(
        this.ruleFactory.createRequiredFieldRule(),
        this.ruleFactory.createPatternValidationRule('^\\d{3}-\\d{3}-\\d{4}$')
      ),
      'primary': {} // No validation needed
    };
    
    // Register rules
    this.validationService.registerRules(phoneFormId, phoneRules);
  }

  /**
   * Register validation for an email info item
   */
  registerEmailInfo(emailItem: FormGroup, profileIndex: number, emailIndex: number): void {
    // Register email item form
    const emailFormId = `profile_${profileIndex}_email_${emailIndex}`;
    this.validationService.registerForm(emailFormId, emailItem);
    
    // Define email validation rules
    const emailRules = {
      'emailType': this.ruleFactory.createRequiredFieldRule(),
      'emailAddress': this.ruleFactory.combineRules(
        this.ruleFactory.createRequiredFieldRule(),
        this.ruleFactory.createEmailValidationRule()
      ),
      'primary': {} // No validation needed
    };
    
    // Register rules
    this.validationService.registerRules(emailFormId, emailRules);
  }

  /**
   * Register a new profile when added
   */
  registerNewProfile(profilesArray: FormArray): void {
    const newIndex = profilesArray.length - 1;
    this.registerProfile(profilesArray.at(newIndex) as FormGroup, newIndex);
  }

  /**
   * Register a new phone info when added
   */
  registerNewPhoneInfo(phoneArray: FormArray, profileIndex: number): void {
    const newIndex = phoneArray.length - 1;
    this.registerPhoneInfo(phoneArray.at(newIndex) as FormGroup, profileIndex, newIndex);
  }

  /**
   * Register a new email info when added
   */
  registerNewEmailInfo(emailArray: FormArray, profileIndex: number): void {
    const newIndex = emailArray.length - 1;
    this.registerEmailInfo(emailArray.at(newIndex) as FormGroup, profileIndex, newIndex);
  }

  /**
   * Unregister a profile when removed
   */
  unregisterProfile(profileIndex: number): void {
    // Unregister all related forms
    this.validationService.unregisterForm(`profile_${profileIndex}`);
    this.validationService.unregisterForm(`profile_${profileIndex}_contact`);
    this.validationService.unregisterForm(`profile_${profileIndex}_address`);
    
    // Unregister all phone and email forms for this profile
    // (You might need to keep track of how many phones/emails were registered)
  }

  /**
   * Get all validation errors across all profiles
   */
  getAllValidationErrors(): Record<string, any> {
    if (!this.controller) {
      return {};
    }
    
    // Mark all fields as touched to show errors
    this.controller.markAllAsTouched();
    
    // Get all errors
    return this.controller.getValidationErrors();
  }

  /**
   * Check if a specific profile has any errors
   */
  hasProfileErrors(profileIndex: number): boolean {
    const errors = this.getAllValidationErrors();
    
    // Check profile-level errors
    if (errors[`profile_${profileIndex}`]) {
      return true;
    }
    
    // Check contact info errors
    if (errors[`profile_${profileIndex}_contact`]) {
      return true;
    }
    
    // Check address errors
    if (errors[`profile_${profileIndex}_address`]) {
      return true;
    }
    
    // Check phone errors
    for (const formId in errors) {
      if (formId.startsWith(`profile_${profileIndex}_phone_`)) {
        return true;
      }
    }
    
    // Check email errors
    for (const formId in errors) {
      if (formId.startsWith(`profile_${profileIndex}_email_`)) {
        return true;
      }
    }
    
    return false;
  }

  /**
   * Get errors for a specific profile component
   */
  getProfileComponentErrors(profileIndex: number, component: 'profile' | 'address' | 'phone' | 'email'): Record<string, any> {
    const errors = this.getAllValidationErrors();
    const result = {};
    
    switch (component) {
      case 'profile':
        const profileFormId = `profile_${profileIndex}`;
        if (errors[profileFormId]) {
          Object.assign(result, errors[profileFormId]);
        }
        break;
        
      case 'address':
        const addressFormId = `profile_${profileIndex}_address`;
        if (errors[addressFormId]) {
          Object.assign(result, errors[addressFormId]);
        }
        break;
        
      case 'phone':
        for (const formId in errors) {
          if (formId.startsWith(`profile_${profileIndex}_phone_`)) {
            Object.assign(result, errors[formId]);
          }
        }
        break;
        
      case 'email':
        for (const formId in errors) {
          if (formId.startsWith(`profile_${profileIndex}_email_`)) {
            Object.assign(result, errors[formId]);
          }
        }
        break;
    }
    
    return result;
  }

  /**
   * Check field error (for UI display)
   */
  hasFieldError(control: AbstractControl): boolean {
    return control.invalid && control.touched;
  }

  /**
   * Generate a user-friendly error summary
   */
  getErrorSummary(): string[] {
    const errors = this.getAllValidationErrors();
    const summary = [];
    
    // Analyze the error objects to create meaningful messages
    Object.keys(errors).forEach(formId => {
      if (formId.startsWith('profile_')) {
        // Parse the form ID to get profile/component info
        const parts = formId.split('_');
        const profileIndex = parseInt(parts[1]);
        const component = parts[2] || 'main';
        
        // Get component-specific error messages
        let componentMessage = '';
        switch (component) {
          case 'main':
            componentMessage = `Profile #${profileIndex + 1} Basic Info`;
            break;
          case 'contact':
            componentMessage = `Profile #${profileIndex + 1} Contact Info`;
            break;
          case 'address':
            componentMessage = `Profile #${profileIndex + 1} Legal Address`;
            break;
          case 'phone':
            const phoneIndex = parts[3];
            componentMessage = `Profile #${profileIndex + 1} Phone #${parseInt(phoneIndex) + 1}`;
            break;
          case 'email':
            const emailIndex = parts[3];
            componentMessage = `Profile #${profileIndex + 1} Email #${parseInt(emailIndex) + 1}`;
            break;
        }
        
        // Add field-specific errors
        const fieldErrors = Object.keys(errors[formId]);
        summary.push(`${componentMessage} has the following errors: ${fieldErrors.join(', ')}`);
      }
    });
    
    return summary;
  }

  /**
   * Validate all forms and return result
   */
  validateAllForms(): boolean {
    if (!this.controller) {
      return false;
    }
    
    return this.controller.validateForms();
  }
}
