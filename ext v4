import { AbstractControl, FormArray, FormGroup } from '@angular/forms';
import { LayoutField, FieldItem, ExtendedAbstractControl } from './form-extension.types';

export class FormExtensionHelpers {
  // ... other methods

  private createArrayFieldItem(baseItem: FieldItem, parentControl: FormGroup | FormArray): FieldItem {
    const control = parentControl instanceof FormGroup 
      ? parentControl.get(baseItem.fldName!) as FormArray
      : parentControl;

    if (!(control instanceof FormArray)) {
      console.error('Expected FormArray for array field', baseItem.fldName);
      return baseItem;
    }

    return {
      ...baseItem,
      type: baseItem.type as 'arraySimple' | 'arrayGroup',
      value: control.value,
      isArray: true,
      fields: control.controls.map((ctrl, index) => {
        const childLayoutField: LayoutField = {
          fldName: `${baseItem.fldName}.${index}`,
          seq: index,
          side: 'full',
          type: ctrl instanceof FormGroup ? 'arrayGroup' : 'arraySimple'
        };
        return this.createFieldItem(childLayoutField, control, index);
      }).filter(Boolean) as FieldItem[]
    };
  }

  private getFieldsReadViewItems(control: FormGroup | FormArray): FieldItem[] {
    if (control instanceof FormGroup) {
      return Object.entries(control.controls).map(([key, childControl]) => {
        const layoutField: LayoutField = {
          fldName: key,
          side: 'full',
          seq: 0,
          type: this.getFieldType(childControl)
        };
        return this.createFieldItem(layoutField, control);
      }).filter((item): item is FieldItem => item !== null);
    } else if (control instanceof FormArray) {
      return control.controls.map((childControl, index) => {
        const layoutField: LayoutField = {
          fldName: index.toString(),
          side: 'full',
          seq: index,
          type: this.getFieldType(childControl)
        };
        return this.createFieldItem(layoutField, control.parent || control, index);
      }).filter((item): item is FieldItem => item !== null);
    }
    return [];
  }

  private getFieldType(control: AbstractControl): LayoutField['type'] {
    if (control instanceof FormGroup) {
      return 'arrayGroup';
    } else if (control instanceof FormArray) {
      return 'arraySimple';
    } else {
      return 'field';
    }
  }

  // ... other methods including createFieldItem
}
-----------
import { AbstractControl, FormArray, FormGroup } from '@angular/forms';
import { LayoutField, FieldItem, ExtendedAbstractControl } from './form-extension.types';

export class FormExtensionHelpers {
  // ... other methods

  private createFieldItem(field: LayoutField, parentControl: FormGroup | FormArray, arrayIndex?: number): FieldItem | null {
    let control: AbstractControl | null;
    
    if (parentControl instanceof FormArray) {
      control = parentControl.at(arrayIndex!);
    } else {
      control = parentControl.get(field.fldName!);
    }

    if (!control) return null;

    const extendedControl = control as ExtendedAbstractControl;

    let baseItem: FieldItem = {
      ...field,
      value: control.value,
      isValid: control.valid,
      errors: control.errors,
      status: control.status,
      touched: control.touched,
      dirty: control.dirty
    };

    switch (field.type) {
      case 'subHeader':
        return { ...baseItem, isSubHeader: true };

      case 'reqDivider':
        return { ...baseItem, isReqDivider: true };

      case 'divider':
        return { ...baseItem, isDivider: true };

      case 'staticComponent':
        return { 
          ...baseItem, 
          isStaticComponent: true, 
          staticComponentName: field.staticComponent 
        };

      case 'injectedComponent':
        return this.createInjectedComponentItem(baseItem, parentControl);

      case 'arraySimple':
      case 'arrayGroup':
        return this.createArrayFieldItem(baseItem, parentControl);

      default:
        return this.createDefaultFieldItem(baseItem, control, parentControl);
    }
  }

  private createInjectedComponentItem(baseItem: FieldItem, parentControl: FormGroup | FormArray): FieldItem {
    const controlValues = baseItem.injectedComponentInputs?.map(input => 
      parentControl instanceof FormGroup ? parentControl.get(input)?.value : null
    ) || [];

    return {
      ...baseItem,
      type: 'injectedComponent',
      value: controlValues,
      isInjectedComponent: true,
      injectedComponentName: baseItem.injectedComponent,
      injectedComponentInputs: controlValues,
      injectedComponentOutputs: baseItem.injectedComponentOutputs
    };
  }

  private createArrayFieldItem(baseItem: FieldItem, parentControl: FormGroup | FormArray): FieldItem {
    const control = parentControl instanceof FormGroup 
      ? parentControl.get(baseItem.fldName!) as FormArray
      : parentControl;

    if (!(control instanceof FormArray)) {
      console.error('Expected FormArray for array field', baseItem.fldName);
      return baseItem;
    }

    return {
      ...baseItem,
      type: baseItem.type as 'arraySimple' | 'arrayGroup',
      value: control.value,
      isArray: true,
      fields: control.controls.map((ctrl, index) => 
        this.createFieldItem({ 
          ...baseItem, 
          fldName: `${baseItem.fldName}.${index}`,
          seq: index,
          type: ctrl instanceof FormGroup ? 'arrayGroup' : 'arraySimple'
        }, control, index)
      ).filter(Boolean) as FieldItem[]
    };
  }

  private createDefaultFieldItem(baseItem: FieldItem, control: AbstractControl, parentControl: FormGroup | FormArray): FieldItem {
    const extendedControl = control as ExtendedAbstractControl;
    const rawValue = control.value;
    const transformedValue = this.transformValue(rawValue, extendedControl);

    return {
      ...baseItem,
      type: 'field',
      value: transformedValue,
      computedValue: extendedControl._customComputation 
        ? extendedControl._customComputation(control, parentControl as FormGroup)
        : transformedValue,
      oldValue: extendedControl._oldValue
    };
  }

  private transformValue(value: any, control: ExtendedAbstractControl): any {
    if (value === 'Y') return 'Yes';
    if (value === 'N') return 'No';

    if (control.lookupData && Array.isArray(control.lookupData)) {
      const matchingLookup = control.lookupData.find(item => item.value === value);
      if (matchingLookup) return matchingLookup.label;
    }

    return value;
  }

  // ... other methods
}

-------
private getFieldsReadViewItems(control: FormGroup | FormArray): FieldItem[] {
  if (control instanceof FormGroup) {
    return Object.entries(control.controls).map(([key, childControl]) => 
      this.createFieldItem({ 
        fldName: key, 
        side: 'full', 
        seq: 0,
        type: this.getFieldType(childControl)
      }, control)
    ).filter((item): item is FieldItem => item !== null);
  } else if (control instanceof FormArray) {
    return control.controls.map((childControl, index) => 
      this.createFieldItem({ 
        fldName: index.toString(), 
        side: 'full', 
        seq: index,
        type: this.getFieldType(childControl)
      }, control.parent || control, index)
    ).filter((item): item is FieldItem => item !== null);
  }
  return [];
}

private getFieldType(control: AbstractControl): string {
  if (control instanceof FormGroup) {
    return 'arrayGroup';
  } else if (control instanceof FormArray) {
    return 'arraySimple';
  } else {
    return 'field';
  }
}

private createFieldItem(field: LayoutField, parentControl: FormGroup | FormArray, arrayIndex?: number): FieldItem | null {
  let control: AbstractControl | null;
  
  if (parentControl instanceof FormArray) {
    control = parentControl.at(arrayIndex!);
  } else {
    control = parentControl.get(field.fldName!);
  }

  if (!control) return null;

  // ... rest of the createFieldItem method
}
------------

private createFieldItem(field: LayoutField, formGroup: FormGroup): FieldItem | null {
    const control = formGroup.get(field.fldName!);
    if (!control) return null;

    const extendedControl = control as ExtendedAbstractControl;

    let baseItem: FieldItem = {
      ...field,
      value: null,
      type: field.type || 'field'
    };

    switch (field.type) {
      case 'subHeader':
        return { ...baseItem, isSubHeader: true };
      case 'reqDivider':
        return { ...baseItem, isReqDivider: true };
      case 'divider':
        return { ...baseItem, isDivider: true, dividerClass: field.dividerClass };
      case 'staticComponent':
        return { 
          ...baseItem, 
          isStaticComponent: true, 
          staticComponentName: field.staticComponent 
        };
      case 'injectedComponent':
        return this.createInjectedComponentItem(field, formGroup);
      case 'arraySimple':
      case 'arrayGroup':
        return this.createArrayFieldItem(field, formGroup);
      default:
        return this.createDefaultFieldItem(field, control, formGroup);
    }
  }

  private createInjectedComponentItem(field: LayoutField, formGroup: FormGroup): FieldItem {
    const controlValues = field.injectedComponentInputs?.map(input => 
      formGroup.get(input)?.value
    ) || [];

    return {
      ...field,
      type: 'injectedComponent',
      value: controlValues,
      isInjectedComponent: true,
      injectedComponentName: field.injectedComponent,
      injectedComponentInputs: controlValues,
      injectedComponentOutputs: field.injectedComponentOutputs
    };
  }

  private createArrayFieldItem(field: LayoutField, formGroup: FormGroup): FieldItem {
    const control = formGroup.get(field.fldName!) as FormArray;
    return {
      ...field,
      type: field.type as 'arraySimple' | 'arrayGroup',
      value: control.value,
      isArray: true,
      fields: control.controls.map((ctrl, index) => 
        this.createFieldItem({ ...field, fldName: `${field.fldName}.${index}` }, formGroup)
      ).filter(Boolean) as FieldItem[]
    };
  }

  private createDefaultFieldItem(field: LayoutField, control: AbstractControl, formGroup: FormGroup): FieldItem {
    const extendedControl = control as ExtendedAbstractControl;
    const rawValue = control.value;
    const transformedValue = this.transformValue(rawValue, extendedControl);

    return {
      ...field,
      type: 'field',
      value: transformedValue,
      computedValue: extendedControl._customComputation ? extendedControl._customComputation(control, formGroup) : transformedValue,
      oldValue: extendedControl._oldValue,
      isValid: control.valid,
      errors: control.errors,
      status: control.status,
      touched: control.touched,
      dirty: control.dirty
    };
  }



Form Extension Types
-------------------------
import { AbstractControl, FormGroup, ValidationErrors } from '@angular/forms';

export interface ExtendedControlOptions {
  label?: string;
  fldName?: string;
  visible?: boolean;
  editable?: boolean;
  lookup?: string;
  lookupData?: Array<{ label: string; value: any }>;
  regex?: string[];
  fldMax?: number;
  fieldType?: string;
  dfltVal?: any;
  required?: boolean;
  oldValue?: any;
  expand?: boolean;
  sectionName?: string;
  subSectionName?: string;
  reqBorder?: boolean;
  subName?: string;
  align?: string;
  isArray?: boolean;
  combineFields?: string[];
  combineSeparator?: string;
  customCombine?: boolean;
  injectedComponent?: string;
  injectedComponentInputs?: string[];
  injectedComponentOutputs?: { [key: string]: string[] };
  staticComponent?: string;
  labelWidth?: string;
}

export type ExtendedControlProperties = {
  [K in keyof ExtendedControlOptions]: NonNullable<ExtendedControlOptions[K]>;
} & {
  _oldValue?: any;
  _customComputation?: (control: AbstractControl, form: FormGroup) => any;
};

export type ExtendedAbstractControl = AbstractControl & ExtendedControlProperties;

export interface LayoutField extends ExtendedControlOptions {
  seq: number;
  side: 'left' | 'right' | 'full';
  type?: 'field' | 'subHeader' | 'divider' | 'reqDivider' | 'injectedComponent' | 'staticComponent' | 'arraySimple' | 'arrayGroup';
  fields?: LayoutField[];
  dividerClass?: string;
}

export interface FieldItem extends ExtendedControlOptions {
  value: any;
  computedValue?: any;
  isValid?: boolean;
  errors?: ValidationErrors | null;
  status?: string;
  touched?: boolean;
  dirty?: boolean;
  isCombined?: boolean;
  useHtml?: boolean;
  isInjectedComponent?: boolean;
  injectedComponentName?: string;
  isStaticComponent?: boolean;
  staticComponentName?: string;
  fields?: FieldItem[];
  isSubHeader?: boolean;
  isReqDivider?: boolean;
  isDivider?: boolean;
  dividerClass?: string;
  type?: 'field' | 'subHeader' | 'divider' | 'reqDivider' | 'injectedComponent' | 'staticComponent' | 'arraySimple' | 'arrayGroup' | string;
}

export interface LayoutSection {
  type: 'leftHeader' | 'leftRightHeader' | 'commonHeader' | 'accordion' | 'accordionHeader' | 'divider';
  leftHeader?: string;
  rightHeader?: string;
  commonHeader?: string;
  accordionHeader?: string;
  labelWidth?: string;
  fields: LayoutField[];
  dividerClass?: string;
}

export interface FormLayout {
  type: 'standard' | 'noRightHeader' | 'multipleSection';
  sections: LayoutSection[];
}

export interface UIReadViewOptions {
  includeSections?: string[];
  excludeSections?: string[];
  includeFields?: string[];
  excludeFields?: string[];
  includeOldValues?: boolean;
  includeErrors?: boolean;
}

-------
FormExtensionHelpers

import { Injectable } from '@angular/core';
import { AbstractControl, FormArray, FormBuilder, FormGroup, ValidatorFn, Validators } from '@angular/forms';
import { ExtendedAbstractControl, ExtendedControlOptions, FieldItem, FormLayout, LayoutField, LayoutSection, UIReadViewOptions } from './form-extension.types';

@Injectable({
  providedIn: 'root'
})
export class FormExtensionHelpers {
  constructor(private fb: FormBuilder) {}

  updateControlProperties(control: ExtendedAbstractControl, options: ExtendedControlOptions): boolean {
    let changed = false;
    Object.entries(options).forEach(([key, value]) => {
      if (key in control) {
        if (key === 'regex') {
          if (!this.areRegexArraysEqual(control[key] as string[], value as string[])) {
            (control as any)[key] = value;
            changed = true;
          }
        } else if (control[key as keyof ExtendedAbstractControl] !== value) {
          (control as any)[key] = value;
          changed = true;
        }
      }
    });
    return changed;
  }

  areRegexArraysEqual(arr1?: string[], arr2?: string[]): boolean {
    if (!arr1 && !arr2) return true;
    if (!arr1 || !arr2) return false;
    if (arr1.length !== arr2.length) return false;
    return arr1.every((regex, index) => regex === arr2[index]);
  }

  extendNestedControls(control: FormGroup | FormArray, service: any): void {
    Object.values(control.controls).forEach(childControl => {
      if (!this.hasExtendedProperties(childControl)) {
        service.extendControl(childControl, {});
      }
    });
  }

  hasExtendedProperties(control: AbstractControl): boolean {
    return 'label' in control || 'fldName' in control;
  }

  updateValidators(control: AbstractControl, customValidatorsCache: WeakMap<AbstractControl, ValidatorFn[]>): void {
    const extendedControl = control as ExtendedAbstractControl;
    const validators: ValidatorFn[] = [];

    if (extendedControl.required) {
      validators.push(Validators.required);
    }

    if (extendedControl.regex && extendedControl.regex.length > 0) {
      validators.push(Validators.pattern(extendedControl.regex.join('|')));
    }

    if (extendedControl.fldMax !== undefined) {
      validators.push(Validators.max(extendedControl.fldMax));
    }

    const customValidators = customValidatorsCache.get(control) || [];
    validators.push(...customValidators);

    control.setValidators(validators);
    control.updateValueAndValidity();
  }

  shouldUpdateProperty<K extends keyof ExtendedControlOptions>(
    control: ExtendedAbstractControl,
    property: K,
    value: ExtendedControlOptions[K]
  ): boolean {
    if (property === 'regex') {
      return !this.areRegexArraysEqual(control[property] as string[], value as string[]);
    }
    return control[property] !== value;
  }

  sortFormLayout(layout: FormLayout): FormLayout {
    return {
      ...layout,
      sections: layout.sections.map(section => ({
        ...section,
        fields: [...section.fields].sort((a, b) => a.seq - b.seq)
      }))
    };
  }

  getExtendedReadViewForControl(control: AbstractControl, formLayouts: WeakMap<FormGroup, FormLayout>): FieldItem[] {
    if (control instanceof FormGroup) {
      const layout = formLayouts.get(control);
      if (layout) {
        return this.applyLayoutToFormGroup(control, layout);
      }
    }
    return this.getBasicReadViewForControl(control);
  }

  private applyLayoutToFormGroup(formGroup: FormGroup, layout: FormLayout): FieldItem[] {
    return layout.sections.flatMap(section => this.createSectionItems(section, formGroup));
  }

  private createSectionItems(section: LayoutSection, formGroup: FormGroup): FieldItem[] {
    if (section.type === 'divider') {
      return [{
        label: '',
        fldName: `divider_${Date.now()}`,
        type: 'divider',
        editable: false,
        visible: true,
        expand: false,
        value: null,
        isDivider: true,
        dividerClass: section.dividerClass
      }];
    }

    const sectionItem: FieldItem = {
      label: this.getSectionLabel(section),
      fldName: `section_${section.type}`,
      type: section.type,
      editable: false,
      visible: true,
      expand: true,
      value: null,
      fields: [],
      labelWidth: section.labelWidth
    };

    sectionItem.fields = section.fields.flatMap(field => this.createFieldItem(field, formGroup)).filter(Boolean) as FieldItem[];
    return [sectionItem];
  }

  private createFieldItem(field: LayoutField, formGroup: FormGroup): FieldItem | null {
    const control = formGroup.get(field.fldName!);
    if (!control) return null;

    const extendedControl = control as ExtendedAbstractControl;

    let baseItem: FieldItem = {
      ...field,
      value: null,
      type: field.type || 'field'
    };

    switch (field.type) {
      case 'subHeader':
        return { ...baseItem, isSubHeader: true };
      case 'reqDivider':
        return { ...baseItem, isReqDivider: true };
      case 'divider':
        return { ...baseItem, isDivider: true, dividerClass: field.dividerClass };
      case 'staticComponent':
        return { 
          ...baseItem, 
          isStaticComponent: true, 
          staticComponentName: field.staticComponent 
        };
      case 'injectedComponent':
        return this.createInjectedComponentItem(field, formGroup);
      case 'arraySimple':
      case 'arrayGroup':
        return this.createArrayFieldItem(field, formGroup);
      default:
        return this.createDefaultFieldItem(field, control, formGroup);
    }
  }

  private createInjectedComponentItem(field: LayoutField, formGroup: FormGroup): FieldItem {
    const controlValues = field.injectedComponentInputs?.map(input => 
      formGroup.get(input)?.value
    ) || [];

    return {
      ...field,
      type: 'injectedComponent',
      value: controlValues,
      isInjectedComponent: true,
      injectedComponentName: field.injectedComponent,
      injectedComponentInputs: controlValues,
      injectedComponentOutputs: field.injectedComponentOutputs
    };
  }

  private createArrayFieldItem(field: LayoutField, formGroup: FormGroup): FieldItem {
    const control = formGroup.get(field.fldName!) as FormArray;
    return {
      ...field,
      type: field.type as 'arraySimple' | 'arrayGroup',
      value: control.value,
      isArray: true,
      fields: control.controls.map((ctrl, index) => 
        this.createFieldItem({ ...field, fldName: `${field.fldName}.${index}` }, formGroup)
      ).filter(Boolean) as FieldItem[]
    };
  }

  private createDefaultFieldItem(field: LayoutField, control: AbstractControl, formGroup: FormGroup): FieldItem {
    const extendedControl = control as ExtendedAbstractControl;
    const rawValue = control.value;
    const transformedValue = this.transformValue(rawValue, extendedControl);

    return {
      ...field,
      type: 'field',
      value: transformedValue,
      computedValue: extendedControl._customComputation ? extendedControl._customComputation(control, formGroup) : transformedValue,
      oldValue: extendedControl._oldValue,
      isValid: control.valid,
      errors: control.errors,
      status: control.status,
      touched: control.touched,
      dirty: control.dirty
    };
  }

  private getSectionLabel(section: LayoutSection): string {
    switch (section.type) {
      case 'leftHeader':
      case 'leftRightHeader':
        return section.leftHeader || '';
      case 'commonHeader':
        return section.commonHeader || '';
      case 'accordion':
      case 'accordionHeader':
        return section.accordionHeader || '';
      default:
        return '';
    }
  }

  private transformValue(value: any, control: ExtendedAbstractControl): any {
    if (value === 'Y') return 'Yes';
    if (value === 'N') return 'No';

    if (control.lookupData && Array.isArray(control.lookupData)) {
      const matchingLookup = control.lookupData.find(item => item.value === value);
      if (matchingLookup) return matchingLookup.label;
    }

    return value;
  }

  getUIReadView(control: AbstractControl, options: UIReadViewOptions = {}): FieldItem[] {
    const readView = this.getExtendedReadViewForControl(control, new WeakMap());
    return this.filterAndFormatReadView(readView, options);
  }

  private filterAndFormatReadView(items: FieldItem[], options: UIReadViewOptions): FieldItem[] {
    return items.filter(item => this.shouldIncludeItem(item, options))
      .map(item => this.formatItem(item, options));
  }

  private shouldIncludeItem(item: FieldItem, options: UIReadViewOptions): boolean {
    if (options.includeSections && item.sectionName) {
      return options.includeSections.includes(item.sectionName);
    }
    if (options.excludeSections && item.sectionName) {
      return !options.excludeSections.includes(item.sectionName);
    }
    if (options.includeFields && item.fldName) {
      return options.includeFields.includes(item.fldName);
    }
    if (options.excludeFields && item.fldName) {
      return !options.excludeFields.includes(item.fldName);
    }
    return true;
  }

  private formatItem(item: FieldItem, options: UIReadViewOptions): FieldItem {
    const formattedItem: FieldItem = { ...item };

    if (!options.includeOldValues) {
      delete formattedItem.oldValue;
    }

    if (!options.includeErrors) {
      delete formattedItem.errors;
    }

    if (formattedItem.fields) {
      formattedItem.fields = this.filterAndFormatReadView(formattedItem.fields, options);
    }

    return formattedItem;
  }
applyDefaultValuesRecursive(control: AbstractControl, storeOldValue: boolean): void {
    const extendedControl = control as ExtendedAbstractControl;
    
    if (control instanceof FormGroup) {
      if (extendedControl.dfltVal !== undefined && this.isFormGroupEmpty(control)) {
        if (storeOldValue) {
          extendedControl._oldValue = this.getFormGroupValue(control);
        }
        this.setFormGroupValue(control, extendedControl.dfltVal);
      } else {
        Object.values(control.controls).forEach(childControl => {
          this.applyDefaultValuesRecursive(childControl, storeOldValue);
        });
      }
    } else if (control instanceof FormArray) {
      control.controls.forEach(ctrl => {
        this.applyDefaultValuesRecursive(ctrl, storeOldValue);
      });
    } else if (extendedControl.dfltVal !== undefined && control.value === null) {
      if (storeOldValue) {
        extendedControl._oldValue = control.value;
      }
      control.setValue(extendedControl.dfltVal);
    }
  }

  private isFormGroupEmpty(group: FormGroup): boolean {
    return Object.values(group.controls).every(control =>
      control.value === null || control.value === ''
    );
  }

  private getFormGroupValue(group: FormGroup): any {
    const value: any = {};
    Object.entries(group.controls).forEach(([key, control]) => {
      value[key] = control.value;
    });
    return value;
  }

  private setFormGroupValue(group: FormGroup, value: any): void {
    if (typeof value === 'object' && value !== null) {
      Object.entries(value).forEach(([key, val]) => {
        if (group.get(key)) {
          group.get(key)!.setValue(val);
        }
      });
    }
  }

  getExtendedProperties(control: ExtendedAbstractControl): Partial<ExtendedControlOptions> {
    return {
      label: control.label,
      fldName: control.fldName,
      visible: control.visible,
      editable: control.editable,
      lookup: control.lookup,
      lookupData: control.lookupData,
      regex: control.regex,
      fldMax: control.fldMax,
      fieldType: control.fieldType,
      dfltVal: control.dfltVal,
      required: control.required,
      oldValue: control._oldValue,
      expand: control.expand,
      sectionName: control.sectionName,
      subSectionName: control.subSectionName,
      reqBorder: control.reqBorder,
      subName: control.subName,
      align: control.align,
      isArray: control.isArray
    };
  }

  addCustomValidator(control: AbstractControl, validator: ValidatorFn, customValidatorsCache: WeakMap<AbstractControl, ValidatorFn[]>): void {
    const currentValidators = customValidatorsCache.get(control) || [];
    currentValidators.push(validator);
    customValidatorsCache.set(control, currentValidators);
  }

  removeCustomValidator(control: AbstractControl, validator: ValidatorFn, customValidatorsCache: WeakMap<AbstractControl, ValidatorFn[]>): void {
    const currentValidators = customValidatorsCache.get(control) || [];
    const index = currentValidators.indexOf(validator);
    if (index > -1) {
      currentValidators.splice(index, 1);
      customValidatorsCache.set(control, currentValidators);
    }
  }

  handleArrayOperation(formArray: FormArray, operation: 'add' | 'remove', index?: number): void {
    const arrayExtendedControl = formArray as ExtendedAbstractControl;
    
    if (operation === 'add') {
      if (arrayExtendedControl.fieldType === 'arrayGroup') {
        const newGroup = this.createNewArrayGroupItem(formArray);
        formArray.push(newGroup);
      } else if (arrayExtendedControl.fieldType === 'arraySimple') {
        formArray.push(this.fb.control(null));
      }
    } else if (operation === 'remove' && index !== undefined) {
      formArray.removeAt(index);
    }
  }

  private createNewArrayGroupItem(formArray: FormArray): FormGroup {
    const template = (formArray.at(0) as FormGroup).controls;
    const newGroup = this.fb.group({});
    Object.entries(template).forEach(([key, control]) => {
      newGroup.addControl(key, this.fb.control(null, control.validator));
      // Extend the new control with the same properties as the template
      const templateExtendedControl = control as ExtendedAbstractControl;
      const newExtendedControl = newGroup.get(key) as ExtendedAbstractControl;
      Object.assign(newExtendedControl, this.getExtendedProperties(templateExtendedControl));
    });
    return newGroup;
  }

  getBasicReadViewForControl(control: AbstractControl): FieldItem[] {
    const item = this.createFieldItem({ 
      fldName: control instanceof FormGroup ? 'group' : 'control', 
      side: 'full', 
      seq: 0 
    }, control as FormGroup);
    
    if (!item) return [];

    if (control instanceof FormGroup || control instanceof FormArray) {
      item.fields = this.getFieldsReadViewItems(control);
    }

    return [item];
  }

  private getFieldsReadViewItems(control: FormGroup | FormArray): FieldItem[] {
    if (control instanceof FormGroup) {
      return Object.entries(control.controls).map(([key, childControl]) => 
        this.createFieldItem({ fldName: key, side: 'full', seq: 0 }, control)
      ).filter((item): item is FieldItem => item !== null);
    } else if (control instanceof FormArray) {
      return control.controls.map((childControl, index) => 
        this.createFieldItem({ fldName: index.toString(), side: 'full', seq: index }, control as FormGroup)
      ).filter((item): item is FieldItem => item !== null);
    }
    return [];
  }
}

---------
static

export const STATIC_COMPONENTS: string[] = [
  'StaticComponentOne',
  'StaticComponentTwo',
  'StaticComponentThree'
  // Add more static component names as needed
];

--------
extension serive

import { Injectable, signal, computed, Signal, effect, untracked } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, AbstractControl, ValidatorFn } from '@angular/forms';
import { ExtendedControlOptions, ExtendedAbstractControl, FieldItem, LayoutField, FormLayout, UIReadViewOptions } from './form-extension.types';
import { FormExtensionHelpers } from './form-extension.helpers';
import { STATIC_COMPONENTS } from './form-extension.constants';

@Injectable({
  providedIn: 'root'
})
export class FormExtensionService {
  private updateTrigger = signal(0);
  private readViewCache = new WeakMap<AbstractControl, Signal<FieldItem[]>>();
  private formLayouts = new WeakMap<FormGroup, FormLayout>();
  private extendedPropertiesCache = new WeakMap<AbstractControl, ExtendedControlOptions>();
  private customValidatorsCache = new WeakMap<AbstractControl, ValidatorFn[]>();

  constructor(
    private fb: FormBuilder,
    private helpers: FormExtensionHelpers
  ) {
    effect(() => {
      this.updateTrigger();
      this.clearCaches();
    });
  }

  extendControl(control: AbstractControl, options: ExtendedControlOptions): void {
    const extendedControl = control as ExtendedAbstractControl;
    let changed = this.helpers.updateControlProperties(extendedControl, options);

    if (changed) {
      if (control instanceof FormGroup || control instanceof FormArray) {
        this.helpers.extendNestedControls(control, this);
      }
      this.helpers.updateValidators(control, this.customValidatorsCache);
      this.triggerUpdate();
    }
  }

  updateControlProperty<K extends keyof ExtendedControlOptions>(
    control: AbstractControl,
    property: K,
    value: ExtendedControlOptions[K]
  ): void {
    const extendedControl = control as ExtendedAbstractControl;
    if (this.helpers.shouldUpdateProperty(extendedControl, property, value)) {
      extendedControl[property] = value as any;
      if (property === 'required' || property === 'regex') {
        this.helpers.updateValidators(control, this.customValidatorsCache);
      }
      this.triggerUpdate();
    }
  }

  setFormGroupLayout(formGroup: FormGroup, layout: FormLayout): void {
    const sortedLayout = this.helpers.sortFormLayout(layout);
    this.formLayouts.set(formGroup, sortedLayout);
    this.triggerUpdate();
  }

  getExtendedReadView(control: AbstractControl): Signal<FieldItem[]> {
    if (!this.readViewCache.has(control)) {
      const readViewSignal = computed(() => {
        this.updateTrigger();
        return untracked(() => this.helpers.getExtendedReadViewForControl(control, this.formLayouts));
      });
      this.readViewCache.set(control, readViewSignal);
    }
    return this.readViewCache.get(control)!;
  }

  registerCustomComputation(control: AbstractControl, computation: (control: AbstractControl, form: FormGroup) => any): void {
    (control as ExtendedAbstractControl)._customComputation = computation;
    this.triggerUpdate();
  }

  applyDefaultValues(control: AbstractControl, storeOldValue: boolean = false): void {
    this.helpers.applyDefaultValuesRecursive(control, storeOldValue);
    this.triggerUpdate();
  }

  getOldValue(control: AbstractControl): any | undefined {
    return (control as ExtendedAbstractControl)._oldValue;
  }

  getExtendedProperties(control: AbstractControl): Partial<ExtendedControlOptions> {
    if (!this.extendedPropertiesCache.has(control)) {
      const properties = this.helpers.getExtendedProperties(control as ExtendedAbstractControl);
      this.extendedPropertiesCache.set(control, properties);
    }
    return this.extendedPropertiesCache.get(control)!;
  }

  addCustomValidator(control: AbstractControl, validator: ValidatorFn): void {
    this.helpers.addCustomValidator(control, validator, this.customValidatorsCache);
    this.helpers.updateValidators(control, this.customValidatorsCache);
    this.triggerUpdate();
  }

  removeCustomValidator(control: AbstractControl, validator: ValidatorFn): void {
    this.helpers.removeCustomValidator(control, validator, this.customValidatorsCache);
    this.helpers.updateValidators(control, this.customValidatorsCache);
    this.triggerUpdate();
  }

  handleArrayOperation(formArray: FormArray, operation: 'add' | 'remove', index?: number): void {
    this.helpers.handleArrayOperation(formArray, operation, index);
    this.triggerUpdate();
  }

  isStaticComponentRegistered(componentName: string): boolean {
    return STATIC_COMPONENTS.includes(componentName);
  }

  getUIReadView(control: AbstractControl, options: UIReadViewOptions = {}): FieldItem[] {
    return this.helpers.getUIReadView(control, options);
  }

  private triggerUpdate(): void {
    this.updateTrigger.update(v => v + 1);
  }

  private clearCaches(): void {
    this.readViewCache = new WeakMap();
    this.extendedPropertiesCache = new WeakMap();
  }
}
