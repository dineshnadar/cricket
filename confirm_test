// libs/shared/confirmation/src/lib/confirmation.service.spec.ts
import { TestBed } from '@angular/core/testing';
import { ConfirmationService } from './confirmation.service';
import { DomSanitizer } from '@angular/platform-browser';

describe('ConfirmationService', () => {
  let service: ConfirmationService;
  let sanitizer: jasmine.SpyObj<DomSanitizer>;

  beforeEach(() => {
    const sanitizerSpy = jasmine.createSpyObj('DomSanitizer', ['sanitize']);
    
    TestBed.configureTestingModule({
      providers: [
        ConfirmationService,
        { provide: DomSanitizer, useValue: sanitizerSpy }
      ]
    });
    
    service = TestBed.inject(ConfirmationService);
    sanitizer = TestBed.inject(DomSanitizer) as jasmine.SpyObj<DomSanitizer>;
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should add a confirmation', () => {
    sanitizer.sanitize.and.returnValue('Sanitized Content');
    
    const id = service.confirm({
      id: 'test-id',
      header: 'Test Header',
      content: 'Test Content',
      accept: { action: jest.fn() }
    });

    expect(id).toBe('test-id');
    expect(service.activeConfirmations().length).toBe(1);
    expect(service.activeConfirmations()[0].header).toBe('Test Header');
    expect(service.activeConfirmations()[0].content).toBe('Sanitized Content');
  });

  it('should close a confirmation', () => {
    service.confirm({
      id: 'test-id',
      header: 'Test Header',
      content: 'Test Content',
      accept: { action: jest.fn() }
    });

    expect(service.activeConfirmations().length).toBe(1);

    service.close('test-id');

    expect(service.activeConfirmations().length).toBe(0);
  });

  it('should get confirmation by id', () => {
    service.confirm({
      id: 'test-id',
      header: 'Test Header',
      content: 'Test Content',
      accept: { action: jest.fn() }
    });

    const confirmation = service.getConfirmationById('test-id')();

    expect(confirmation).toBeTruthy();
    expect(confirmation?.header).toBe('Test Header');
  });

  it('should handle HTML content', () => {
    const htmlContent = '<p>Test <strong>HTML</strong></p>';
    sanitizer.sanitize.and.returnValue(htmlContent);

    service.confirm({
      id: 'html-test',
      header: 'HTML Test',
      content: htmlContent,
      ok: { action: jest.fn() }
    });

    const confirmation = service.getConfirmationById('html-test')();

    expect(confirmation?.content).toBe(htmlContent);
    expect(sanitizer.sanitize).toHaveBeenCalledWith(jasmine.any(Number), htmlContent);
  });
});

// libs/shared/confirmation/src/lib/confirmation-dialog/confirmation-dialog.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ConfirmationDialogComponent } from './confirmation-dialog.component';
import { ConfirmationService } from '../confirmation.service';
import { By } from '@angular/platform-browser';
import { ChangeDetectionStrategy } from '@angular/core';

describe('ConfirmationDialogComponent', () => {
  let component: ConfirmationDialogComponent;
  let fixture: ComponentFixture<ConfirmationDialogComponent>;
  let confirmationService: jasmine.SpyObj<ConfirmationService>;

  beforeEach(async () => {
    const confirmationServiceSpy = jasmine.createSpyObj('ConfirmationService', ['getConfirmationById', 'close']);
    
    await TestBed.configureTestingModule({
      imports: [ConfirmationDialogComponent],
      providers: [
        { provide: ConfirmationService, useValue: confirmationServiceSpy }
      ]
    }).overrideComponent(ConfirmationDialogComponent, {
      set: { changeDetection: ChangeDetectionStrategy.Default }
    }).compileComponents();

    confirmationService = TestBed.inject(ConfirmationService) as jasmine.SpyObj<ConfirmationService>;
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(ConfirmationDialogComponent);
    component = fixture.componentInstance;
    component.id = 'test-id';
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should display confirmation content when available', () => {
    const mockConfirmation = {
      id: 'test-id',
      header: 'Test Header',
      content: 'Test Content',
      buttons: [{ label: 'OK', action: jest.fn() }]
    };

    confirmationService.getConfirmationById.and.returnValue(() => mockConfirmation);

    fixture.detectChanges();

    const headerElement = fixture.debugElement.query(By.css('h2'));
    const contentElement = fixture.debugElement.query(By.css('.modal-content div'));
    const buttonElement = fixture.debugElement.query(By.css('button'));

    expect(headerElement.nativeElement.textContent).toBe('Test Header');
    expect(contentElement.nativeElement.innerHTML).toBe('Test Content');
    expect(buttonElement.nativeElement.textContent).toBe('OK');
  });

  it('should not display anything when no confirmation is available', () => {
    confirmationService.getConfirmationById.and.returnValue(() => undefined);

    fixture.detectChanges();

    const modalElement = fixture.debugElement.query(By.css('.modal'));
    expect(modalElement).toBeNull();
  });

  it('should call action and close when button is clicked', () => {
    const mockAction = jest.fn();
    const mockConfirmation = {
      id: 'test-id',
      header: 'Test Header',
      content: 'Test Content',
      buttons: [{ label: 'OK', action: mockAction }]
    };

    confirmationService.getConfirmationById.and.returnValue(() => mockConfirmation);

    fixture.detectChanges();

    const buttonElement = fixture.debugElement.query(By.css('button'));
    buttonElement.triggerEventHandler('click', null);

    expect(mockAction).toHaveBeenCalled();
    expect(confirmationService.close).toHaveBeenCalledWith('test-id');
  });
});
