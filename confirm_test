// libs/shared/confirmation/src/lib/confirmation-dialog/confirmation-dialog.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ConfirmationDialogComponent } from './confirmation-dialog.component';
import { ConfirmationService } from '../confirmation.service';
import { By } from '@angular/platform-browser';
import { ChangeDetectionStrategy, computed } from '@angular/core';

jest.mock('../confirmation.service');

describe('ConfirmationDialogComponent', () => {
  let component: ConfirmationDialogComponent;
  let fixture: ComponentFixture<ConfirmationDialogComponent>;
  let confirmationService: jest.Mocked<ConfirmationService>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ConfirmationDialogComponent],
      providers: [ConfirmationService]
    }).overrideComponent(ConfirmationDialogComponent, {
      set: { changeDetection: ChangeDetectionStrategy.Default }
    }).compileComponents();

    confirmationService = TestBed.inject(ConfirmationService) as jest.Mocked<ConfirmationService>;
    
    // Mock getConfirmationById to return a computed signal
    confirmationService.getConfirmationById.mockImplementation((id: string) => 
      computed(() => {
        if (id === 'test-id') {
          return {
            id: 'test-id',
            header: 'Test Header',
            content: 'Test Content',
            buttons: [{ label: 'OK', action: jest.fn() }]
          };
        }
        return undefined;
      })
    );
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(ConfirmationDialogComponent);
    component = fixture.componentInstance;
    component.id = 'test-id';
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should display confirmation content when available', () => {
    fixture.detectChanges();

    const headerElement = fixture.debugElement.query(By.css('h2'));
    const contentElement = fixture.debugElement.query(By.css('.modal-content div'));
    const buttonElement = fixture.debugElement.query(By.css('button'));

    expect(headerElement.nativeElement.textContent).toBe('Test Header');
    expect(contentElement.nativeElement.innerHTML).toBe('Test Content');
    expect(buttonElement.nativeElement.textContent).toBe('OK');
  });

  it('should not display anything when no confirmation is available', () => {
    component.id = 'non-existent-id';
    fixture.detectChanges();

    const modalElement = fixture.debugElement.query(By.css('.modal'));
    expect(modalElement).toBeNull();
  });

  it('should call action and close when button is clicked', () => {
    const mockAction = jest.fn();
    confirmationService.getConfirmationById.mockImplementation(() => 
      computed(() => ({
        id: 'test-id',
        header: 'Test Header',
        content: 'Test Content',
        buttons: [{ label: 'OK', action: mockAction }]
      }))
    );

    fixture.detectChanges();

    const buttonElement = fixture.debugElement.query(By.css('button'));
    buttonElement.triggerEventHandler('click', null);

    expect(mockAction).toHaveBeenCalled();
    expect(confirmationService.close).toHaveBeenCalledWith('test-id');
  });
});
