function deepGroupFields(fields, sortByLabel = false) {
  const grouped = { fieldsLeft: [], fieldsRight: [], fieldsFull: [] };
  let leftCount = 0, rightCount = 0;

  for (let i = 0; i < fields.length; i++) {
    const field = fields[i];
    
    // Assign seq if not present
    if (field.seq == null) field.seq = i;
    
    // Handle nested fields
    if (field.fields && field.fields.length > 0) {
      field.fieldType = 'nested';
      field.fields = deepGroupFields(field.fields, sortByLabel);
    }

    // Determine side
    let side = field.side;
    if (!side || (side !== 'left' && side !== 'right' && side !== 'full')) {
      side = leftCount <= rightCount ? 'left' : 'right';
      side === 'left' ? leftCount++ : rightCount++;
    }
    
    // Add to appropriate array
    grouped[`fields${side.charAt(0).toUpperCase() + side.slice(1)}`].push(field);
  }

  // Sort each group
  const sortFunction = sortByLabel
    ? (a, b) => a.label.localeCompare(b.label)
    : (a, b) => (a.seq ?? 0) - (b.seq ?? 0);

  for (const key in grouped) {
    grouped[key].sort(sortFunction);
    for (let i = 0; i < grouped[key].length; i++) {
      grouped[key][i].seq = i + 1;
    }
  }

  return grouped;
}

function optimizedGroupFieldsBySide(sections, sortByLabel = false) {
  return sections.map(section => ({
    ...section,
    ...deepGroupFields(section.fields, sortByLabel)
  }));
}

// Usage
const groupedSectionsBySeq = optimizedGroupFieldsBySide(originalSections, false);
const groupedSectionsByLabel = optimizedGroupFieldsBySide(originalSections, true);

console.time('grouping by seq');
optimizedGroupFieldsBySide(originalSections, false);
console.timeEnd('grouping by seq');

console.time('grouping by label');
optimizedGroupFieldsBySide(originalSections, true);
console.timeEnd('grouping by label');
