private renderFormAsTable(
  pdf: jsPDF,
  form: FormData,
  yPos: number,
  options: PDFGenerationOptions,
  leftMargin: number,
  rightMargin: number
): number {
  // Get page dimensions from the PDF instance
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // Get current page number
  let pageNum = 1;
  try {
    pageNum = pdf.internal.pages.length - 1 || 1;
  } catch (e) {
    pageNum = 1;
  }
  
  // Calculate available width for the table
  const availableWidth = pageWidth - leftMargin - rightMargin;
  
  // Calculate column widths in pixels
  const labelWidth = availableWidth * 0.4;
  const valueWidth = availableWidth * 0.6;
  
  // Add form title if provided
  if (form.title) {
    pdf.setFont('helvetica', 'bold');
    pdf.setFontSize(12);
    pdf.setTextColor(options.primaryColor || '#3366cc');
    pdf.text(form.title, leftMargin, yPos);
    yPos += 20;
    
    // Add subtitle if provided
    if (form.subtitle) {
      pdf.setFont('helvetica', 'italic');
      pdf.setFontSize(10);
      pdf.setTextColor(options.secondaryColor || '#666666');
      pdf.text(form.subtitle, leftMargin, yPos);
      yPos += 15;
    }
  }
  
  // Convert form fields to table rows
  const tableRows: any[][] = [];
  
  for (let i = 0; i < form.fields.length; i++) {
    const field = form.fields[i];
    
    // Check if this is a subheader field
    if (field.type === 'subheader') {
      // Add a subheader row (spans both columns)
      tableRows.push([{
        content: field.label,
        colSpan: 2,
        styles: { 
          fontStyle: 'bold', 
          textColor: options.secondaryColor || [100, 100, 100],
          cellPadding: { top: 5, bottom: 2 }
        }
      }]);
    } else {
      // Create the styles for both cells
      const labelStyles: any = { 
        fontStyle: 'bold', 
        halign: 'left'
      };
      
      const valueStyles: any = { 
        halign: 'right'
      };
      
      // If this field needs a divider, add bottom border to both cells
      if (field.addDivider) {
        // Add bottom border properties
        labelStyles.lineWidth = 0.5;
        labelStyles.lineColor = [220, 220, 220];
        labelStyles.cellPadding = { top: 5, right: 5, bottom: 10, left: 5 };
        
        valueStyles.lineWidth = 0.5;
        valueStyles.lineColor = [220, 220, 220];
        valueStyles.cellPadding = { top: 5, right: 5, bottom: 10, left: 5 };
        
        // Only draw the bottom border for both cells
        labelStyles.bottomLine = true;
        valueStyles.bottomLine = true;
      }
      
      // Add regular field as a row
      tableRows.push([
        { 
          content: `${field.label}:`, 
          styles: labelStyles
        },
        { 
          content: field.value, 
          styles: valueStyles
        }
      ]);
    }
    
    // Check for subheaders defined in subheaders array
    if (form.subheaders) {
      const subheader = form.subheaders.find(sh => sh.afterFieldIndex === i);
      if (subheader) {
        tableRows.push([{
          content: subheader.text,
          colSpan: 2,
          styles: { 
            fontStyle: 'bold', 
            textColor: options.secondaryColor || [100, 100, 100],
            cellPadding: { top: 10, bottom: 5 }
          }
        }]);
      }
    }
  }
  
  // Use autotable to render the form
  autoTable(pdf, {
    startY: yPos,
    body: tableRows,
    theme: 'plain',
    styles: {
      fontSize: 10,
      cellPadding: 5,
      lineWidth: 0 // No borders by default
    },
    columnStyles: {
      0: { cellWidth: labelWidth },
      1: { cellWidth: valueWidth }
    },
    margin: { left: leftMargin, right: rightMargin },
    showHead: false,
    didDrawPage: (data) => {
      // If a new page was created, add header and footer
      if (data.pageNumber > pageNum) {
        pageNum = data.pageNumber;
        
        if (options.includeHeader) {
          this.addHeaderToPDF(
            pdf, 
            pageWidth, 
            options.customerName || 'Customer', 
            new Date().toLocaleDateString(), 
            options.headerTitle || 'COMPANY NAME',
            options.primaryColor || '#3366cc', 
            options.companyLogo, 
            options.headerText
          );
        }
        
        if (options.includeFooter) {
          this.addFooterToPDF(
            pdf, 
            pageWidth, 
            pageHeight, 
            pageNum, 
            options.secondaryColor || '#666666', 
            options.footerOptions
          );
        }
      }
    }
  });
  
  // Return new Y position
  return (pdf as any).lastAutoTable.finalY + 10;
}
