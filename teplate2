if (item.type === 'form') {
  yPos = this.renderFormAsTable(pdf, item, yPos, options, leftMargin, rightMargin);
} else if (item.type === 'table') {
  // Existing table logic
}

// In your PDF service
private renderFormAsTable(
  pdf: jsPDF,
  form: FormData,
  yPos: number,
  options: PDFGenerationOptions,
  leftMargin: number,
  rightMargin: number
): number {
  // Add form title if provided
  if (form.title) {
    pdf.setFont('helvetica', 'bold');
    pdf.setFontSize(12);
    pdf.setTextColor(options.primaryColor || '#3366cc');
    pdf.text(form.title, leftMargin, yPos);
    yPos += 20;
  }
  
  // Convert form fields to table rows
  const tableRows: any[][] = [];
  let currentSubheader = null;
  
  for (let i = 0; i < form.fields.length; i++) {
    const field = form.fields[i];
    
    // Check if this is a subheader field
    if (field.type === 'subheader') {
      // Add a subheader row (spans both columns)
      tableRows.push([{ content: field.label, colSpan: 2, styles: { 
        fontStyle: 'bold', 
        textColor: options.secondaryColor || [100, 100, 100],
        cellPadding: { top: 5, bottom: 2 }
      }}]);
    } else {
      // Add regular field as a row
      tableRows.push([
        { content: `${field.label}:`, styles: { 
          fontStyle: 'bold', 
          halign: 'left'
        }},
        { content: field.value, styles: { 
          halign: 'right'
        }}
      ]);
      
      // Add a divider row if specified
      if (field.addDivider) {
        tableRows.push([{ content: '', colSpan: 2, styles: {
          cellPadding: { top: 0, bottom: 10 },
          cellWidth: 'auto'
        }}]);
      }
    }
    
    // Check for subheaders defined in subheaders array
    if (form.subheaders) {
      const subheader = form.subheaders.find(sh => sh.afterFieldIndex === i);
      if (subheader) {
        tableRows.push([{ content: subheader.text, colSpan: 2, styles: { 
          fontStyle: 'bold', 
          textColor: options.secondaryColor || [100, 100, 100],
          cellPadding: { top: 5, bottom: 2 }
        }}]);
      }
    }
  }
  
  // Use autotable to render the form
  autoTable(pdf, {
    startY: yPos,
    body: tableRows,
    theme: 'plain',
    styles: {
      fontSize: 10,
      cellPadding: 5
    },
    columnStyles: {
      0: { cellWidth: '40%' },
      1: { cellWidth: '60%' }
    },
    margin: { left: leftMargin, right: rightMargin },
    showHead: false,
    tableWidth: 'auto',
    didDrawPage: (data) => {
      // Add header and footer on new pages
      // (Similar to table rendering logic)
    }
  });
  
  // Return new Y position
  return (pdf as any).lastAutoTable.finalY + 10;
}
