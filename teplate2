// common-read-view.component.ts
import { Component, computed, input, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormExtensionService } from './form-extension.service';

interface FieldLayout {
  leftFields: any[];
  rightFields: any[];
  fullFields: any[];
  nestedSections: any[];
}

@Component({
  selector: 'app-common-read-view',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="read-view-container">
      @if (showControls()) {
        <div class="expand-controls">
          <button class="control-btn" (click)="toggleAll(true)">
            <span class="icon">+</span> Expand All
          </button>
          <button class="control-btn" (click)="toggleAll(false)">
            <span class="icon">−</span> Collapse All
          </button>
        </div>
      }

      @for (section of processedSections(); track section.fldName) {
        <section class="section-wrapper" [ngClass]="section.type">
          <!-- Section Header -->
          <ng-container [ngTemplateOutlet]="headerTemplate"
                       [ngTemplateOutletContext]="{ $implicit: section }"/>

          <!-- Section Content -->
          @if (!section.isDivider) {
            <div class="section-content" [class.expanded]="section.expand">
              <div class="content-grid">
                @if (section.layout.leftFields.length) {
                  <div class="left-column">
                    @for (field of section.layout.leftFields; track field.fldName) {
                      <ng-container [ngTemplateOutlet]="fieldTemplate"
                                  [ngTemplateOutletContext]="{ $implicit: field }"/>
                    }
                  </div>
                }

                @if (section.layout.rightFields.length) {
                  <div class="right-column">
                    @for (field of section.layout.rightFields; track field.fldName) {
                      <ng-container [ngTemplateOutlet]="fieldTemplate"
                                  [ngTemplateOutletContext]="{ $implicit: field }"/>
                    }
                  </div>
                }

                @if (section.layout.fullFields.length) {
                  <div class="full-width">
                    @for (field of section.layout.fullFields; track field.fldName) {
                      <ng-container [ngTemplateOutlet]="fieldTemplate"
                                  [ngTemplateOutletContext]="{ $implicit: field }"/>
                    }
                  </div>
                }

                @if (section.layout.nestedSections.length) {
                  <div class="nested-sections">
                    @for (nestedSection of section.layout.nestedSections; track nestedSection.fldName) {
                      <section class="nested-section">
                        <ng-container [ngTemplateOutlet]="sectionTemplate"
                                    [ngTemplateOutletContext]="{ $implicit: nestedSection }"/>
                      </section>
                    }
                  </div>
                }
              </div>
            </div>
          }
        </section>
      }
    </div>

    <!-- Header Template -->
    <ng-template #headerTemplate let-section>
      @switch (section.type) {
        @case ('leftHeader') {
          <div class="header single-header" [style.width]="section.labelWidth">
            <div class="header-content">
              <h3>{{section.leftHeader}}</h3>
              @if (isExpandable(section)) {
                <button class="expand-btn" (click)="toggleSection(section)">
                  {{section.expand ? '−' : '+'}}
                </button>
              }
            </div>
          </div>
        }
        @case ('leftRightHeader') {
          <div class="header dual-header">
            <div class="header-content">
              <div class="header-sides">
                <h3 class="left">{{section.leftHeader}}</h3>
                <h3 class="right">{{section.rightHeader}}</h3>
              </div>
              @if (isExpandable(section)) {
                <button class="expand-btn" (click)="toggleSection(section)">
                  {{section.expand ? '−' : '+'}}
                </button>
              }
            </div>
          </div>
        }
        @case ('commonHeader') {
          <div class="header common-header">
            <div class="header-content">
              <h3>{{section.commonHeader}}</h3>
              @if (isExpandable(section)) {
                <button class="expand-btn" (click)="toggleSection(section)">
                  {{section.expand ? '−' : '+'}}
                </button>
              }
            </div>
          </div>
        }
        @case ('accordion') {
          <div class="header accordion-header"
               [class.expanded]="section.expand"
               (click)="toggleSection(section)">
            <div class="header-content">
              <h3>{{section.accordionHeader}}</h3>
              <span class="expand-icon">{{section.expand ? '−' : '+'}}</span>
            </div>
          </div>
        }
        @case ('divider') {
          <div class="divider" [class]="section.dividerClass"></div>
        }
      }
    </ng-template>

    <!-- Section Template -->
    <ng-template #sectionTemplate let-section>
      <ng-container [ngTemplateOutlet]="headerTemplate"
                   [ngTemplateOutletContext]="{ $implicit: section }"/>
      
      @if (!section.isDivider) {
        <div class="section-content nested-content" [class.expanded]="section.expand">
          <div class="content-grid">
            <ng-container [ngTemplateOutlet]="contentTemplate"
                         [ngTemplateOutletContext]="{ $implicit: section }"/>
          </div>
        </div>
      }
    </ng-template>

    <!-- Content Template -->
    <ng-template #contentTemplate let-section>
      @if (section.layout.leftFields.length) {
        <div class="left-column">
          @for (field of section.layout.leftFields; track field.fldName) {
            <ng-container [ngTemplateOutlet]="fieldTemplate"
                         [ngTemplateOutletContext]="{ $implicit: field }"/>
          }
        </div>
      }

      @if (section.layout.rightFields.length) {
        <div class="right-column">
          @for (field of section.layout.rightFields; track field.fldName) {
            <ng-container [ngTemplateOutlet]="fieldTemplate"
                         [ngTemplateOutletContext]="{ $implicit: field }"/>
          }
        </div>
      }

      @if (section.layout.fullFields.length) {
        <div class="full-width">
          @for (field of section.layout.fullFields; track field.fldName) {
            <ng-container [ngTemplateOutlet]="fieldTemplate"
                         [ngTemplateOutletContext]="{ $implicit: field }"/>
          }
        </div>
      }
    </ng-template>

    <!-- Field Template -->
    <ng-template #fieldTemplate let-field>
      @if (field.isSubHeader) {
        <div class="sub-header">
          <h4>{{field.label}}</h4>
        </div>
      } @else if (field.isReqDivider) {
        <div class="req-divider">
          <span class="req-text">Required Information</span>
        </div>
      } @else if (field.isArray) {
        <div class="array-field">
          <label>{{field.label}}</label>
          @if (field.value?.length) {
            @for (item of field.value; track $index) {
              <div class="array-item">
                <div class="array-grid">
                  @for (childField of field.children; track childField.fldName) {
                    <div class="array-field-item" [class]="'array-' + childField.side">
                      <label>{{childField.label}}</label>
                      <div class="field-value">{{item[childField.name]}}</div>
                    </div>
                  }
                </div>
              </div>
            }
          }
        </div>
      } @else {
        <div class="field-container" [class.required]="field.required">
          <label>{{field.label}}</label>
          <div class="field-value" [class.invalid]="!field.isValid">
            @if (field.useHtml) {
              <div [innerHTML]="field.computedValue || field.value"></div>
            } @else {
              {{field.computedValue || field.value}}
            }
          </div>
          @if (field.errors) {
            <div class="field-error">{{field.errors | json}}</div>
          }
        </div>
      }
    </ng-template>
  `,
  styleUrls: ['./common-read-view.component.scss']
})
export class CommonReadViewComponent {
  private formExtension = inject(FormExtensionService);

  // Inputs
  readView = input.required<any[]>();
  containerClass = input('');
  showControls = input(true);
  enableSorting = input(true);

  // Computed sections with processed layout
  processedSections = computed(() => {
    return this.readView().map(section => ({
      ...section,
      layout: this.processLayout(section.fields || [])
    }));
  });

  private processLayout(items: any[]): FieldLayout {
    const layout: FieldLayout = {
      leftFields: [],
      rightFields: [],
      fullFields: [],
      nestedSections: []
    };

    let leftCount = 0;
    let rightCount = 0;

    // Assign sequence numbers based on index if not present
    const itemsWithSeq = items.map((item, index) => ({
      ...item,
      seq: item.seq ?? index
    }));

    // Apply sorting if enabled
    const itemsToProcess = this.enableSorting() 
      ? this.sortItems(itemsWithSeq)
      : itemsWithSeq;

    for (const item of itemsToProcess) {
      if (this.isSection(item)) {
        layout.nestedSections.push({
          ...item,
          layout: this.processLayout(item.fields || [])
        });
      } else {
        // Determine side placement with balanced distribution
        const side = this.determineFieldSide(item, leftCount, rightCount);
        
        switch (side) {
          case 'left':
            leftCount++;
            layout.leftFields.push(item);
            break;
          case 'right':
            rightCount++;
            layout.rightFields.push(item);
            break;
          case 'full':
            layout.fullFields.push(item);
            break;
        }
      }
    }

    return layout;
  }

  private determineFieldSide(field: any, leftCount: number, rightCount: number): 'left' | 'right' | 'full' {
    // First check if field has valid side value
    if (field.side && ['left', 'right', 'full'].includes(field.side)) {
      return field.side;
    }

    // If no valid side, distribute evenly between left and right
    return leftCount <= rightCount ? 'left' : 'right';
  }

  private sortItems(items: any[]): any[] {
    return [...items].sort((a, b) => a.seq - b.seq);
  }

  private isSection(item: any): boolean {
    return item.type && [
      'commonHeader',
      'leftHeader',
      'leftRightHeader',
      'accordion'
    ].includes(item.type);
  }

  isExpandable(section: any): boolean {
    return section.type !== 'divider' && 
           (section.type === 'accordion' || section.fields?.length > 0);
  }

  toggleSection(section: any): void {
    this.formExtension.updateControlProperty(section, 'expand', !section.expand);
  }

  toggleAll(expand: boolean): void {
    const processSection = (section: any) => {
      if (this.isExpandable(section)) {
        this.formExtension.updateControlProperty(section, 'expand', expand);
      }
      
      if (section.fields) {
        section.fields.forEach((field: any) => {
          if (this.isSection(field)) {
            processSection(field);
          }
        });
      }

      if (section.layout?.nestedSections) {
        section.layout.nestedSections.forEach((nestedSection: any) => {
          processSection(nestedSection);
        });
      }
    };

    this.readView().forEach(processSection);
  }


-----
// common-read-view.component.scss

:host {
  display: block;
  width: 100%;
}

.read-view-container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
}

.expand-controls {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;
  padding: 0.5rem;
  background: #f8f9fa;
  border-radius: 4px;
}

.control-btn {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  border: 1px solid #dee2e6;
  border-radius: 4px;
  background: white;
  cursor: pointer;
  transition: all 0.2s;

  &:hover {
    background: #e9ecef;
  }
}

.section-wrapper {
  margin-bottom: 1rem;
  background: white;
  border-radius: 8px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem;
}

.header-sides {
  display: flex;
  justify-content: space-between;
  width: 100%;
}

.expand-btn {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  padding: 0 0.5rem;
  color: #666;
}

.content-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 1.5rem;
  padding: 1.5rem;
}

.section-content {
  max-height: 0;
  overflow: hidden;
  opacity: 0;
  transition: all 0.3s ease-out;

  &.expanded {
    max-height: 2000px;
    opacity: 1;
    transition: all 0.5s ease-in;
  }
}

.full-width {
  grid-column: 1 / -1;
}

.nested-section {
  margin-top: 1rem;
  padding: 1rem;
  background: #f8f9fa;
  border-radius: 6px;
  border: 1px solid #e9ecef;
}

.field-container {
  margin-bottom: 1rem;

  label {
    display: block;
    font-weight: 500;
    margin-bottom: 0.5rem;
    color: #666;
  }

  &.required label::after {
    content: "*";
    color: #dc3545;
    margin-left: 4px;
  }
}

.field-value {
  padding: 0.5rem;
  background: #f8f9fa;
  border-radius: 4px;
  min-height: 1.5rem;

  &.invalid {
    border: 1px solid #dc3545;
  }
}

.field-error {
  color: #dc3545;
  font-size: 0.875rem;
  margin-top: 0.25rem;
}

.array-field {
  margin-bottom: 1.5rem;

  label {
    display: block;
    font-weight: 500;
    margin-bottom: 0.5rem;
  }
}

.array-item {
  margin: 1rem 0;
  padding: 1rem;
  background: white;
  border-radius: 4px;
  border-left: 3px solid #0d6efd;
}

.array-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 1rem;

  .array-field-item {
    &.array-full {
      grid-column: 1 / -1;
    }

    label {
      font-weight: normal;
      color: #666;
    }
  }
}

.sub-header {
  grid-column: 1 / -1;
  margin: 1rem 0;
  padding-bottom: 0.5rem;
  border-bottom: 2px solid #e9ecef;

  h4 {
    margin: 0;
    color: #495057;
  }
}

.req-divider {
  grid-column: 1 / -1;
  text-align: center;
  margin: 1rem 0;
  position: relative;

  &::before {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    top: 50%;
    height: 1px;
    background: #dee2e6;
    z-index: 0;
  }

  .req-text {
    background: white;
    padding: 0 1rem;
    color: #666;
    position: relative;
    z-index: 1;
  }
}

.divider {
  height: 1px;
  background: #dee2e6;
  margin: 2rem 0;

  &.thick {
    height: 2px;
  }

  &.dashed {
    border-top: 1px dashed #dee2e6;
    background: none;
  }
}

.header {
  &.common-header,
  &.single-header,
  &.dual-header {
    border-bottom: 1px solid #dee2e6;
  }

  h3 {
    margin: 0;
    color: #212529;
    font-size: 1.25rem;
    font-weight: 500;
  }
}

.accordion-header {
  cursor: pointer;
  transition: background-color 0.2s;

  &:hover {
    background-color: #f8f9fa;
  }

  &.expanded {
    background-color: #e9ecef;
  }

  .expand-icon {
    font-size: 1.5rem;
    color: #666;
    transition: transform 0.3s;
  }

  &.expanded .expand-icon {
    transform: rotate(180deg);
  }
}

.nested-sections {
  grid-column: 1 / -1;
  
  .nested-section + .nested-section {
    margin-top: 1rem;
  }
}

.nested-content {
  padding: 0;

  &.expanded {
    padding: 1rem 0;
  }
}

@media (max-width: 768px) {
  .content-grid {
    grid-template-columns: 1fr;
  }

  .array-grid {
    grid-template-columns: 1fr;
  }

  .left-column,
  .right-column {
    grid-column: 1 / -1;
  }

  .header-sides {
    flex-direction: column;
    gap: 0.5rem;
  }

  .expand-controls {
    flex-direction: column;
  }
}
}

--------


@Component({
  // ... template remains same ...
})
export class CommonReadViewComponent {
  private formExtension = inject(FormExtensionService);

  readView = input.required<any[]>();
  containerClass = input('');
  showControls = input(true);
  enableSorting = input(true);

  processedSections = computed(() => {
    return this.readView().map(section => ({
      ...section,
      layout: this.processLayout(section.fields || [])
    }));
  });

  private processLayout(items: any[]): FieldLayout {
    const layout: FieldLayout = {
      leftFields: [],
      rightFields: [],
      fullFields: [],
      nestedSections: []
    };

    let leftCount = 0;
    let rightCount = 0;

    // Assign sequence numbers if not present
    const itemsWithSeq = items.map((item, index) => ({
      ...item,
      seq: item.seq ?? index,
      // Process array fields' children
      ...(item.isArray && item.fields ? {
        fields: item.fields.map((field: any, idx: number) => ({
          ...field,
          seq: field.seq ?? idx
        }))
      } : {})
    }));

    // Apply sorting if enabled
    const itemsToProcess = this.enableSorting() 
      ? this.sortItems(itemsWithSeq)
      : itemsWithSeq;

    for (const item of itemsToProcess) {
      if (this.isSection(item)) {
        layout.nestedSections.push({
          ...item,
          layout: this.processLayout(item.fields || [])
        });
      } else {
        // Determine side placement with balanced distribution
        const side = this.determineFieldSide(item, leftCount, rightCount);
        
        // If field has its own fields, process their layout
        const processedItem = {
          ...item,
          ...(item.fields?.length ? { layout: this.processLayout(item.fields) } : {})
        };

        switch (side) {
          case 'left':
            leftCount++;
            layout.leftFields.push(processedItem);
            break;
          case 'right':
            rightCount++;
            layout.rightFields.push(processedItem);
            break;
          case 'full':
            layout.fullFields.push(processedItem);
            break;
        }
      }
    }

    return layout;
  }

  private determineFieldSide(field: any, leftCount: number, rightCount: number): 'left' | 'right' | 'full' {
    if (field.side && ['left', 'right', 'full'].includes(field.side)) {
      return field.side;
    }
    return leftCount <= rightCount ? 'left' : 'right';
  }

  private sortItems(items: any[]): any[] {
    return [...items].sort((a, b) => a.seq - b.seq);
  }

  private isSection(item: any): boolean {
    return item.type && [
      'commonHeader',
      'leftHeader',
      'leftRightHeader',
      'accordion'
    ].includes(item.type);
  }

  isExpandable(section: any): boolean {
    return section.type !== 'divider' && 
           (section.type === 'accordion' || section.fields?.length > 0);
  }

  toggleSection(section: any): void {
    if (this.isExpandable(section)) {
      this.formExtension.updateControlProperty(section, 'expand', !section.expand);
    }
  }

  toggleAll(expand: boolean): void {
    const processSection = (section: any) => {
      if (this.isExpandable(section)) {
        this.formExtension.updateControlProperty(section, 'expand', expand);
      }
      
      if (section.fields) {
        section.fields.forEach((field: any) => {
          if (this.isSection(field)) {
            processSection(field);
          }
        });
      }

      if (section.layout?.nestedSections) {
        section.layout.nestedSections.forEach((nestedSection: any) => {
          processSection(nestedSection);
        });
      }
    };

    this.readView().forEach(section => {
      processSection(section);
    });
  }
}
