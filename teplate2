// pdf-generator.component.ts
import { Component, OnInit, OnDestroy } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { PdfService, PDFContent, FormData, TableData } from '../services/pdf.service';
import { Subject } from 'rxjs';
import { takeUntil, finalize } from 'rxjs/operators';

interface Product {
  id: number;
  name: string;
  quantity: number;
  price: number;
}

@Component({
  selector: 'app-pdf-generator',
  templateUrl: './pdf-generator.component.html',
  styleUrls: ['./pdf-generator.component.scss']
})
export class PdfGeneratorComponent implements OnInit, OnDestroy {
  customerForm: FormGroup;
  productForm: FormGroup;
  products: Product[] = [];
  isGenerating = false;
  notes: string = '';
  
  // Color selection options
  colorOptions = [
    { name: 'Blue', value: '#3366cc' },
    { name: 'Green', value: '#339933' },
    { name: 'Red', value: '#cc3333' },
    { name: 'Purple', value: '#9933cc' }
  ];
  
  private destroy$ = new Subject<void>();
  
  constructor(
    private fb: FormBuilder,
    private pdfService: PdfService
  ) {
    // Initialize the customer form
    this.customerForm = this.fb.group({
      name: ['John Doe', [Validators.required]],
      email: ['john@example.com', [Validators.required, Validators.email]],
      phone: ['(123) 456-7890', [Validators.required]],
      address: ['123 Main St, Anytown, ST 12345'],
      category: ['premium', [Validators.required]]
    });
    
    // Initialize the product form
    this.productForm = this.fb.group({
      name: ['', [Validators.required]],
      quantity: [1, [Validators.required, Validators.min(1)]],
      price: [0, [Validators.required, Validators.min(0)]]
    });
    
    // Add some initial products
    this.products = [
      { id: 1, name: 'Laptop', quantity: 2, price: 800 },
      { id: 2, name: 'Mouse', quantity: 5, price: 20 },
      { id: 3, name: 'Keyboard', quantity: 3, price: 50 }
    ];
  }

  ngOnInit(): void {}

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }
  
  addProduct(): void {
    if (this.productForm.valid) {
      const product = this.productForm.value;
      const newId = this.products.length > 0 
        ? Math.max(...this.products.map(p => p.id)) + 1 
        : 1;
      
      this.products.push({
        id: newId,
        name: product.name,
        quantity: product.quantity,
        price: product.price
      });
      
      // Reset the form
      this.productForm.reset({
        name: '',
        quantity: 1,
        price: 0
      });
    }
  }
  
  removeProduct(id: number): void {
    this.products = this.products.filter(p => p.id !== id);
  }
  
  getTotal(product: Product): number {
    return product.quantity * product.price;
  }
  
  getOrderTotal(): number {
    return this.products.reduce((sum, product) => 
      sum + this.getTotal(product), 0);
  }
  
  generatePDF(): void {
    if (this.isGenerating || !this.customerForm.valid) {
      return;
    }
    
    this.isGenerating = true;
    
    // Prepare customer form data
    const customer = this.customerForm.value;
    const customerFields: FormData = {
      title: 'Customer Information',
      fields: [
        { label: 'Name', value: customer.name },
        { label: 'Email', value: customer.email },
        { label: 'Phone', value: customer.phone }
      ]
    };
    
    // Add address if provided
    if (customer.address) {
      customerFields.fields.push({ label: 'Address', value: customer.address });
    }
    
    // Add category with formatted text
    let categoryText = 'Standard';
    if (customer.category === 'premium') {
      categoryText = 'Premium';
    } else if (customer.category === 'basic') {
      categoryText = 'Basic';
    }
    customerFields.fields.push({ label: 'Customer Category', value: categoryText });
    
    // Prepare order table data
    const orderTableData: TableData = {
      title: 'Order Details',
      headers: ['Product', 'Quantity', 'Price', 'Total'],
      rows: this.products.map(product => [
        product.name,
        product.quantity.toString(),
        `$${product.price.toFixed(2)}`,
        `$${this.getTotal(product).toFixed(2)}`
      ])
    };
    
    // Prepare summary data
    const summaryData = [
      { label: 'Total Items', value: this.products.reduce((sum, p) => sum + p.quantity, 0).toString() },
      { label: 'Order Total', value: `$${this.getOrderTotal().toFixed(2)}` }
    ];
    
    // Create PDF content structure
    const pdfContent: PDFContent = {
      forms: [customerFields],
      tables: [orderTableData],
      summary: summaryData
    };
    
    // Add notes if provided
    if (this.notes && this.notes.trim()) {
      pdfContent.notes = this.notes;
    }
    
    // Generate the PDF
    this.pdfService.generateDataPDF(pdfContent, {
      headerTitle: 'ACME CORPORATION',
      customerName: customer.name,
      filename: `${customer.name.replace(/\s+/g, '_').toLowerCase()}_order.pdf`,
      primaryColor: this.colorOptions[0].value, // Default to first color
      includeHeader: true,
      includeFooter: true
    })
    .pipe(
      takeUntil(this.destroy$),
      finalize(() => this.isGenerating = false)
    )
    .subscribe({
      error: (err) => {
        console.error('PDF generation failed:', err);
        this.isGenerating = false;
      }
    });
  }
  
  customerFormIsValid(): boolean {
    return this.customerForm.valid;
  }
  
  productFormIsValid(): boolean {
    return this.productForm.valid;
  }
  
  hasProducts(): boolean {
    return this.products.length > 0;
  }
}

// pdf-generator.component.html
<div class="container">
  <h1>PDF Generator</h1>
  
  <!-- Customer Information Form -->
  <div class="card">
    <div class="card-header">
      <h2>Customer Information</h2>
    </div>
    <div class="card-body">
      <form [formGroup]="customerForm">
        <div class="form-row">
          <div class="form-group col-md-6">
            <label for="name">Name</label>
            <input type="text" id="name" formControlName="name" class="form-control" 
                   [ngClass]="{'is-invalid': customerForm.get('name')?.invalid && customerForm.get('name')?.touched}">
            <div class="invalid-feedback" *ngIf="customerForm.get('name')?.invalid && customerForm.get('name')?.touched">
              Name is required
            </div>
          </div>
          
          <div class="form-group col-md-6">
            <label for="email">Email</label>
            <input type="email" id="email" formControlName="email" class="form-control"
                   [ngClass]="{'is-invalid': customerForm.get('email')?.invalid && customerForm.get('email')?.touched}">
            <div class="invalid-feedback" *ngIf="customerForm.get('email')?.invalid && customerForm.get('email')?.touched">
              Valid email is required
            </div>
          </div>
        </div>
        
        <div class="form-row">
          <div class="form-group col-md-6">
            <label for="phone">Phone</label>
            <input type="text" id="phone" formControlName="phone" class="form-control"
                   [ngClass]="{'is-invalid': customerForm.get('phone')?.invalid && customerForm.get('phone')?.touched}">
            <div class="invalid-feedback" *ngIf="customerForm.get('phone')?.invalid && customerForm.get('phone')?.touched">
              Phone number is required
            </div>
          </div>
          
          <div class="form-group col-md-6">
            <label for="category">Category</label>
            <select id="category" formControlName="category" class="form-control">
              <option value="premium">Premium</option>
              <option value="standard">Standard</option>
              <option value="basic">Basic</option>
            </select>
          </div>
        </div>
        
        <div class="form-group">
          <label for="address">Address</label>
          <input type="text" id="address" formControlName="address" class="form-control">
        </div>
      </form>
    </div>
  </div>
  
  <!-- Products Section -->
  <div class="card mt-4">
    <div class="card-header">
      <h2>Order Details</h2>
    </div>
    <div class="card-body">
      <!-- Add Product Form -->
      <form [formGroup]="productForm" (ngSubmit)="addProduct()">
        <div class="form-row">
          <div class="form-group col-md-5">
            <label for="productName">Product Name</label>
            <input type="text" id="productName" formControlName="name" class="form-control"
                   [ngClass]="{'is-invalid': productForm.get('name')?.invalid && productForm.get('name')?.touched}">
          </div>
          
          <div class="form-group col-md-3">
            <label for="quantity">Quantity</label>
            <input type="number" id="quantity" formControlName="quantity" class="form-control" min="1"
                   [ngClass]="{'is-invalid': productForm.get('quantity')?.invalid && productForm.get('quantity')?.touched}">
          </div>
          
          <div class="form-group col-md-3">
            <label for="price">Price</label>
            <div class="input-group">
              <div class="input-group-prepend">
                <span class="input-group-text">$</span>
              </div>
              <input type="number" id="price" formControlName="price" class="form-control" step="0.01" min="0"
                     [ngClass]="{'is-invalid': productForm.get('price')?.invalid && productForm.get('price')?.touched}">
            </div>
          </div>
          
          <div class="form-group col-md-1 d-flex align-items-end">
            <button type="submit" class="btn btn-primary" [disabled]="!productFormIsValid()">Add</button>
          </div>
        </div>
      </form>
      
      <!-- Products Table -->
      <div class="table-responsive mt-3">
        <table class="table table-striped">
          <thead>
            <tr>
              <th>Product</th>
              <th>Quantity</th>
              <th>Price</th>
              <th>Total</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            <tr *ngFor="let product of products">
              <td>{{ product.name }}</td>
              <td>{{ product.quantity }}</td>
              <td>${{ product.price.toFixed(2) }}</td>
              <td>${{ getTotal(product).toFixed(2) }}</td>
              <td>
                <button class="btn btn-sm btn-danger" (click)="removeProduct(product.id)">Remove</button>
              </td>
            </tr>
            <tr *ngIf="products.length === 0">
              <td colspan="5" class="text-center">No products added</td>
            </tr>
            <tr *ngIf="products.length > 0" class="table-active">
              <td colspan="3" class="text-right"><strong>Order Total:</strong></td>
              <td><strong>${{ getOrderTotal().toFixed(2) }}</strong></td>
              <td></td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
  
  <!-- Notes Section -->
  <div class="card mt-4">
    <div class="card-header">
      <h2>Additional Notes</h2>
    </div>
    <div class="card-body">
      <textarea class="form-control" rows="3" [(ngModel)]="notes" 
                placeholder="Enter any additional notes here..."></textarea>
    </div>
  </div>
  
  <!-- Generate PDF Button -->
  <div class="text-center mt-4 mb-5">
    <button class="btn btn-lg btn-success" 
            [disabled]="isGenerating || !customerFormIsValid() || !hasProducts()" 
            (click)="generatePDF()">
      <span *ngIf="isGenerating" class="spinner-border spinner-border-sm mr-2" role="status" aria-hidden="true"></span>
      {{ isGenerating ? 'Generating PDF...' : 'Generate PDF' }}
    </button>
  </div>
</div>

// pdf-generator.component.scss
.container {
  max-width: 900px;
  margin: 0
