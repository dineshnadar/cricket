// libs/utils/src/index.ts

import {
  chunk, uniq, flatten, intersection, difference, filter, find, map, sortBy, groupBy,
  pick, omit, merge, cloneDeep,
  camelCase, snakeCase, kebabCase, startCase,
  clamp, random,
  debounce, throttle, memoize
} from 'lodash';

// Array utilities
export const arrayUtils = {
  chunk,
  uniq,
  flatten,
  intersection,
  difference,
  filterArray: filter,
  findInArray: find,
  mapArray: map,
  sortArray: sortBy,
  groupByArray: groupBy,
  uniqArray: uniq,
  compact: <T>(array: T[]): T[] => array.filter(Boolean),
  groupBySize: <T>(array: T[], size: number): T[][] => {
    return array.reduce((acc, _, i) => {
      if (i % size === 0) acc.push(array.slice(i, i + size));
      return acc;
    }, [] as T[][]);
  },
  shuffle: <T>(array: T[]): T[] => {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  },
};

// Object utilities
export const objectUtils = {
  pick,
  omit,
  merge,
  cloneDeep,
  get: <T>(obj: any, path: string, defaultValue: T): T => {
    const travel = (regexp: RegExp) =>
      String.prototype.split
        .call(path, regexp)
        .filter(Boolean)
        .reduce((res, key) => (res !== null && res !== undefined ? res[key] : res), obj);
    const result = travel(/[,[\]]+?/) || travel(/[,[\].]+?/);
    return result === undefined || result === obj ? defaultValue : result;
  },
  invert: <T extends Record<string, string>>(obj: T): { [K in keyof T as T[K]]: K } => {
    return Object.entries(obj).reduce((acc, [key, value]) => {
      acc[value as T[keyof T]] = key as keyof T;
      return acc;
    }, {} as { [K in keyof T as T[K]]: K });
  },
};

// String utilities
export const stringUtils = {
  camelCase,
  snakeCase,
  kebabCase,
  startCase,
  capitalize: (str: string): string => str.charAt(0).toUpperCase() + str.slice(1),
  reverse: (str: string): string => str.split('').reverse().join(''),
  isPalindrome: (str: string): boolean => {
    const normalized = str.toLowerCase().replace(/[^a-z0-9]/g, '');
    return normalized === normalized.split('').reverse().join('');
  },
  truncate: (str: string, length: number, ending: string = '...'): string => {
    if (str.length > length) {
      return str.substring(0, length - ending.length) + ending;
    }
    return str;
  },
};

// Number utilities
export const numberUtils = {
  clamp,
  random,
  round: (num: number, decimals: number): number => {
    return Number(Math.round(Number(num + 'e' + decimals)) + 'e-' + decimals);
  },
  formatCurrency: (num: number, currency: string = 'USD', locale: string = 'en-US'): string => {
    return new Intl.NumberFormat(locale, { style: 'currency', currency }).format(num);
  },
};

// Function utilities
export const functionUtils = {
  debounce,
  throttle,
  memoize,
  negate: <T>(predicate: (value: T) => boolean) => (value: T): boolean => !predicate(value),
  once: <T extends (...args: any[]) => any>(fn: T): T => {
    let result: ReturnType<T>;
    let called = false;
    return ((...args: Parameters<T>): ReturnType<T> => {
      if (!called) {
        called = true;
        result = fn(...args);
      }
      return result;
    }) as T;
  },
};

// Crypto utilities
export const cryptoUtils = {
  generateGuid: (timestamp: number = Date.now()): string => {
    const hexTimestamp = timestamp.toString(16);
    const randomPart = () => Math.floor(Math.random() * 16).toString(16);
    
    const guidTemplate = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
    let index = 0;
    
    return guidTemplate.replace(/[xy]/g, (c) => {
      const r = (index < hexTimestamp.length) 
        ? parseInt(hexTimestamp[index++], 16) 
        : Math.random() * 16 | 0;
      const v = c === 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  },
};

// JSON utilities
export const jsonUtils = {
  compareJSON: (obj1: any, obj2: any): boolean => {
    return JSON.stringify(obj1) === JSON.stringify(obj2);
  },
  findJSONDifference: (obj1: any, obj2: any): object => {
    const result: {[key: string]: any} = {};

    const compareValues = (value1: any, value2: any, key: string) => {
      if (Array.isArray(value1) && Array.isArray(value2)) {
        if (value1.length !== value2.length) {
          result[key] = { obj1: value1, obj2: value2 };
        } else {
          const arrayDiff = value1.reduce((acc: any, _, index) => {
            const diff = jsonUtils.findJSONDifference(value1[index], value2[index]);
            if (Object.keys(diff).length > 0) {
              acc[index] = diff;
            }
            return acc;
          }, {});
          if (Object.keys(arrayDiff).length > 0) {
            result[key] = arrayDiff;
          }
        }
      } else if (typeof value1 === 'object' && value1 !== null && typeof value2 === 'object' && value2 !== null) {
        const nestedDiff = jsonUtils.findJSONDifference(value1, value2);
        if (Object.keys(nestedDiff).length > 0) {
          result[key] = nestedDiff;
        }
      } else if (value1 !== value2) {
        result[key] = { obj1: value1, obj2: value2 };
      }
    };

    for (const key in obj1) {
      if (obj1.hasOwnProperty(key)) {
        if (obj2.hasOwnProperty(key)) {
          compareValues(obj1[key], obj2[key], key);
        } else {
          result[key] = { obj1: obj1[key], obj2: undefined };
        }
      }
    }

    for (const key in obj2) {
      if (obj2.hasOwnProperty(key) && !obj1.hasOwnProperty(key)) {
        result[key] = { obj1: undefined, obj2: obj2[key] };
      }
    }

    return result;
  },
  hasDifference: (obj1: any, obj2: any): boolean => {
    return Object.keys(jsonUtils.findJSONDifference(obj1, obj2)).length > 0;
  },
};

// Common utilities
export const commonUtils = {
  isEmpty: (value: any): boolean => {
    if (value == null) {
      return true;
    }
    if (typeof value === 'string' || Array.isArray(value)) {
      return value.length === 0;
    }
    if (typeof value === 'object') {
      return Object.keys(value).length === 0;
    }
    return false;
  },
};

// Performance evaluation utility
export const performanceUtils = {
  measureExecutionTime: <T>(fn: () => T): [T, number] => {
    const start = performance.now();
    const result = fn();
    const end = performance.now();
    return [result, end - start];
  },
};

// Combine all utilities
export const utils = {
  ...arrayUtils,
  ...objectUtils,
  ...stringUtils,
  ...numberUtils,
  ...functionUtils,
  ...cryptoUtils,
  ...jsonUtils,
  ...commonUtils,
  ...performanceUtils,
};

export default utils;

--------
// utils.test.ts

import {
  arrayUtils,
  objectUtils,
  stringUtils,
  numberUtils,
  functionUtils,
  cryptoUtils,
  jsonUtils,
  commonUtils,
  performanceUtils
} from '@your-workspace/utils';

describe('Array Utilities', () => {
  test('chunk should split array into chunks', () => {
    expect(arrayUtils.chunk([1, 2, 3, 4, 5], 2)).toEqual([[1, 2], [3, 4], [5]]);
  });

  test('uniq should remove duplicates', () => {
    expect(arrayUtils.uniq([1, 2, 2, 3, 4, 4, 5])).toEqual([1, 2, 3, 4, 5]);
  });

  test('shuffle should randomize array elements', () => {
    const original = [1, 2, 3, 4, 5];
    const shuffled = arrayUtils.shuffle([...original]);
    expect(shuffled).not.toEqual(original);
    expect(shuffled.sort()).toEqual(original);
  });
});

describe('Object Utilities', () => {
  test('pick should select specific properties', () => {
    expect(objectUtils.pick({ a: 1, b: 2, c: 3 }, ['a', 'c'])).toEqual({ a: 1, c: 3 });
  });

  test('omit should exclude specific properties', () => {
    expect(objectUtils.omit({ a: 1, b: 2, c: 3 }, ['b'])).toEqual({ a: 1, c: 3 });
  });

  test('get should retrieve nested properties safely', () => {
    const obj = { a: { b: { c: 42 } } };
    expect(objectUtils.get(obj, 'a.b.c', 0)).toBe(42);
    expect(objectUtils.get(obj, 'a.b.d', 0)).toBe(0);
  });
});

describe('String Utilities', () => {
  test('camelCase should convert string to camel case', () => {
    expect(stringUtils.camelCase('hello world')).toBe('helloWorld');
  });

  test('truncate should shorten string with ellipsis', () => {
    expect(stringUtils.truncate('hello world', 8)).toBe('hello...');
  });

  test('isPalindrome should detect palindromes', () => {
    expect(stringUtils.isPalindrome('A man a plan a canal Panama')).toBe(true);
    expect(stringUtils.isPalindrome('hello')).toBe(false);
  });
});

describe('Number Utilities', () => {
  test('clamp should restrict number to range', () => {
    expect(numberUtils.clamp(10, 0, 5)).toBe(5);
    expect(numberUtils.clamp(-1, 0, 5)).toBe(0);
    expect(numberUtils.clamp(3, 0, 5)).toBe(3);
  });

  test('round should round to specified decimal places', () => {
    expect(numberUtils.round(3.14159, 2)).toBe(3.14);
  });

  test('formatCurrency should format number as currency', () => {
    expect(numberUtils.formatCurrency(1234.56, 'USD', 'en-US')).toBe('$1,234.56');
  });
});

describe('Function Utilities', () => {
  test('debounce should delay function execution', (done) => {
    let calls = 0;
    const debouncedFn = functionUtils.debounce(() => { calls++; }, 50);
    debouncedFn();
    debouncedFn();
    setTimeout(() => {
      expect(calls).toBe(1);
      done();
    }, 100);
  });

  test('once should ensure function is called only once', () => {
    let calls = 0;
    const onceFn = functionUtils.once(() => { calls++; });
    onceFn();
    onceFn();
    onceFn();
    expect(calls).toBe(1);
  });
});

describe('Crypto Utilities', () => {
  test('generateGuid should create unique identifiers', () => {
    const guid1 = cryptoUtils.generateGuid();
    const guid2 = cryptoUtils.generateGuid();
    expect(guid1).not.toBe(guid2);
    expect(guid1).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);
  });
});

describe('JSON Utilities', () => {
  const obj1 = { a: 1, b: [1, 2, 3], c: { d: 4 } };
  const obj2 = { a: 1, b: [1, 2, 4], c: { d: 5 }, e: 6 };

  test('compareJSON should correctly compare objects', () => {
    expect(jsonUtils.compareJSON(obj1, obj2)).toBe(false);
    expect(jsonUtils.compareJSON(obj1, { ...obj1 })).toBe(true);
  });

  test('findJSONDifference should identify differences', () => {
    const diff = jsonUtils.findJSONDifference(obj1, obj2);
    expect(diff).toEqual({
      b: { 2: { obj1: 3, obj2: 4 } },
      c: { d: { obj1: 4, obj2: 5 } },
      e: { obj1: undefined, obj2: 6 }
    });
  });

  test('hasDifference should detect any differences', () => {
    expect(jsonUtils.hasDifference(obj1, obj2)).toBe(true);
    expect(jsonUtils.hasDifference(obj1, { ...obj1 })).toBe(false);
  });
});

describe('Common Utilities', () => {
  test('isEmpty should correctly identify empty values', () => {
    expect(commonUtils.isEmpty([])).toBe(true);
    expect(commonUtils.isEmpty({})).toBe(true);
    expect(commonUtils.isEmpty('')).toBe(true);
    expect(commonUtils.isEmpty(null)).toBe(true);
    expect(commonUtils.isEmpty(undefined)).toBe(true);
    expect(commonUtils.isEmpty([1, 2, 3])).toBe(false);
    expect(commonUtils.isEmpty({ a: 1 })).toBe(false);
    expect(commonUtils.isEmpty('hello')).toBe(false);
  });
});

describe('Performance Utilities', () => {
  test('measureExecutionTime should measure function execution time', () => {
    const [result, time] = performanceUtils.measureExecutionTime(() => {
      let sum = 0;
      for (let i = 0; i < 1000000; i++) {
        sum += i;
      }
      return sum;
    });
    expect(typeof result).toBe('number');
    expect(typeof time).toBe('number');
    expect(time).toBeGreaterThan(0);
  });
});
