import { Component, inject, OnInit, computed, signal } from '@angular/core';
import { AsyncPipe } from '@angular/common';
import { ProfileBuilderService, ActiveWidget } from './profile-builder.service';
import { LeftMenuComponent } from './left-menu.component';

@Component({
  selector: 'app-party-builder',
  standalone: true,
  imports: [AsyncPipe, LeftMenuComponent],
  template: `
    <!-- ... other template parts ... -->
    @if (activeProfile()) {
      <div class="party-builder">
        <app-left-menu />
        <div #widgetContainer></div>
        <div class="widget-controls">
          <div class="acknowledgment">
            <label>
              <input type="checkbox" 
                     [checked]="isActiveWidgetAcknowledged()"
                     (change)="toggleActiveWidgetAcknowledgment()">
              Acknowledge this widget
            </label>
          </div>
          <div class="widget-navigation">
            <button (click)="loadPreviousWidget()" 
                    [disabled]="isNavigating() || isFirstWidget()">
              Previous
            </button>
            <button (click)="loadNextWidget()" 
                    [disabled]="isNavigating() || (isLastWidget() | async)">
              Next
            </button>
          </div>
          <div class="navigation-mode">
            <label>
              <input type="checkbox" [checked]="includeSubItems()" (change)="toggleNavigationMode()">
              Include sub-items in navigation
            </label>
          </div>
        </div>
      </div>
    }
    <!-- ... other template parts ... -->
  `,
  styles: [/* ... */]
})
export class PartyBuilderComponent implements OnInit {
  private profileBuilder = inject(ProfileBuilderService);

  isNavigating = signal(false);
  includeSubItems = signal(false);

  activeWidget = this.profileBuilder.getActiveWidget;
  visibleWidgets = this.profileBuilder.getVisibleWidgets;

  isActiveWidgetAcknowledged = computed(() => {
    const currentWidget = this.activeWidget();
    return currentWidget 
      ? this.profileBuilder.isWidgetAcknowledged(currentWidget.widgetName)
      : false;
  });

  // ... existing properties and methods ...

  toggleActiveWidgetAcknowledgment() {
    const currentWidget = this.activeWidget();
    if (!currentWidget) return;

    const newAckState = !this.isActiveWidgetAcknowledged();
    this.profileBuilder.setWidgetAcknowledgment(currentWidget.widgetName, newAckState);
  }

  // ... other existing methods ...
}
