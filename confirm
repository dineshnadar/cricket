import { Injectable, signal, computed, WritableSignal } from '@angular/core';
import { WIDGET_CONFIG, WidgetConfig, SubMenuItem } from './widget-config';

@Injectable({ providedIn: 'root' })
export class WidgetStateService {
  private profileWidgetStates: WritableSignal<Record<string, WidgetState>[]> = signal([]);
  private activeProfileIndex: WritableSignal<number | null> = signal(null);

  // ... other properties and methods ...

  updateWidgetState(widgetName: string, update: Partial<WidgetState>, profileIndex: number) {
    console.log(`Updating widget state for: ${widgetName}`, update);
    
    let stateChanged = false;

    this.profileWidgetStates.update(allStates => {
      const newAllStates = [...allStates];
      const profileStates = { ...newAllStates[profileIndex] };
      if (profileStates[widgetName]) {
        const oldState = profileStates[widgetName];
        const newState = { ...oldState, ...update };
        profileStates[widgetName] = newState;
        stateChanged = this.hasStateChanged(oldState, newState);
      }
      newAllStates[profileIndex] = profileStates;
      return newAllStates;
    });

    console.log(`Updated state for ${widgetName}:`, this.profileWidgetStates()[profileIndex][widgetName]);

    // If the state has changed, update parent states
    if (stateChanged) {
      console.log(`State changed for ${widgetName}, updating parent states`);
      this.updateParentStates(widgetName, this.profileWidgetStates()[profileIndex], profileIndex);
    } else {
      console.log(`No state change for ${widgetName}, skipping parent update`);
    }
  }

  private updateParentStates(widgetName: string, profileStates: Record<string, WidgetState>, profileIndex: number) {
    console.log(`Starting updateParentStates for: ${widgetName}`);
    const updateRecursively = (items: (WidgetConfig | SubMenuItem)[], parent: WidgetConfig | SubMenuItem | null = null): boolean => {
      for (const item of items) {
        if (item.name === widgetName) {
          if (parent) {
            console.log(`Found parent for ${widgetName}: ${parent.name}`);
            const childStates = this.getChildStates(parent, profileStates);
            this.updateParentState(parent.name, childStates, profileStates, profileIndex);
          }
          return true;
        }
        
        const subItems = Array.isArray(item.subMenu) ? item.subMenu : [];
        if (updateRecursively(subItems, item)) {
          if (parent) {
            console.log(`Updating higher level parent: ${parent.name}`);
            const childStates = this.getChildStates(parent, profileStates);
            this.updateParentState(parent.name, childStates, profileStates, profileIndex);
          }
          return true;
        }
      }
      return false;
    };

    updateRecursively(WIDGET_CONFIG);
    console.log(`Finished updateParentStates for: ${widgetName}`);
  }

  private updateParentState(parentName: string, childStates: WidgetState[], profileStates: Record<string, WidgetState>, profileIndex: number) {
    // ... (keep the existing implementation of updateParentState)
  }

  private hasStateChanged(oldState: WidgetState, newState: Partial<WidgetState>): boolean {
    return Object.keys(newState).some(key => oldState[key as keyof WidgetState] !== newState[key as keyof WidgetState]);
  }

  private getChildStates(parent: WidgetConfig | SubMenuItem, profileStates: Record<string, WidgetState>): WidgetState[] {
    if (Array.isArray(parent.subMenu)) {
      return parent.subMenu.map(subItem => profileStates[subItem.name]).filter(Boolean);
    }
    return [];
  }

  // ... other methods ...
}



-------
import { Injectable, signal, computed, WritableSignal } from '@angular/core';
import { WIDGET_CONFIG, WidgetConfig, SubMenuItem } from './widget-config';

export interface WidgetState {
  visible: boolean;
  hasError: boolean;
  errorMessage: string;
  visited: boolean;
  acknowledged: boolean;
  active: boolean;
  status: 'pending' | 'in-progress' | 'completed' | 'error';
}

@Injectable({ providedIn: 'root' })
export class WidgetStateService {
  private profileWidgetStates: WritableSignal<Record<string, WidgetState>[]> = signal([]);
  private activeProfileIndex: WritableSignal<number | null> = signal(null);

  // ... other methods ...

  private updateParentState(parentName: string, childStates: WidgetState[], profileStates: Record<string, WidgetState>, profileIndex: number) {
    const allChildrenCompleted = childStates.every(state => state.status === 'completed');
    const anyChildError = childStates.some(state => state.status === 'error');
    const allChildrenAcknowledged = childStates.every(state => state.acknowledged);
    const anyChildVisited = childStates.some(state => state.visited);

    let newStatus: WidgetState['status'] = 'pending';
    if (allChildrenCompleted) newStatus = 'completed';
    else if (anyChildError) newStatus = 'error';
    else if (childStates.some(state => state.status === 'in-progress')) newStatus = 'in-progress';

    const currentParentState = profileStates[parentName];
    const newParentState: Partial<WidgetState> = {
      status: newStatus,
      acknowledged: allChildrenAcknowledged && currentParentState.acknowledged,
      visited: anyChildVisited || currentParentState.visited,
      hasError: anyChildError
    };

    // Only update if there's a change
    if (this.hasStateChanged(currentParentState, newParentState)) {
      this.updateWidgetState(parentName, newParentState, profileIndex);
      
      // Trigger update for the parent's parent
      this.updateParentStates(parentName, profileStates, profileIndex);
    }
  }

  private hasStateChanged(currentState: WidgetState, newState: Partial<WidgetState>): boolean {
    return Object.keys(newState).some(key => currentState[key as keyof WidgetState] !== newState[key as keyof WidgetState]);
  }

  // ... other methods ...
}

-------
import { Injectable, signal, computed, WritableSignal } from '@angular/core';
import { WIDGET_CONFIG, WidgetConfig, SubMenuItem } from './widget-config';

export interface WidgetState {
  visible: boolean;
  hasError: boolean;
  errorMessage: string;
  visited: boolean;
  acknowledged: boolean;
  active: boolean;
  status: 'pending' | 'in-progress' | 'completed' | 'error';
}

@Injectable({ providedIn: 'root' })
export class WidgetStateService {
  private profileWidgetStates: WritableSignal<Record<string, WidgetState>[]> = signal([]);
  private activeProfileIndex: WritableSignal<number | null> = signal(null);

  // ... other methods ...

  private updateParentStates(widgetName: string, profileStates: Record<string, WidgetState>, profileIndex: number) {
    const updateRecursively = (items: (WidgetConfig | SubMenuItem)[], parent: WidgetConfig | SubMenuItem | null = null): boolean => {
      for (const item of items) {
        if (item.name === widgetName) {
          if (parent) {
            const childStates = this.getChildStates(parent, profileStates);
            this.updateParentState(parent.name, childStates, profileStates, profileIndex);
          }
          return true;
        }
        
        const subItems = Array.isArray(item.subMenu) ? item.subMenu : [];
        if (updateRecursively(subItems, item)) {
          if (parent) {
            const childStates = this.getChildStates(parent, profileStates);
            this.updateParentState(parent.name, childStates, profileStates, profileIndex);
          }
          return true;
        }
      }
      return false;
    };

    updateRecursively(WIDGET_CONFIG);
  }

  private getChildStates(parent: WidgetConfig | SubMenuItem, profileStates: Record<string, WidgetState>): WidgetState[] {
    if (Array.isArray(parent.subMenu)) {
      return parent.subMenu.map(subItem => profileStates[subItem.name]).filter(Boolean);
    }
    return [];
  }

  private updateParentState(parentName: string, childStates: WidgetState[], profileStates: Record<string, WidgetState>, profileIndex: number) {
    const allChildrenCompleted = childStates.every(state => state.status === 'completed');
    const anyChildError = childStates.some(state => state.status === 'error');
    const allChildrenAcknowledged = childStates.every(state => state.acknowledged);
    const anyChildVisited = childStates.some(state => state.visited);

    let newStatus: WidgetState['status'] = 'pending';
    if (allChildrenCompleted) newStatus = 'completed';
    else if (anyChildError) newStatus = 'error';
    else if (childStates.some(state => state.status === 'in-progress')) newStatus = 'in-progress';

    this.updateWidgetState(parentName, {
      status: newStatus,
      acknowledged: allChildrenAcknowledged,
      visited: anyChildVisited || profileStates[parentName].visited,
      hasError: anyChildError
    }, profileIndex);
  }

  // ... other methods ...
}
