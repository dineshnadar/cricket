import { Injectable, signal, computed, WritableSignal } from '@angular/core';
import { WIDGET_CONFIG, WidgetConfig, SubMenuItem } from './widget-config';

export interface WidgetState {
  visible: boolean;
  hasError: boolean;
  errorMessage: string;
  visited: boolean;
  acknowledged: boolean;
  active: boolean;
  status: 'pending' | 'in-progress' | 'completed' | 'error';
}

@Injectable({ providedIn: 'root' })
export class WidgetStateService {
  private profileWidgetStates: WritableSignal<Record<string, WidgetState>[]> = signal([]);
  private activeProfileIndex: WritableSignal<number | null> = signal(null);

  // ... other methods ...

  private updateParentStates(widgetName: string, profileStates: Record<string, WidgetState>, profileIndex: number) {
    const updateRecursively = (items: (WidgetConfig | SubMenuItem)[], parent: WidgetConfig | SubMenuItem | null = null): boolean => {
      for (const item of items) {
        if (item.name === widgetName) {
          if (parent) {
            const childStates = this.getChildStates(parent, profileStates);
            this.updateParentState(parent.name, childStates, profileStates, profileIndex);
          }
          return true;
        }
        
        const subItems = Array.isArray(item.subMenu) ? item.subMenu : [];
        if (updateRecursively(subItems, item)) {
          if (parent) {
            const childStates = this.getChildStates(parent, profileStates);
            this.updateParentState(parent.name, childStates, profileStates, profileIndex);
          }
          return true;
        }
      }
      return false;
    };

    updateRecursively(WIDGET_CONFIG);
  }

  private getChildStates(parent: WidgetConfig | SubMenuItem, profileStates: Record<string, WidgetState>): WidgetState[] {
    if (Array.isArray(parent.subMenu)) {
      return parent.subMenu.map(subItem => profileStates[subItem.name]).filter(Boolean);
    }
    return [];
  }

  private updateParentState(parentName: string, childStates: WidgetState[], profileStates: Record<string, WidgetState>, profileIndex: number) {
    const allChildrenCompleted = childStates.every(state => state.status === 'completed');
    const anyChildError = childStates.some(state => state.status === 'error');
    const allChildrenAcknowledged = childStates.every(state => state.acknowledged);
    const anyChildVisited = childStates.some(state => state.visited);

    let newStatus: WidgetState['status'] = 'pending';
    if (allChildrenCompleted) newStatus = 'completed';
    else if (anyChildError) newStatus = 'error';
    else if (childStates.some(state => state.status === 'in-progress')) newStatus = 'in-progress';

    this.updateWidgetState(parentName, {
      status: newStatus,
      acknowledged: allChildrenAcknowledged,
      visited: anyChildVisited || profileStates[parentName].visited,
      hasError: anyChildError
    }, profileIndex);
  }

  // ... other methods ...
}
