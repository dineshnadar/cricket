import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-form-sections',
  template: `
    <div *ngFor="let section of groupedSections" class="section">
      <h2>{{ section.label }}</h2>
      
      <div class="row">
        <div class="col-md-6">
          <ng-container *ngFor="let field of section.fieldsLeft">
            <div class="field-display">
              <strong>{{ field.label }}:</strong>
              <span [ngSwitch]="field.fieldType">
                <span *ngSwitchCase="'checkbox'">{{ field.value ? 'Yes' : 'No' }}</span>
                <span *ngSwitchCase="'date'">{{ field.value | date }}</span>
                <span *ngSwitchDefault>{{ field.value }}</span>
              </span>
            </div>
          </ng-container>
        </div>
        
        <div class="col-md-6">
          <ng-container *ngFor="let field of section.fieldsRight">
            <div class="field-display">
              <strong>{{ field.label }}:</strong>
              <span [ngSwitch]="field.fieldType">
                <span *ngSwitchCase="'checkbox'">{{ field.value ? 'Yes' : 'No' }}</span>
                <span *ngSwitchCase="'date'">{{ field.value | date }}</span>
                <span *ngSwitchDefault>{{ field.value }}</span>
              </span>
            </div>
          </ng-container>
        </div>
      </div>
      
      <div class="row">
        <div class="col-md-12">
          <ng-container *ngFor="let field of section.fieldsFull">
            <div class="field-display">
              <strong>{{ field.label }}:</strong>
              <span [ngSwitch]="field.fieldType">
                <span *ngSwitchCase="'checkbox'">{{ field.value ? 'Yes' : 'No' }}</span>
                <span *ngSwitchCase="'date'">{{ field.value | date }}</span>
                <ul *ngSwitchCase="'arraySimple'">
                  <li *ngFor="let item of field.value">{{ item }}</li>
                </ul>
                <span *ngSwitchDefault>{{ field.value }}</span>
              </span>
            </div>
          </ng-container>
        </div>
      </div>
    </div>
  `,
  styles: [`
    .section {
      margin-bottom: 20px;
    }
    .field-display {
      margin-bottom: 10px;
    }
    .field-display strong {
      display: inline-block;
      min-width: 150px;
      margin-right: 10px;
    }
  `]
})
export class FormSectionsComponent implements OnInit {
  groupedSections: any[];

  ngOnInit() {
    // Assume we have our original sections data
    const originalSections = [/* Your sections data here */];
    
    // Use our optimized grouping function
    this.groupedSections = this.optimizedGroupFieldsBySide(originalSections, false);
  }

  optimizedGroupFieldsBySide(sections: any[], sortByLabel = true) {
    return sections.map(section => {
      const { fields, ...restSection } = section;
      const grouped = { fieldsLeft: [], fieldsRight: [], fieldsFull: [] };
      let leftCount = 0, rightCount = 0;

      fields.forEach((field, index) => {
        // Ensure seq exists
        if (field.seq == null) field.seq = index;
        
        // Determine side
        let side = field.side;
        if (!side || !['left', 'right', 'full'].includes(side)) {
          if (leftCount <= rightCount) {
            side = 'left';
            leftCount++;
          } else {
            side = 'right';
            rightCount++;
          }
        }
        
        // Add to appropriate array
        grouped[`fields${side.charAt(0).toUpperCase() + side.slice(1)}`].push(field);
      });

      // Sort function
      const sortFields = (fields) => {
        fields.sort(sortByLabel
          ? (a, b) => a.label.localeCompare(b.label)
          : (a, b) => a.seq - b.seq || fields.indexOf(a) - fields.indexOf(b)
        );
        fields.forEach((field, index) => field.seq = index + 1);
      };

      // Sort each group
      Object.values(grouped).forEach(sortFields);

      return { ...restSection, ...grouped };
    });
  }
}
