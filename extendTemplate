// src/app/lookup/lookup-data.model.ts
export interface BaseLookupItem {
  [key: string]: string;
}

export interface StandardLookupItem extends BaseLookupItem {
  dbVal: string;
  dbDesc: string;
}

export interface MappedLookupItem extends BaseLookupItem {
  value: string;
  displayValue: string;
}

export type LookupItem = StandardLookupItem | MappedLookupItem;

export interface ApiResponse {
  body: {
    [lookupName: string]: LookupItem[];
  };
}

export enum LookupDataState {
  INITIAL,
  LOADING,
  LOADED,
  ERROR
}

export interface LookupOption {
  value: string;
  label: string;
}

// src/app/lookup/lookup-data.service.ts
import { Injectable, signal, computed } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Observable, of, catchError, map, tap, shareReplay, throwError } from 'rxjs';
import { ApiResponse, StandardLookupItem, MappedLookupItem, LookupDataState, LookupOption } from './lookup-data.model';

@Injectable({
  providedIn: 'root'
})
export class LookupDataService {
  private cachedData = signal<ApiResponse | null>(null);
  private dataFetch$: Observable<ApiResponse> | null = null;
  private dataState = signal<LookupDataState>(LookupDataState.INITIAL);
  private errorMessage = signal<string | null>(null);
  private readonly STORAGE_KEY = 'lookupData';

  readonly lookupNames = computed(() => {
    const data = this.cachedData();
    return data ? Object.keys(data.body) : [];
  });

  readonly state = computed(() => this.dataState());
  readonly error = computed(() => this.errorMessage());

  constructor(private http: HttpClient) {
    this.loadFromStorage();
  }

  private loadFromStorage(): void {
    const storedData = localStorage.getItem(this.STORAGE_KEY);
    if (storedData) {
      const data = JSON.parse(storedData);
      this.cachedData.set(data);
      this.dataState.set(LookupDataState.LOADED);
    }
  }

  private saveToStorage(data: ApiResponse): void {
    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(data));
  }

  resolveData(): Observable<ApiResponse> {
    if (this.isDataLoaded() && this.cachedData()) {
      return of(this.cachedData()!);
    }

    if (this.dataFetch$) {
      return this.dataFetch$;
    }

    this.dataState.set(LookupDataState.LOADING);
    this.errorMessage.set(null);

    this.dataFetch$ = this.http.get<ApiResponse>('api/lookup-data').pipe(
      map(this.normalizeApiResponse),
      tap(data => {
        if (Object.keys(data.body).length === 0) {
          throw new Error('No lookup data available');
        }
        this.cachedData.set(data);
        this.dataState.set(LookupDataState.LOADED);
        this.saveToStorage(data);
      }),
      catchError(this.handleError),
      shareReplay(1)
    );

    return this.dataFetch$;
  }

  private normalizeApiResponse(response: ApiResponse): ApiResponse {
    const normalizedBody: ApiResponse['body'] = {};
    
    for (const [lookupName, items] of Object.entries(response.body)) {
      normalizedBody[lookupName] = items.map(item => this.normalizeItem(item));
    }

    return { body: normalizedBody };
  }

  private normalizeItem(item: LookupItem): StandardLookupItem {
    if ('dbVal' in item && 'dbDesc' in item) {
      return item;
    } else if ('value' in item && 'displayValue' in item) {
      return {
        dbVal: item.value,
        dbDesc: item.displayValue
      };
    } else {
      console.warn('Unexpected item format:', item);
      return { dbVal: '', dbDesc: '' };
    }
  }

  private handleError = (error: HttpErrorResponse) => {
    let errorMsg: string;
    if (error.error instanceof ErrorEvent) {
      errorMsg = `Client-side error: ${error.error.message}`;
    } else {
      errorMsg = `Server-side error: ${error.status} ${error.message}`;
    }
    console.error(errorMsg);
    this.dataState.set(LookupDataState.ERROR);
    this.errorMessage.set(errorMsg);
    this.dataFetch$ = null;
    return throwError(() => new Error(errorMsg));
  };

  refreshData(): Observable<ApiResponse> {
    this.cachedData.set(null);
    this.dataFetch$ = null;
    localStorage.removeItem(this.STORAGE_KEY);
    return this.resolveData();
  }

  getLookupItems(lookupName: string): StandardLookupItem[] {
    const data = this.cachedData();
    return data?.body[lookupName] ?? [];
  }

  getMappedLookupItems(lookupName: string): MappedLookupItem[] {
    return this.getLookupItems(lookupName).map(item => ({
      value: item.dbVal,
      displayValue: item.dbDesc
    }));
  }

  getLookupItemByValue(lookupName: string, value: string): StandardLookupItem | undefined {
    return this.getLookupItems(lookupName).find(item => item.dbVal === value);
  }

  getLookupItemByDescription(lookupName: string, description: string): StandardLookupItem | undefined {
    return this.getLookupItems(lookupName).find(item => item.dbDesc === description);
  }

  getDescriptionByValue(lookupName: string, value: string): string {
    return this.getLookupItemByValue(lookupName, value)?.dbDesc ?? '';
  }

  getValueByDescription(lookupName: string, description: string): string {
    return this.getLookupItemByDescription(lookupName, description)?.dbVal ?? '';
  }

  getMappedLookupItemByValue(lookupName: string, value: string): MappedLookupItem | undefined {
    const item = this.getLookupItemByValue(lookupName, value);
    return item ? { value: item.dbVal, displayValue: item.dbDesc } : undefined;
  }

  getMappedLookupItemByDisplayValue(lookupName: string, displayValue: string): MappedLookupItem | undefined {
    const item = this.getLookupItemByDescription(lookupName, displayValue);
    return item ? { value: item.dbVal, displayValue: item.dbDesc } : undefined;
  }

  // Helper Methods
  isDataLoaded(): boolean {
    return this.dataState() === LookupDataState.LOADED;
  }

  isLoading(): boolean {
    return this.dataState() === LookupDataState.LOADING;
  }

  hasError(): boolean {
    return this.dataState() === LookupDataState.ERROR;
  }

  getErrorMessage(): string | null {
    return this.errorMessage();
  }

  getLookupOptions(lookupName: string): LookupOption[] {
    return this.getLookupItems(lookupName).map(item => ({
      value: item.dbVal,
      label: item.dbDesc
    }));
  }

  hasLookup(lookupName: string): boolean {
    return this.lookupNames().includes(lookupName);
  }

  getLookupItemCount(lookupName: string): number {
    return this.getLookupItems(lookupName).length;
  }

  findStandardItemByPartialMatch(lookupName: string, partialValue: string): StandardLookupItem | undefined {
    return this.getLookupItems(lookupName).find(item => 
      item.dbVal.toLowerCase().includes(partialValue.toLowerCase()) || 
      item.dbDesc.toLowerCase().includes(partialValue.toLowerCase())
    );
  }

  getAllStandardItemsByPartialMatch(lookupName: string, partialValue: string): StandardLookupItem[] {
    return this.getLookupItems(lookupName).filter(item => 
      item.dbVal.toLowerCase().includes(partialValue.toLowerCase()) || 
      item.dbDesc.toLowerCase().includes(partialValue.toLowerCase())
    );
  }

  findMappedItemByPartialMatch(lookupName: string, partialValue: string): MappedLookupItem | undefined {
    const standardItem = this.findStandardItemByPartialMatch(lookupName, partialValue);
    return standardItem ? { value: standardItem.dbVal, displayValue: standardItem.dbDesc } : undefined;
  }

  getAllMappedItemsByPartialMatch(lookupName: string, partialValue: string): MappedLookupItem[] {
    return this.getAllStandardItemsByPartialMatch(lookupName, partialValue)
      .map(item => ({ value: item.dbVal, displayValue: item.dbDesc }));
  }

  getDistinctValues(lookupName: string): string[] {
    return [...new Set(this.getLookupItems(lookupName).map(item => item.dbVal))];
  }

  getDistinctDescriptions(lookupName: string): string[] {
    return [...new Set(this.getLookupItems(lookupName).map(item => item.dbDesc))];
  }
}

// src/app/lookup/lookup-data.resolver.ts
import { ResolveFn } from '@angular/router';
import { inject } from '@angular/core';
import { LookupDataService } from './lookup-data.service';
import { ApiResponse } from './lookup-data.model';

export const lookupDataResolver: ResolveFn<ApiResponse> = () => {
  const lookupDataService = inject(LookupDataService);
  return lookupDataService.resolveData();
};

// src/app/lookup/lookup-example.component.ts
import { Component, inject, OnInit } from '@angular/core';
import { AsyncPipe, NgFor, NgIf, NgSwitch, NgSwitchCase } from '@angular/common';
import { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { LookupDataService } from './lookup-data.service';
import { LookupDataState, LookupOption, MappedLookupItem } from './lookup-data.model';

@Component({
  selector: 'app-lookup-example',
  standalone: true,
  imports: [NgFor, NgIf, NgSwitch, NgSwitchCase, AsyncPipe, ReactiveFormsModule],
  template: `
    <ng-container [ngSwitch]="lookupDataService.state()">
      <ng-container *ngSwitchCase="LookupDataState.LOADING">
        <p>Loading lookup data...</p>
      </ng-container>
      
      <ng-container *ngSwitchCase="LookupDataState.LOADED">
        <form [formGroup]="form">
          <div *ngFor="let name of lookupDataService.lookupNames()">
            <label>
              {{ name }} ({{ lookupDataService.getLookupItemCount(name) }} items):
              <select [formControlName]="name">
                <option value="">Select an option</option>
                <option *ngFor="let option of getLookupOptions(name)" [value]="option.value">
                  {{ option.label }}
                </option>
              </select>
            </label>
          </div>
        </form>
        <div *ngFor="let name of lookupDataService.lookupNames()">
          <h3>{{ name }}</h3>
          <p>Selected Value: {{ getSelectedValue(name) }}</p>
          <p>Selected Description: {{ getSelectedDescription(name) }}</p>
          <p>Distinct Values: {{ lookupDataService.getDistinctValues(name).join(', ') }}</p>
          <p>Distinct Descriptions: {{ lookupDataService.getDistinctDescriptions(name).join(', ') }}</p>
          <h4>Partial Match Results:</h4>
          <ul>
            <li *ngFor="let item of getPartialMatchItems(name, 'a')">
              {{ item.value }} - {{ item.displayValue }}
            </li>
          </ul>
        </div>
      </ng-container>
      
      <ng-container *ngSwitchCase="LookupDataState.ERROR">
        <p>Error: {{ lookupDataService.getErrorMessage() }}</p>
      </ng-container>
    </ng-container>
    
    <button (click)="refreshData()" [disabled]="lookupDataService.isLoading()">
      {{ lookupDataService.isLoading() ? 'Refreshing...' : 'Refresh Data' }}
    </button>
  `
})
export class LookupExampleComponent implements OnInit {
  private lookupDataService = inject(LookupDataService);
  private fb = inject(FormBuilder);
  
  LookupDataState = LookupDataState;
  form: FormGroup;

  ngOnInit() {
    this.initForm();
  }

  initForm() {
    const formControls = {};
    this.lookupDataService.lookupNames().forEach(name => {
      formControls[name] = [''];
    });
    this.form = this.fb.group(formControls);
  }

  getLookupOptions(name: string): LookupOption[] {
    return this.lookupDataService.getLookupOptions(name);
  }

  getSelectedValue(name: string): string {
    return this.form.get(name)?.value || '';
  }

  getSelectedDescription(name: string): string {
    const value = this.getSelectedValue(name);
    return this.lookupDataService.getDescriptionByValue(name, value);
  }

  getPartialMatchItems(name: string, partialValue: string): MappedLookupItem[] {
    return this.lookupDataService.getAllMappedItemsByPartialMatch(name, partialValue);
  }

  refreshData() {
    this.lookupDataService.refreshData().subscribe(() => this.initForm());
  }
}

// src/app/app.routes.ts
import { Routes } from '@angular/router';
import { lookupDataResolver } from './lookup/lookup-data.resolver';
import { LookupExampleComponent } from './lookup/lookup-example.component';

export const routes: Routes = [
  {
    path: 'lookup-example',
    component: LookupExampleComponent,
    resolve: { lookupData: lookupDataResolver }
  },
  // ... other routes
];

// src/main.ts
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { provideRouter } from '@angular/router';
import { routes } from './app/app.routes';
import { provideHttpClient } from '@angular/common/http';

bootstrapApplication(AppComponent, {
  providers: [
    provideRouter(routes),
    provideHttp

---------------------------

import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { LookupDataService } from './lookup-data.service';
import { ApiResponse, LookupDataState } from './lookup-data.model';

describe('LookupDataService', () => {
  let service: LookupDataService;
  let httpMock: HttpTestingController;

  const mockApiResponse: ApiResponse = {
    body: {
      countries: [
        { dbVal: 'US', dbDesc: 'United States' },
        { dbVal: 'CA', dbDesc: 'Canada' },
      ],
      cities: [
        { dbVal: 'NYC', dbDesc: 'New York City' },
        { dbVal: 'LA', dbDesc: 'Los Angeles' },
      ],
    },
  };

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [LookupDataService],
    });

    service = TestBed.inject(LookupDataService);
    httpMock = TestBed.inject(HttpTestingController);

    // Clear localStorage before each test
    localStorage.clear();
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  describe('resolveData', () => {
    it('should fetch data from API when not cached', (done) => {
      service.resolveData().subscribe((response) => {
        expect(response).toEqual(mockApiResponse);
        expect(service.state()).toBe(LookupDataState.LOADED);
        done();
      });

      const req = httpMock.expectOne('api/lookup-data');
      expect(req.request.method).toBe('GET');
      req.flush(mockApiResponse);
    });

    it('should return cached data when available', (done) => {
      // First, populate the cache
      service.resolveData().subscribe(() => {
        // Then, call resolveData again
        service.resolveData().subscribe((response) => {
          expect(response).toEqual(mockApiResponse);
          expect(service.state()).toBe(LookupDataState.LOADED);
          // Ensure no HTTP request was made for the second call
          httpMock.expectNone('api/lookup-data');
          done();
        });
      });

      const req = httpMock.expectOne('api/lookup-data');
      req.flush(mockApiResponse);
    });

    it('should handle API errors', (done) => {
      service.resolveData().subscribe(
        () => {
          fail('should have failed with the 404 error');
        },
        (error: Error) => {
          expect(error.message).toContain('Server-side error: 404');
          expect(service.state()).toBe(LookupDataState.ERROR);
          expect(service.getErrorMessage()).toContain('Server-side error: 404');
          done();
        }
      );

      const req = httpMock.expectOne('api/lookup-data');
      req.flush('Not Found', { status: 404, statusText: 'Not Found' });
    });
  });

  describe('Helper Methods', () => {
    beforeEach(() => {
      // Populate the service with mock data
      service['cachedData'].set(mockApiResponse);
      service['dataState'].set(LookupDataState.LOADED);
    });

    it('should return correct lookup names', () => {
      expect(service.lookupNames()).toEqual(['countries', 'cities']);
    });

    it('should return correct lookup items', () => {
      expect(service.getLookupItems('countries')).toEqual([
        { dbVal: 'US', dbDesc: 'United States' },
        { dbVal: 'CA', dbDesc: 'Canada' },
      ]);
    });

    it('should return correct mapped lookup items', () => {
      expect(service.getMappedLookupItems('cities')).toEqual([
        { value: 'NYC', displayValue: 'New York City' },
        { value: 'LA', displayValue: 'Los Angeles' },
      ]);
    });

    it('should find lookup item by value', () => {
      expect(service.getLookupItemByValue('countries', 'US')).toEqual({
        dbVal: 'US',
        dbDesc: 'United States',
      });
    });

    it('should find lookup item by description', () => {
      expect(service.getLookupItemByDescription('cities', 'Los Angeles')).toEqual({
        dbVal: 'LA',
        dbDesc: 'Los Angeles',
      });
    });

    it('should get description by value', () => {
      expect(service.getDescriptionByValue('countries', 'CA')).toBe('Canada');
    });

    it('should get value by description', () => {
      expect(service.getValueByDescription('cities', 'New York City')).toBe('NYC');
    });

    it('should check if lookup exists', () => {
      expect(service.hasLookup('countries')).toBe(true);
      expect(service.hasLookup('nonexistent')).toBe(false);
    });

    it('should get lookup item count', () => {
      expect(service.getLookupItemCount('cities')).toBe(2);
    });

    it('should find items by partial match', () => {
      const partialMatches = service.getAllStandardItemsByPartialMatch('countries', 'United');
      expect(partialMatches).toEqual([{ dbVal: 'US', dbDesc: 'United States' }]);
    });

    it('should get distinct values', () => {
      expect(service.getDistinctValues('countries')).toEqual(['US', 'CA']);
    });

    it('should get distinct descriptions', () => {
      expect(service.getDistinctDescriptions('cities')).toEqual(['New York City', 'Los Angeles']);
    });
  });

  describe('localStorage Integration', () => {
    it('should save data to localStorage after fetching', (done) => {
      service.resolveData().subscribe(() => {
        const storedData = localStorage.getItem('lookupData');
        expect(storedData).toBeTruthy();
        expect(JSON.parse(storedData!)).toEqual(mockApiResponse);
        done();
      });

      const req = httpMock.expectOne('api/lookup-data');
      req.flush(mockApiResponse);
    });

    it('should load data from localStorage on service initialization', () => {
      localStorage.setItem('lookupData', JSON.stringify(mockApiResponse));
      
      // Re-create the service to trigger constructor
      service = TestBed.inject(LookupDataService);
      
      expect(service.state()).toBe(LookupDataState.LOADED);
      expect(service.lookupNames()).toEqual(['countries', 'cities']);
    });
  });

  describe('refreshData', () => {
    it('should clear cache and fetch new data', (done) => {
      // First, populate the cache
      service.resolveData().subscribe(() => {
        // Then, refresh the data
        service.refreshData().subscribe((response) => {
          expect(response).toEqual(mockApiResponse);
          expect(service.state()).toBe(LookupDataState.LOADED);
          expect(localStorage.getItem('lookupData')).toBeTruthy();
          done();
        });
      });

      // Handle both HTTP requests
      httpMock.expectOne('api/lookup-data').flush(mockApiResponse);
      httpMock.expectOne('api/lookup-data').flush(mockApiResponse);
    });
  });
});

--------------------------

// src/app/app.config.ts
import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';
import { routes } from './app.routes';
import { provideHttpClient } from '@angular/common/http';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes),
    provideHttpClient()
  ]
};

// src/app/app.routes.ts
import { Routes } from '@angular/router';
import { lookupDataResolver } from './lookup/lookup-data.resolver';

export const routes: Routes = [
  {
    path: '',
    loadComponent: () => import('./home/home.component').then(m => m.HomeComponent)
  },
  {
    path: 'lookup-example',
    loadComponent: () => import('./lookup/lookup-example.component').then(m => m.LookupExampleComponent),
    resolve: { lookupData: lookupDataResolver }
  }
];

// src/app/app.component.ts
import { Component } from '@angular/core';
import { RouterOutlet, RouterLink } from '@angular/router';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet, RouterLink],
  template: `
    <nav>
      <a routerLink="/">Home</a> |
      <a routerLink="/lookup-example">Lookup Example</a>
    </nav>
    <router-outlet></router-outlet>
  `
})
export class AppComponent { }

// src/app/home/home.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-home',
  standalone: true,
  template: '<h1>Welcome to Lookup Data Example</h1>'
})
export class HomeComponent { }

// src/app/lookup/lookup-example.component.ts
import { Component, inject, OnInit } from '@angular/core';
import { AsyncPipe, NgFor, NgIf, NgSwitch, NgSwitchCase } from '@angular/common';
import { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { LookupDataService } from './lookup-data.service';
import { LookupDataState, LookupOption, MappedLookupItem } from './lookup-data.model';

@Component({
  selector: 'app-lookup-example',
  standalone: true,
  imports: [NgFor, NgIf, NgSwitch, NgSwitchCase, AsyncPipe, ReactiveFormsModule],
  template: `
    <ng-container [ngSwitch]="lookupDataService.state()">
      <ng-container *ngSwitchCase="LookupDataState.LOADING">
        <p>Loading lookup data...</p>
      </ng-container>
      
      <ng-container *ngSwitchCase="LookupDataState.LOADED">
        <form [formGroup]="form">
          <div *ngFor="let name of lookupDataService.lookupNames()">
            <label>
              {{ name }} ({{ lookupDataService.getLookupItemCount(name) }} items):
              <select [formControlName]="name">
                <option value="">Select an option</option>
                <option *ngFor="let option of getLookupOptions(name)" [value]="option.value">
                  {{ option.label }}
                </option>
              </select>
            </label>
          </div>
        </form>
        <div *ngFor="let name of lookupDataService.lookupNames()">
          <h3>{{ name }}</h3>
          <p>Selected Value: {{ getSelectedValue(name) }}</p>
          <p>Selected Description: {{ getSelectedDescription(name) }}</p>
          <p>Distinct Values: {{ lookupDataService.getDistinctValues(name).join(', ') }}</p>
          <p>Distinct Descriptions: {{ lookupDataService.getDistinctDescriptions(name).join(', ') }}</p>
          <h4>Partial Match Results (matching 'a'):</h4>
          <ul>
            <li *ngFor="let item of getPartialMatchItems(name, 'a')">
              {{ item.value }} - {{ item.displayValue }}
            </li>
          </ul>
        </div>
      </ng-container>
      
      <ng-container *ngSwitchCase="LookupDataState.ERROR">
        <p>Error: {{ lookupDataService.getErrorMessage() }}</p>
      </ng-container>
    </ng-container>
    
    <button (click)="refreshData()" [disabled]="lookupDataService.isLoading()">
      {{ lookupDataService.isLoading() ? 'Refreshing...' : 'Refresh Data' }}
    </button>
  `
})
export class LookupExampleComponent implements OnInit {
  private lookupDataService = inject(LookupDataService);
  private fb = inject(FormBuilder);
  
  LookupDataState = LookupDataState;
  form: FormGroup;

  ngOnInit() {
    this.initForm();
  }

  initForm() {
    const formControls = {};
    this.lookupDataService.lookupNames().forEach(name => {
      formControls[name] = [''];
    });
    this.form = this.fb.group(formControls);
  }

  getLookupOptions(name: string): LookupOption[] {
    return this.lookupDataService.getLookupOptions(name);
  }

  getSelectedValue(name: string): string {
    return this.form.get(name)?.value || '';
  }

  getSelectedDescription(name: string): string {
    const value = this.getSelectedValue(name);
    return this.lookupDataService.getDescriptionByValue(name, value);
  }

  getPartialMatchItems(name: string, partialValue: string): MappedLookupItem[] {
    return this.lookupDataService.getAllMappedItemsByPartialMatch(name, partialValue);
  }

  refreshData() {
    this.lookupDataService.refreshData().subscribe(() => this.initForm());
  }
}

// src/main.ts
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { appConfig } from './app/app.config';

bootstrapApplication(AppComponent, appConfig)
  .catch(err => console.error(err));

