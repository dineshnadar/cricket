// profile-form.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormArray } from '@angular/forms';
import { PersonalInfoService } from './personal-info.service'; // Your existing service
import { ProfileValidationService } from './profile-validation.service';

@Component({
  selector: 'app-profile-form',
  templateUrl: './profile-form.component.html'
})
export class ProfileFormComponent implements OnInit {
  profileForm: FormGroup;
  
  constructor(
    private fb: FormBuilder,
    private personalInfoService: PersonalInfoService,
    private validationService: ProfileValidationService
  ) {
    this.initForm();
  }
  
  initForm() {
    // Create the main form
    this.profileForm = this.fb.group({
      profiles: this.fb.array([])
    });
    
    // Add an initial profile
    this.addProfile();
  }
  
  ngOnInit() {
    // Register main form with validation service
    this.validationService.registerMainForm(this.profileForm);
  }
  
  // Add a profile to the profiles array
  addProfile() {
    const profilesArray = this.profileForm.get('profiles') as FormArray;
    
    // Use your personal info service to generate the form group
    const newProfile = this.personalInfoService.createProfileFormGroup();
    profilesArray.push(newProfile);
    
    // Register with validation service
    this.validationService.registerNewProfile(profilesArray);
  }
  
  // Add a phone info to a profile
  addPhoneInfo(profileIndex: number) {
    const profilesArray = this.profileForm.get('profiles') as FormArray;
    const profile = profilesArray.at(profileIndex) as FormGroup;
    const phoneArray = profile.get('contactInfo.phoneInfo') as FormArray;
    
    // Use your personal info service to create a phone entry
    const phoneEntry = this.personalInfoService.createPhoneInfoFormGroup();
    phoneArray.push(phoneEntry);
    
    // Register with validation service
    this.validationService.registerNewPhoneInfo(phoneArray, profileIndex);
  }
  
  // Add an email info to a profile
  addEmailInfo(profileIndex: number) {
    const profilesArray = this.profileForm.get('profiles') as FormArray;
    const profile = profilesArray.at(profileIndex) as FormGroup;
    const emailArray = profile.get('contactInfo.emailInfo') as FormArray;
    
    // Use your personal info service to create an email entry
    const emailEntry = this.personalInfoService.createEmailInfoFormGroup();
    emailArray.push(emailEntry);
    
    // Register with validation service
    this.validationService.registerNewEmailInfo(emailArray, profileIndex);
  }
  
  // Check if a field has an error (for template)
  hasError(control: AbstractControl): boolean {
    return this.validationService.hasFieldError(control);
  }
  
  // Get error summary (for template)
  getErrorSummary(): string[] {
    return this.validationService.getErrorSummary();
  }
  
  // Validate and submit
  onSubmit() {
    if (this.validationService.validateAllForms()) {
      console.log('Form submitted successfully', this.profileForm.value);
      // Process form data...
    } else {
      console.log('Validation failed');
    }
  }
}
