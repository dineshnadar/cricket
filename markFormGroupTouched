// src/app/services/profile-builder.service.ts
import { Injectable } from '@angular/core';
import { FormBuilder, FormGroup, FormArray } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable, forkJoin } from 'rxjs';
import { Profile } from '../models/profile.model';
import { ProfileSection } from '../models/profile-section.model';

@Injectable({
  providedIn: 'root'
})
export class ProfileBuilderService {
  private profileSectionsSubject = new BehaviorSubject<ProfileSection[]>([]);
  profileSections$ = this.profileSectionsSubject.asObservable();

  constructor(
    private fb: FormBuilder,
    private http: HttpClient
  ) {
    this.initializeProfileSections();
  }

  private initializeProfileSections() {
    const sections: ProfileSection[] = [
      { key: 'personalInfo', label: 'Personal Information', visible: true, errorCount: 0, componentPath: () => import('../components/personal-info/personal-info.component').then(m => m.PersonalInfoComponent) },
      { key: 'professionalInfo', label: 'Professional Information', visible: true, errorCount: 0, componentPath: () => import('../components/professional-info/professional-info.component').then(m => m.ProfessionalInfoComponent) },
      // Add other sections as needed
    ];
    this.profileSectionsSubject.next(sections);
  }

  // ... other methods remain the same

  updateSectionErrorCount(sectionKey: string, errorCount: number): void {
    const currentSections = this.profileSectionsSubject.value;
    const updatedSections = currentSections.map(section => 
      section.key === sectionKey ? { ...section, errorCount } : section
    );
    this.profileSectionsSubject.next(updatedSections);
  }

  // ... rest of the service remains the same
}

// src/app/models/profile-section.model.ts
export interface ProfileSection {
  key: string;
  label: string;
  visible: boolean;
  errorCount: number;
  componentPath: () => Promise<any>;
}

// src/app/containers/profile-builder/profile-builder.component.ts
import { Component, OnInit, Input, ViewChild, ViewContainerRef } from '@angular/core';
import { FormGroup, FormArray } from '@angular/forms';
import { ProfileBuilderService } from '../../services/profile-builder.service';
import { Profile } from '../../models/profile.model';

@Component({
  selector: 'app-profile-builder',
  templateUrl: './profile-builder.component.html'
})
export class ProfileBuilderComponent implements OnInit {
  @Input() partyId?: string;
  @Input() loadAllSections = false;
  
  @ViewChild('dynamicComponentContainer', { read: ViewContainerRef }) dynamicComponentContainer: ViewContainerRef;
  
  profilesForm: FormGroup;
  metadata: any = {};
  currentSection: string = '';

  constructor(
    private profileBuilderService: ProfileBuilderService
  ) {}

  ngOnInit() {
    this.createForm();
    if (this.partyId) {
      this.loadData();
    } else {
      this.addNewProfile();
    }
  }

  private createForm() {
    this.profilesForm = this.profileBuilderService.createProfilesForm();
  }

  private loadData() {
    this.profileBuilderService.loadProfileData(this.partyId).subscribe(
      ({ profiles, metadata }) => {
        this.metadata = metadata;
        this.profileBuilderService.applyDataToForm(this.profilesForm, profiles, metadata);
        if (this.loadAllSections) {
          this.loadAllComponents();
        }
      },
      error => console.error('Error loading profile data:', error)
    );
  }

  addNewProfile() {
    const profilesArray = this.profilesForm.get('profiles') as FormArray;
    profilesArray.push(this.profileBuilderService.createProfileForm());
  }

  onSectionSelected(sectionKey: string) {
    this.currentSection = sectionKey;
    this.loadComponent(sectionKey);
  }

  private async loadComponent(sectionKey: string) {
    const sections = await this.profileBuilderService.profileSections$.toPromise();
    const section = sections.find(s => s.key === sectionKey);
    if (section && section.visible) {
      const component = await section.componentPath();
      this.dynamicComponentContainer.clear();
      const componentRef = this.dynamicComponentContainer.createComponent(component);
      
      // Pass necessary inputs to the component
      (componentRef.instance as any).form = this.profilesForm.get(`profiles.0.partyDetails.${sectionKey}`);
      (componentRef.instance as any).metadata = this.metadata[sectionKey];
      
      // Listen for error changes
      (componentRef.instance as any).errorsChange.subscribe((errorCount: number) => {
        this.profileBuilderService.updateSectionErrorCount(sectionKey, errorCount);
      });
    }
  }

  private async loadAllComponents() {
    const sections = await this.profileBuilderService.profileSections$.toPromise();
    for (const section of sections) {
      if (section.visible) {
        await this.loadComponent(section.key);
      }
    }
  }

  onSubmit() {
    if (this.profilesForm.valid) {
      const profilesData: Profile[] = this.profilesForm.value.profiles;
      this.profileBuilderService.saveProfiles(profilesData).subscribe(
        result => console.log('Profiles saved successfully', result),
        error => console.error('Error saving profiles:', error)
      );
    } else {
      this.markFormGroupTouched(this.profilesForm);
    }
  }

  private markFormGroupTouched(formGroup: FormGroup | FormArray) {
    Object.values(formGroup.controls).forEach(control => {
      if (control instanceof FormGroup || control instanceof FormArray) {
        this.markFormGroupTouched(control);
      } else {
        control.markAsTouched();
      }
    });
  }
}

// src/app/components/personal-info/personal-info.component.ts
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormGroup, ReactiveFormsModule } from '@angular/forms';

@Component({
  selector: 'app-personal-info',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './personal-info.component.html'
})
export class PersonalInfoComponent {
  @Input() form: FormGroup;
  @Input() metadata: any;
  @Output() errorsChange = new EventEmitter<number>();

  // Component logic here
}

// src/app/components/professional-info/professional-info.component.ts
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormGroup, ReactiveFormsModule } from '@angular/forms';

@Component({
  selector: 'app-professional-info',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './professional-info.component.html'
})
export class ProfessionalInfoComponent {
  @Input() form: FormGroup;
  @Input() metadata: any;
  @Output() errorsChange = new EventEmitter<number>();

  // Component logic here
}
